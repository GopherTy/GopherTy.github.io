<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mint</title>
      <link href="/2021/03/28/mint/"/>
      <url>/2021/03/28/mint/</url>
      
        <content type="html"><![CDATA[<h1 id="Mint-操作系统笔记"><a href="#Mint-操作系统笔记" class="headerlink" title="Mint 操作系统笔记"></a>Mint 操作系统笔记</h1><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><p>硬盘分为 IDE 银盘，SCSI 硬盘和 SATA 硬盘。在 Linux 中 IDE 接口被称为 hd ，SCSI 和 SATA 被称为 sd（常用为 sd）。第一块硬盘被称为 sda ，第二块硬盘被称为 sdb ，以此类推 sdc ……; 在 Linux 中只存在 4 个主分区，分别被命名为 sd1,sd2,sd3,sd4 。逻辑分区从数量 5 开始计数每多一个加一处理，且没有数量限制，操作系统需要主分区（类似于 Windows 的 C 盘，E,F,G被称为逻辑分区 ）来引导，操作系统可以安装在主分区和逻辑分区，但是引导程序必须安装在主分区。</p><h3 id="挂载目录"><a href="#挂载目录" class="headerlink" title="挂载目录"></a>挂载目录</h3><p>Linux 默认分区类型为 ext4 </p><p>主分区：</p><p>/  — 根分区（作为系统文件的根目录）   </p><p>/boot  — 引导分区（存放引导文件，现在基本不设置）</p><p>swap  — 交换分区（作为虚拟内存使用，与内存大小有关）</p><p>swap 分区大小说明：</p><ul><li>RAM less than 2 GB: Swap should be double the size of RAM</li><li>RAM between 2 to 4 GB: Swap should be RAM size + 2 GB</li><li>RAM between 6 GB to 8 GB: Swap should be size of RAM</li><li>RAM more than 8 GB: Swap should be half the size of RAM or less</li></ul><p>逻辑分区：</p><p>/home  — 用户目录</p><p>/opt  — 软件安装位置 </p><p>/tmp  — 系统临时文件</p><p>一般 Linux 桌面程序安装，简单只需要分区 / ，swap 和 /home 就 ok 了。</p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><h4 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h4><p>安装 <a href="https://www.google.cn/chrome" target="_blank" rel="noopener">chrome</a> 。</p><p>安装 <a href="https://github.com/FelisCatus/SwitchyOmega/releases" target="_blank" rel="noopener">SwitchOmega</a> 插件，下载 crx 文件修改该文件后缀名称为 zip ，解压缩为文件夹，通过 chrome 开发者模式加载插件。</p><h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><p>安装 <a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">VSCode</a> 。</p><p>配置 Go 安装环境：</p><p>修改 ~/.profile 或 ~/.bashrc 文件 ，<a href="https://serverfault.com/questions/261802/what-are-the-functional-differences-between-profile-bash-profile-and-bashrc" target="_blank" rel="noopener">它们之间的区别</a>。</p><pre class="line-numbers language-shell"><code class="language-shell">export GOROOT="path"export GOPATH="path1:path2"export PATH=$PATH:$GOROOT:$GOPATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注：配置到 ~/.profile 需要注销后才能生效，而 ~/.bashrc 生效后就完成了。</p></blockquote><p>下载 VScode 中的插件只需要配置 GOPROXY 就可以了 </p><p><code>go env -w GOPROXY=https://goproxy.io,direct</code></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>解压 zip 档案：unzip  file.zip  -d  [directory name]</p><p>ssh 公钥私钥<a href="https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh" target="_blank" rel="noopener">生成</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s学习笔记</title>
      <link href="/2021/03/02/k8s-xue-xi-bi-ji/"/>
      <url>/2021/03/02/k8s-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="kubernetes-学习笔记"><a href="#kubernetes-学习笔记" class="headerlink" title="kubernetes 学习笔记"></a>kubernetes 学习笔记</h1><h3 id="k8s-概述"><a href="#k8s-概述" class="headerlink" title="k8s 概述"></a>k8s 概述</h3><h4 id="k8s-是什么"><a href="#k8s-是什么" class="headerlink" title="k8s 是什么"></a>k8s 是什么</h4><p>k8s 是容器管理平台。</p><h4 id="k8s-组件"><a href="#k8s-组件" class="headerlink" title="k8s 组件"></a>k8s 组件</h4><p>一个 k8s 集群由至少一个工作节点构成，这些节点运行者容器化的应用。</p><p><img src="https://d33wubrfki0l68.cloudfront.net/2475489eaf20163ec0f54ddc1d92aa8d4c87c96b/e7c81/images/docs/components-of-kubernetes.svg" alt="组件图"></p><p>控制平面组件(control plane components)</p><p>kube-apiserver 提供 k8s API 服务。</p><p>etcd 键值对数据库，保存集群数据的后台数据库。</p><p>kube-scheduler 负责监视新创建的、未指定运行 node 的 Pods，选择节点让 Pod 在上面运行。</p><p>kube-controller-manager 主节点上运行的控制器组件。</p><p>节点组件 (node components) :</p><p>kubelet 每个 node 上运行的代理。保证 containers 都运行在 Pod 中。</p><p>kube-proxy 每个 node 上的网络代理。</p><p>container runtime 运行容器的软件，如 docker、containerd。</p><p>插件 (Addons)</p><p>Web 界面 (dashboard)</p><p>容器资源监控</p><p>集群层面日志</p><h3 id="k8s-API"><a href="#k8s-API" class="headerlink" title="k8s API"></a>k8s API</h3><p>采用 <a href="https://www.openapis.org/" target="_blank" rel="noopener">OpenAPI</a> 来表述</p><h3 id="k8s-对象"><a href="#k8s-对象" class="headerlink" title="k8s 对象"></a>k8s 对象</h3><p>k8s 使用实体对象来表示当前集群的状态,当出现错误时，通过修复机制来达到期望状态(diserted status)。k8s 对象包括两个方面，spec (规约[表示对象的期望状态])和 status (状态[对象当前状态])。创建 Kubernetes 对象时，必须提供对象的规约，用来描述该对象的期望状态</p><p>管理对象分为三种方法：命令式，命令式对象配置，声明式对象配置。</p><p>对象名称和 ID: 一个命名空间同一类对象名称和 ID (kubernetes 生成的 uuid)唯一。</p><p>命名空间：代表不同的虚拟集群，为了方便管理和资源进行隔离。</p><p>标签：一组键值对增加对象上，用于对象筛选。</p><p>标签选择器：使用标签选择器将不同的资源对象进行关联。</p><p>注解：给对象增加一些额外的表示信息，也是一组键值对。</p><h3 id="Kubernetes-架构"><a href="#Kubernetes-架构" class="headerlink" title="Kubernetes 架构"></a>Kubernetes 架构</h3><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><p>node 是一个集群中的节点，它负责提供必要的服务来运行 Pods 。它包含 kubelet、kube-proxy、contaniner runtime。</p><p>node 可以通过手动注册和通过 kubelet 自动向 control plane 注册，</p><p>kubernetes 通过创建 node 对象来管理节点，首先通过检查 API server 中已经注册的 kubelet 的 metadata.name 找到匹配的节点,检查是否跑了必要的服务,如果健康就可以在上面运行 Pods ,否则就会一直保存这个无效的对象,持续检测知道它变得健康为止,这会增加资源的消耗，所以通过显示删除该对象，停止健康检测。node 对象的名字必须是有效的 dns 子域名名字。</p><p>node 状态包含 address, conditions,capacity and allocatable , info 信息。</p><p>address 包含了 name, externalIP,internalIP 。</p><p>conditions 说明该节点的资源情况和运行状态。</p><p>capacity and allocatable 显示节点的详细信息。</p><p>info 描述一些其他信息如 dokcer version， k8s version 等。</p><p>节点控制器是控制平面的组件，用来管理节点的多种变化状态如维护节点 Pods 列表，节点健康。</p><p>node 使用 heartbeats 来检测该节点是否可用，heartbeats 表示的两种形式为更新 NodeStatus 和 Lease Object </p><h4 id="Control-Plane-Node-通信"><a href="#Control-Plane-Node-通信" class="headerlink" title="Control Plane-Node 通信"></a>Control Plane-Node 通信</h4><p>node到 control plane 的通信是通过 api server  进行的。api server 开启客户端证书监听安全端口 443 来处理请求, node 配置根证书来发送安全请求。</p><p>control plane 到 node 的通信有两种主要的方式:  apiserver–kubelet，apiserver–apiserver’s proxy</p><p>control plane 可以通过 ssh 隧道连接 node (不推荐使用)</p><p>通过 konnectivity service 代理 ssh.</p><h4 id="Controllers"><a href="#Controllers" class="headerlink" title="Controllers"></a>Controllers</h4><p>controllers 是查看整个集群状态的控制回路，从集群的当前状态调整到接近预期状态。</p><p>controller 会监控至少一种 kubernetes 资源类型，资源有 spec 字段表示了 desried state ，从而控制 current state 接近 desired state。</p><p>controllers 可以通过 apiserver 控制集群状态也可以直接控制集群状态例如水平扩容节点。 </p><h3 id="服务、负载均衡和网络"><a href="#服务、负载均衡和网络" class="headerlink" title="服务、负载均衡和网络"></a>服务、负载均衡和网络</h3><p>Kubernetes 网络解决四方面的问题：</p><ul><li>一个 Pod 中的容器之间通过本地回路（loopback）通信。</li><li>集群网络在不同 pod 之间提供通信。</li><li>Service 资源允许你对外暴露 Pods 中运行的应用程序，以支持来自于集群外部的访问。</li><li>可以使用 Services 来发布仅供集群内部使用的服务。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go第三方库</title>
      <link href="/2020/12/24/go-di-san-fang-ku/"/>
      <url>/2020/12/24/go-di-san-fang-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="go第三方库"><a href="#go第三方库" class="headerlink" title="go第三方库"></a>go第三方库</h1><h3 id="bolt"><a href="#bolt" class="headerlink" title="bolt"></a><a href="https://github.com/boltdb/bolt" target="_blank" rel="noopener">bolt</a></h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>用 go 实现的键值对数据库，类似与 go-sqlite3 （cgo实现的）。</p><p>它支持完整的序列化事务，ACID和无锁的多版本控制（多个读，一个写）。它的定位主要是小型数据存储，支持跨平台。</p><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><p>DB,bucket(桶),Tx 和 Cursor(光标)。db是表示一个磁盘上的文件，它bucket的集合。bucket是键值对的集合。</p><p>Transactions提供read-only(只读)或(read-write)读写访问数据库,只读 transactions 可以获取键值对和使用cursor(游标)迭代遍历数据集。读写事务可以删除，创建 bucket，插入，删除键值对。在同一时刻只能有一个读写事务被使用。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="打开数据库"><a href="#打开数据库" class="headerlink" title="打开数据库"></a>打开数据库</h5><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    db<span class="token punctuation">,</span> err <span class="token operator">:=</span> bolt<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"my.db"</span><span class="token punctuation">,</span> <span class="token number">0600</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">...</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了防止出现同时打开或同时操作同一个数据库的导致以外的情况出现</p><p><code>db, err := bolt.Open(&quot;my.db&quot;, 0600, &amp;bolt.Options{Timeout: 1 * time.Second})</code></p><h5 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h5><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 读写事务</span>err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>bolt<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token comment" spellcheck="true">// 通过返回 nil 提交事务</span>    <span class="token comment" spellcheck="true">// 在任意地方返回错误进行事务的回滚。</span>    <span class="token comment" spellcheck="true">// update 方法对事务操作进行了包装，防止出现疏忽导致意外。</span>    <span class="token comment" spellcheck="true">// 在读写事务中允许一切数据库操作</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 只读事务</span>err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">View</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>bolt<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 批量事务</span>err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Batch</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>bolt<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 手动管理事务</span><span class="token comment" spellcheck="true">// Start a writable transaction.</span>tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token keyword">defer</span> tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Use the transaction...</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">CreateBucket</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"MyBucket"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Commit the transaction and check for error.</span><span class="token keyword">if</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> err<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于事务的一些注意事项</p><p><a href="https://github.com/boltdb/bolt#transactions" target="_blank" rel="noopener">Transactions</a></p><h5 id="bucket"><a href="#bucket" class="headerlink" title="bucket"></a>bucket</h5><pre class="line-numbers language-go"><code class="language-go">db<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>bolt<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    b<span class="token punctuation">,</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">CreateBucketIfNotExists</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"MyBucket"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"create bucket: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>Tx.DeleteBucket()</code> 删除。</p><h5 id="使用键值对"><a href="#使用键值对" class="headerlink" title="使用键值对"></a>使用键值对</h5><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 设置</span>db<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>bolt<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    b <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Bucket</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"MyBucket"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    err <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"answer"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"42"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 获取</span>db<span class="token punctuation">.</span><span class="token function">View</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>bolt<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    b <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Bucket</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"MyBucket"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    v <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"answer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不会返回错误，除非出现了系统错误。</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"The answer is: %s\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="自增长唯一标识"><a href="#自增长唯一标识" class="headerlink" title="自增长唯一标识"></a>自增长唯一标识</h5><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// CreateUser saves u to the store. The new user ID is set on u once the data is persisted.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Store<span class="token punctuation">)</span> <span class="token function">CreateUser</span><span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>bolt<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Retrieve the users bucket.</span>        <span class="token comment" spellcheck="true">// This should be created when the DB is first opened.</span>        b <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Bucket</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// Generate ID for the user.</span>        <span class="token comment" spellcheck="true">// This returns an error only if the Tx is closed or not writeable.</span>        <span class="token comment" spellcheck="true">// That can't happen in an Update() call so I ignore the error check.</span>        id<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">NextSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        u<span class="token punctuation">.</span>ID <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// Marshal user data into bytes.</span>        buf<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Persist bytes to users bucket.</span>        <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token function">itob</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>ID<span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// itob returns an 8-byte big endian representation of v.</span><span class="token keyword">func</span> <span class="token function">itob</span><span class="token punctuation">(</span>v <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>    b <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>    binary<span class="token punctuation">.</span>BigEndian<span class="token punctuation">.</span><span class="token function">PutUint64</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token function">uint64</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> b<span class="token punctuation">}</span><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ID <span class="token builtin">int</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="遍历键"><a href="#遍历键" class="headerlink" title="遍历键"></a>遍历键</h5><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 常用遍历方法</span>db<span class="token punctuation">.</span><span class="token function">View</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>bolt<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Assume bucket exists and has keys</span>    b <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Bucket</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"MyBucket"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    c <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">Cursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> k<span class="token punctuation">,</span> v <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"key=%s, value=%s\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 前缀扫描</span>db<span class="token punctuation">.</span><span class="token function">View</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>bolt<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Assume bucket exists and has keys</span>    c <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Bucket</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"MyBucket"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Cursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    prefix <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">;</span> k <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> bytes<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token punctuation">,</span> v <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"key=%s, value=%s\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 范围扫描</span>db<span class="token punctuation">.</span><span class="token function">View</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>bolt<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Assume our events bucket exists and has RFC3339 encoded time keys.</span>    c <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Bucket</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Events"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Cursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Our time range spans the 90's decade.</span>    min <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"1990-01-01T00:00:00Z"</span><span class="token punctuation">)</span>    max <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"2000-01-01T00:00:00Z"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Iterate over the 90's.</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Seek</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span> k <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> bytes<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token punctuation">,</span> v <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s: %s\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 完整遍历</span>db<span class="token punctuation">.</span><span class="token function">View</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>bolt<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Assume bucket exists and has keys</span>    b <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Bucket</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"MyBucket"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"key=%s, value=%s\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>桶里面可以嵌套子桶，如果键不为空，值为空的情况就是存在子桶，子桶的创建方法和 db 创建桶的 api 方法相同。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 第三方库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端知识记录</title>
      <link href="/2020/12/22/qian-duan-zhi-shi-ji-lu/"/>
      <url>/2020/12/22/qian-duan-zhi-shi-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="前端知识记录"><a href="#前端知识记录" class="headerlink" title="前端知识记录"></a>前端知识记录</h1><h3 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a><a href="https://zh.wikipedia.org/wiki/ECMAScript" target="_blank" rel="noopener">ECMAScript</a></h3><p>脚本语言规范</p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>装饰器就是一个高阶函数（接收一个函数或返回一个函数至少满足一个条件）</p><h3 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h3><p>Node.js® 是一个基于 <a href="https://v8.dev/" target="_blank" rel="noopener">Chrome V8 引擎</a> 的 JavaScript 运行时。</p><h3 id="并发模型与事件循环"><a href="#并发模型与事件循环" class="headerlink" title="并发模型与事件循环"></a>并发模型与事件循环</h3><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" target="_blank" rel="noopener">JavaScript并发模型</a></p><h3 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h3><p><a href="https://www.redhat.com/zh/topics/integration/what-is-event-driven-architecture" target="_blank" rel="noopener">事件驱动架构</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angular学习笔记</title>
      <link href="/2020/12/22/angular-xue-xi-bi-ji/"/>
      <url>/2020/12/22/angular-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="angular学习笔记"><a href="#angular学习笔记" class="headerlink" title="angular学习笔记"></a>angular学习笔记</h1><p>学习资源：<a href="https://angular.io/docs" target="_blank" rel="noopener">官网</a></p><h3 id="核心概念和架构"><a href="#核心概念和架构" class="headerlink" title="核心概念和架构"></a>核心概念和架构</h3><p>Angular 是一个用 HTML 和 TypeScript 构建客户端应用的平台与框架。 Angular 本身就是用 TypeScript 写成的。它将核心功能和可选功能作为一组 TypeScript 库进行实现，你可以把它们导入你的应用中。</p><p>angular 的基本构造模块是 NgModule,它为 component 提供编译的上下文环境。一个 angular 应用至少有一个根模块，通常还会有其他很多特性模块。</p><p>组件定义视图。视图是一组可见的屏幕元素。</p><p>组件使用服务。服务提供不与视图直接相关的功能，服务提供者能够作为依赖被注入到组件中。</p><p>模块、组件和服务都是使用<em>装饰器</em>的类，这些<em>装饰器</em>会标出它们的类型并提供元数据，以告知 Angular 该如何使用它们。</p><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>angular应用是模块化的，被称为 <code>NgModule</code> 。一个 <code>NgModule</code> 就是一个容器，用于存放一些内聚的代码块，这些代码块专注于某个应用领域、某个工作流或一组紧密相关的功能。 它可以包含一些组件、服务提供者或其它代码文件，其作用域由包含它们的 <code>NgModule</code> 定义。 它还可以导入一些由其它模块中导出的功能，并导出一些指定的功能供其它 <code>NgModule</code> 使用。</p><p>每个 angular 应用至少存在一个 <code>NgModule</code>，称为根模块(<code>AppModule</code>)，位于 <code>app.module.ts</code>的文件中，引导这个文件就可以启动应用。</p><h5 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h5><p><code>NgModule</code> 是一个带有 <code>@NgModule()</code> 装饰器的类。<code>@NgModule()</code> 装饰器是一个函数，它接受一个元数据对象，该对象的属性用来描述这个模块。其中最重要的属性如下。</p><ul><li><code>declarations</code>（可声明对象表） —— 那些属于本 <code>NgModule</code> 的<a href="https://angular.cn/guide/architecture-components" target="_blank" rel="noopener">组件</a>、<em>指令</em>、<em>管道</em>。</li><li><code>exports</code>（导出表） —— 那些能在其它模块的<em>组件模板</em>中使用的可声明对象的子集。</li><li><code>imports</code>（导入表） —— 那些导出了<em>本</em>模块中的组件模板所需的类的其它模块。</li><li><code>providers</code> —— 本模块向全局服务中贡献的那些<a href="https://angular.cn/guide/architecture-services" target="_blank" rel="noopener">服务</a>的创建器。 这些服务能被本应用中的任何部分使用。（你也可以在组件级别指定服务提供者，这通常是首选方式。）</li><li><code>bootstrap</code> —— 应用的主视图，称为<em>根组件</em>。它是应用中所有其它视图的宿主。只有<em>根模块</em>才应该设置这个 <code>bootstrap</code> 属性。</li></ul><h5 id="与组件的关系"><a href="#与组件的关系" class="headerlink" title="与组件的关系"></a>与组件的关系</h5><p><code>NgModule</code> 为组件提供了上下文的编译环境，模块能包含任意多个组件。组件可以通过路由器加载，也可以通过模板创建。属于相同 <code>NgModule</code> 的组件会共享同一个编译上下文环境。</p><p>组件和模板共同定义视图，组件还可以包含<em>视图层次结构</em>，一个视图层次结构中可以混合使用由不同 <code>NgModule</code> 中的组件定义的视图。</p><h5 id="NgModule和JavaScript的模块比较"><a href="#NgModule和JavaScript的模块比较" class="headerlink" title="NgModule和JavaScript的模块比较"></a>NgModule和JavaScript的模块比较</h5><p><code>NgModule</code> 系统与 <code>JavaScript</code>（<code>ES2015</code>）用来管理 <code>JavaScript</code> 对象的模块系统不同，而且也没有直接关联。 这两种模块系统不同但<em>互补</em>。你可以使用它们来共同编写你的应用。</p><p><code>JavaScript</code> 中，每个<em>文件</em>是一个模块，文件中定义的所有对象都从属于那个模块。 通过 <code>export</code> 关键字，模块可以把它的某些对象声明为公共的。 其它 <code>JavaScript</code> 模块可以使用<em>import 语句</em>来访问这些公共对象。</p><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>组件控制屏幕上被称为视图的区域。如导航栏，列表。</p><p>在类中定义组件的应用逻辑，为视图提供支持。 组件通过一些由属性和方法组成的 API 与视图交互。</p><h5 id="组件元数据"><a href="#组件元数据" class="headerlink" title="组件元数据"></a>组件元数据</h5><p>组件的元数据告诉 Angular 到哪里获取它需要的主要构造块，以创建和展示这个组件及其视图。 具体来说，它把一个<em>模板</em>（无论是直接内联在代码中还是引用的外部文件）和该组件关联起来。 该组件及其模板，共同描述了一个<em>视图</em>。</p><ul><li><code>selector</code>：是一个 CSS 选择器，它会告诉 Angular，一旦在模板 HTML 中找到了这个选择器对应的标签，就创建并插入该组件的一个实例。 比如，如果应用的 HTML 中包含 ``，Angular 就会在这些标签中插入一个 <code>HeroListComponent</code> 实例的视图。</li><li><code>templateUrl</code>：该组件的 HTML 模板文件相对于这个组件文件的地址。 另外，你还可以用 <code>template</code> 属性的值来提供内联的 HTML 模板。 这个模板定义了该组件的<em>宿主视图</em>。</li><li><code>providers</code>：当前组件所需的服务<a href="https://angular.cn/guide/glossary#provider" target="_blank" rel="noopener">提供者</a>的一个数组。在这个例子中，它告诉 Angular 该如何提供一个 <code>HeroService</code> 实例，以获取要显示的英雄列表。</li></ul><h5 id="模板与视图"><a href="#模板与视图" class="headerlink" title="模板与视图"></a>模板与视图</h5><p>通过组件的配套模板来定义其视图。模板就是一种 HTML，它会告诉 Angular 如何渲染该组件。</p><p>视图通常会分层次进行组织，让你能以 UI 分区或页面为单位进行修改、显示或隐藏。 与组件直接关联的模板会定义该组件的<em>宿主视图</em>。该组件还可以定义一个<em>带层次结构的视图</em>，它包含一些<em>内嵌的视图</em>作为其它组件的宿主。</p><p><img src="https://angular.cn/generated/images/guide/architecture/component-tree.png" alt="视图"></p><h5 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h5><p>模板很像标准的 HTML，但是它还包含 Angular 的<a href="https://angular.cn/guide/template-syntax" target="_blank" rel="noopener">模板语法</a>，这些模板语法可以根据你的应用逻辑、应用状态和 DOM 数据来修改这些 HTML。 你的模板可以使用<em>数据绑定</em>来协调应用和 DOM 中的数据，使用<em>管道</em>在显示出来之前对其进行转换，使用<em>指令</em>来把程序逻辑应用到要显示的内容上。</p><h5 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h5><p>Angular 支持<em>双向数据绑定</em>，这是一种对模板中的各个部件与组件中的各个部件进行协调的机制。 往模板 HTML 中添加绑定标记可以告诉 Angular 该如何连接它们。</p><p>下图显示了数据绑定标记的四种形式。每种形式都有一个方向 —— 从组件到 DOM、从 DOM 到组件或双向。</p><p><img src="https://angular.cn/generated/images/guide/architecture/databinding.png" alt="数据绑定"></p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>hero<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>app<span class="token operator">-</span>hero<span class="token operator">-</span>detail <span class="token punctuation">[</span>hero<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"selectedHero"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>app<span class="token operator">-</span>hero<span class="token operator">-</span>detail<span class="token operator">></span><span class="token operator">&lt;</span>li <span class="token punctuation">(</span>click<span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">"selectHero(hero)"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code></code> 这个<a href="https://angular.cn/guide/interpolation" target="_blank" rel="noopener"><em>插值</em></a>在 `` 标签中显示组件的 <code>hero.name</code> 属性的值。</li><li><code>[hero]</code><a href="https://angular.cn/guide/property-binding" target="_blank" rel="noopener"><em>属性绑定</em></a>把父组件 <code>HeroListComponent</code> 的 <code>selectedHero</code> 的值传到子组件 <code>HeroDetailComponent</code> 的 <code>hero</code> 属性中。</li><li>当用户点击某个英雄的名字时，<code>(click)</code> <a href="https://angular.cn/guide/user-input#binding-to-user-input-events" target="_blank" rel="noopener"><em>事件绑定</em></a>会调用组件的 <code>selectHero</code> 方法。</li></ul><p><strong>双向数据绑定</strong>（主要用于<a href="https://angular.cn/guide/forms" target="_blank" rel="noopener">模板驱动表单</a>中），它会把属性绑定和事件绑定组合成一种单独的写法。下面这个来自 <code>HeroDetailComponent</code> 模板中的例子通过 <code>ngModel</code> 指令使用了双向数据绑定：</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span>input <span class="token punctuation">[</span><span class="token punctuation">(</span>ngModel<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"hero.name"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h5><p>Angular 的管道可以让你在模板中声明显示值的转换逻辑。 带有 <code>@Pipe</code> 装饰器的类中会定义一个转换函数，用来把输入值转换成供视图显示用的输出值。</p><p>语法：{{interpolated_value | pipe_name}}</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Default format<span class="token punctuation">:</span> output <span class="token string">'Jun 15, 2015'</span><span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span>p<span class="token operator">></span>Today is <span class="token punctuation">{</span><span class="token punctuation">{</span>today <span class="token operator">|</span> date<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> fullDate format<span class="token punctuation">:</span> output <span class="token string">'Monday, June 15, 2015'</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span>The date is <span class="token punctuation">{</span><span class="token punctuation">{</span>today <span class="token operator">|</span> date<span class="token punctuation">:</span><span class="token string">'fullDate'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> shortTime format<span class="token punctuation">:</span> output <span class="token string">'9:43 AM'</span><span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span>p<span class="token operator">></span>The time is <span class="token punctuation">{</span><span class="token punctuation">{</span>today <span class="token operator">|</span> date<span class="token punctuation">:</span><span class="token string">'shortTime'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h5><p>指令分为结构型和属性型，它本质就是一个带有 <code>@Directive()</code> 装饰器的类。指令的元数据把它所装饰的指令类和一个 <code>selector</code> 关联起来，<code>selector</code> 用来把该指令插入到 HTML 中。</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 结构型指令</span><span class="token operator">&lt;</span>li <span class="token operator">*</span>ngFor<span class="token operator">=</span><span class="token string">"let hero of heroes"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>app<span class="token operator">-</span>hero<span class="token operator">-</span>detail <span class="token operator">*</span>ngIf<span class="token operator">=</span><span class="token string">"selectedHero"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>app<span class="token operator">-</span>hero<span class="token operator">-</span>detail<span class="token operator">></span><span class="token comment" spellcheck="true">// 属性型指令</span><span class="token operator">&lt;</span>input <span class="token punctuation">[</span><span class="token punctuation">(</span>ngModel<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"hero.name"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="服务与依赖注入"><a href="#服务与依赖注入" class="headerlink" title="服务与依赖注入"></a>服务与依赖注入</h4><h5 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h5><p>服务的作用就是为了给组件提供功能的支持，如从服务器获取数据、验证用户输入或直接往控制台中写日志等。把它独立出来是为了提高模块性和复用性，组件的工作只用管与用户的交互和数据绑定的属性和方法。服务也可以依赖其它服务。</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>  <span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token function">warn</span><span class="token punctuation">(</span>msg<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">HeroService</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> heroes<span class="token punctuation">:</span> Hero<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>    <span class="token keyword">private</span> backend<span class="token punctuation">:</span> BackendService<span class="token punctuation">,</span>    <span class="token keyword">private</span> logger<span class="token punctuation">:</span> Logger<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>  <span class="token function">getHeroes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>backend<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span>Hero<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>heroes<span class="token punctuation">:</span> Hero<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Fetched </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>heroes<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> heroes.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>heroes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>heroes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// fill cache</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>heroes<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h5><p>依赖注入就是通过 angular 为你创建实例对象，让你能在组件中直接使用它们。服务的装饰器为 @<a href="https://angular.cn/api/core/Injectable" target="_blank" rel="noopener">Injectable</a>() 。</p><ul><li><em>注入器</em>是主要的机制。Angular 会在启动过程中为你创建全应用级注入器以及所需的其它注入器。不用自己创建注入器。</li><li>该注入器会创建依赖、维护一个<em>容器</em>来管理这些依赖，并尽可能复用它们。</li><li><em>提供者</em>是一个对象，用来告诉注入器应该如何获取或创建依赖。</li></ul><p>当 Angular 创建组件类的新实例时，它会通过查看该组件类的构造函数，来决定该组件依赖哪些服务或其它依赖项。</p><p>当 Angular 发现某个组件依赖某个服务时，它会首先检查是否该注入器中已经有了那个服务的任何现有实例。如果所请求的服务尚不存在，注入器就会使用以前注册的服务提供者来制作一个，并把它加入注入器中，然后把该服务返回给 Angular。</p><p>当所有请求的服务已解析并返回时，Angular 可以用这些服务实例为参数，调用该组件的构造函数。</p><h5 id="提供服务"><a href="#提供服务" class="headerlink" title="提供服务"></a>提供服务</h5><p>任何服务必须至少注册一个<em>提供者</em>，服务可以在自己的元数据中把自己注册为提供者，这样可以让自己随处可用。或者，也可以为特定的模块或组件注册提供者。要注册提供者，就要在服务的 <code>@Injectable()</code> 装饰器中提供它的元数据，或者在 <code>@NgModule()</code> 或 <code>@Component()</code> 的元数据中。</p><p>通过 <code>ng generate service</code> 创建的服务，默认在 <code>@Injectable()</code> 装饰器中提供元数据来把它注册到根注入器中。当在根一级提供服务时，Angular 会创建一个单一的共享实例，并且把它注入到任何想要它的类中。这种在 <code>@Injectable</code> 元数据中注册提供者的方式还让 Angular 能够通过移除那些从未被用过的服务来优化大小。 </p><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><p><img src="https://angular.cn/generated/images/guide/architecture/overview2.png" alt="angular架构"></p><h3 id="Observables-amp-RxJS"><a href="#Observables-amp-RxJS" class="headerlink" title="Observables &amp; RxJS"></a>Observables &amp; RxJS</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> angular </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go调用JS脚本</title>
      <link href="/2020/12/18/go-diao-yong-js-jiao-ben/"/>
      <url>/2020/12/18/go-diao-yong-js-jiao-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="Go调用JS脚本"><a href="#Go调用JS脚本" class="headerlink" title="Go调用JS脚本"></a>Go调用JS脚本</h1><h3 id="Goja"><a href="#Goja" class="headerlink" title="Goja"></a>Goja</h3><p>项目地址：<a href="https://github.com/dop251/goja" target="_blank" rel="noopener">goja</a></p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vm <span class="token operator">:=</span> goja<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    val<span class="token punctuation">,</span> err <span class="token operator">:=</span> vm<span class="token punctuation">.</span><span class="token function">RunString</span><span class="token punctuation">(</span><span class="token string">`        2+2    `</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> val<span class="token punctuation">.</span><span class="token function">Export</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="传值到-js-中"><a href="#传值到-js-中" class="headerlink" title="传值到 js 中"></a>传值到 js 中</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vm <span class="token operator">:=</span> goja<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    vm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"println"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> vm<span class="token punctuation">.</span><span class="token function">RunString</span><span class="token punctuation">(</span><span class="token string">`        println("Hello world")    `</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以使用 vm.ToValue()</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vm <span class="token operator">:=</span> goja<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    vm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"println"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> vm<span class="token punctuation">.</span><span class="token function">RunString</span><span class="token punctuation">(</span><span class="token string">`    function log(param){        println(param)    }    `</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取 js 中的函数。</span>    callbal<span class="token punctuation">,</span> ok <span class="token operator">:=</span> goja<span class="token punctuation">.</span><span class="token function">AssertFunction</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ok <span class="token punctuation">{</span>        <span class="token function">callbal</span><span class="token punctuation">(</span>goja<span class="token punctuation">.</span><span class="token function">Undefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span><span class="token function">ToValue</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>            <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"xiaoming"</span><span class="token punctuation">,</span>            <span class="token string">"age"</span><span class="token punctuation">:</span>  <span class="token number">18</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="从-js-中导出函数"><a href="#从-js-中导出函数" class="headerlink" title="从 js 中导出函数"></a>从 js 中导出函数</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vm <span class="token operator">:=</span> goja<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> vm<span class="token punctuation">.</span><span class="token function">RunString</span><span class="token punctuation">(</span><span class="token string">`        function f(param){            return +param+2        }    `</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> f <span class="token keyword">func</span><span class="token punctuation">(</span>val <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span>    err <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">ExportTo</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>f<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 第二个参数必须是指针</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="匹配结构体字段和方法名称"><a href="#匹配结构体字段和方法名称" class="headerlink" title="匹配结构体字段和方法名称"></a>匹配结构体字段和方法名称</h4><p>有两个方法:<a href="https://pkg.go.dev/github.com/dop251/goja#TagFieldNameMapper" target="_blank" rel="noopener">TagFieldNameMapper</a> 和<a href="https://pkg.go.dev/github.com/dop251/goja#UncapFieldNameMapper" target="_blank" rel="noopener">UncapFieldNameMapper</a></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> tagtest <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Test <span class="token builtin">string</span> <span class="token string">`json:"test"`</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>tagtest<span class="token punctuation">)</span> <span class="token function">Method</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vm <span class="token operator">:=</span> goja<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    t <span class="token operator">:=</span> tagtest<span class="token punctuation">{</span>        Test<span class="token punctuation">:</span> <span class="token string">"passed"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    vm<span class="token punctuation">.</span><span class="token function">SetFieldNameMapper</span><span class="token punctuation">(</span>goja<span class="token punctuation">.</span><span class="token function">TagFieldNameMapper</span><span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    vm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"t"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>    val<span class="token punctuation">,</span> err <span class="token operator">:=</span> vm<span class="token punctuation">.</span><span class="token function">RunString</span><span class="token punctuation">(</span><span class="token string">`        t.test + " and " + t.method("passed too")    `</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">Export</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> uncaptest <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Test <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>uncaptest<span class="token punctuation">)</span> <span class="token function">Method</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">uncap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vm <span class="token operator">:=</span> goja<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    u <span class="token operator">:=</span> uncaptest<span class="token punctuation">{</span>        Test<span class="token punctuation">:</span> <span class="token string">"passed"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    vm<span class="token punctuation">.</span><span class="token function">SetFieldNameMapper</span><span class="token punctuation">(</span>goja<span class="token punctuation">.</span><span class="token function">UncapFieldNameMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    vm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"u"</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span>    val<span class="token punctuation">,</span> err <span class="token operator">:=</span> vm<span class="token punctuation">.</span><span class="token function">RunString</span><span class="token punctuation">(</span><span class="token string">`        u.test + " and " + u.method("passed too")    `</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">Export</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// go 中捕获 js 异常</span><span class="token keyword">func</span> <span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vm <span class="token operator">:=</span> goja<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> vm<span class="token punctuation">.</span><span class="token function">RunString</span><span class="token punctuation">(</span><span class="token string">`    throw("Test");    `</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> jserr<span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>goja<span class="token punctuation">.</span>Exception<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        <span class="token keyword">if</span> jserr<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Export</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"Test"</span> <span class="token punctuation">{</span>            <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"wrong value"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"wrong type"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// js 中捕获 go panic</span><span class="token keyword">func</span> <span class="token function">catch2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    vm <span class="token operator">:=</span> goja<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    test <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">ToValue</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    vm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> test<span class="token punctuation">)</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> vm<span class="token punctuation">.</span><span class="token function">RunString</span><span class="token punctuation">(</span><span class="token string">`            try{                test()            }catch(e){                if (e !== "Error") {                    throw e;                }            }    `</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestInterrupt</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> SCRIPT <span class="token operator">=</span> <span class="token string">`    var i = 0;    for (;;) {        i++;    }    `</span>    vm <span class="token operator">:=</span> goja<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">AfterFunc</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        vm<span class="token punctuation">.</span><span class="token function">Interrupt</span><span class="token punctuation">(</span><span class="token string">"halt"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> vm<span class="token punctuation">.</span><span class="token function">RunString</span><span class="token punctuation">(</span>SCRIPT<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"Err is nil"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// err is of type *InterruptError and its Value() method returns whatever has been passed to vm.Interrupt()</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言第三方库 </tag>
            
            <tag> js脚本库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅的关闭channel</title>
      <link href="/2020/12/08/ru-he-you-ya-de-guan-bi-tong-dao/"/>
      <url>/2020/12/08/ru-he-you-ya-de-guan-bi-tong-dao/</url>
      
        <content type="html"><![CDATA[<h1 id="如何优雅的关闭channel"><a href="#如何优雅的关闭channel" class="headerlink" title="如何优雅的关闭channel"></a>如何优雅的关闭channel</h1><h3 id="关闭channel会出现的问题"><a href="#关闭channel会出现的问题" class="headerlink" title="关闭channel会出现的问题"></a>关闭channel会出现的问题</h3><p>1.在没有改变 <code>channel</code> 的状态情况下，没有简单的方法来检查通道是否关闭。</p><p>2.关闭已经关闭的 <code>channel</code> 会造成 <code>panic</code> 。</p><p>3.向一个已经关闭的 <code>channel</code> 中，发送值会造成 <code>panic</code> 。</p><h4 id="在已经确保通道没有值发送的情况下可以采用下面的方式进行检测"><a href="#在已经确保通道没有值发送的情况下可以采用下面的方式进行检测" class="headerlink" title="在已经确保通道没有值发送的情况下可以采用下面的方式进行检测"></a>在已经确保通道没有值发送的情况下可以采用下面的方式进行检测</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> T <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">IsClosed</span><span class="token punctuation">(</span>ch <span class="token operator">&lt;-</span><span class="token keyword">chan</span> T<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> T<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">IsClosed</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>    <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">IsClosed</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上方式不能实时检测 <code>channel</code> 的状态，若向已经关闭的 <code>channel</code> 发送值或重复关闭则会导致 <code>panic</code>  。</p><p><code>channel</code> 关闭的一般原则：</p><p>1.不在接收方关闭 <code>channel</code>。</p><p>2.如果 <code>channel</code> 同时有多个发送者，不要关闭 <code>channel</code> 。(这里可以用原子锁或 <code>sync.WaitGroup</code>)  </p><h3 id="暴力关闭-channel"><a href="#暴力关闭-channel" class="headerlink" title="暴力关闭 channel"></a>暴力关闭 channel</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">SafeClose</span><span class="token punctuation">(</span>ch <span class="token keyword">chan</span> T<span class="token punctuation">)</span><span class="token punctuation">(</span>closed <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"already closed"</span><span class="token punctuation">)</span>            closed<span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    closed <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">return</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上方式虽然可以避免程序崩溃但是破坏了 <code>channel</code> 的使用规则。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>使用 <code>sync.Once</code></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> MyChannel <span class="token keyword">struct</span><span class="token punctuation">{</span>    C <span class="token keyword">chan</span> T   once  sync<span class="token punctuation">.</span>Once<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// New genarate MyChannel</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>MyChannel <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>MyChannel <span class="token punctuation">{</span>        C<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> T<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MyChannel<span class="token punctuation">)</span> <span class="token function">SafeClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    m<span class="token punctuation">.</span>once<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>C<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>sync.Mutex</code></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> MyChannel <span class="token keyword">struct</span> <span class="token punctuation">{</span>    C      <span class="token keyword">chan</span> T    closed <span class="token builtin">bool</span>    mu  sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// New genarate MyChannel</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>MyChannel <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>MyChannel<span class="token punctuation">{</span>C<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> T<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MyChannel<span class="token punctuation">)</span> <span class="token function">SafeClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">!</span>mc<span class="token punctuation">.</span>closed <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>C<span class="token punctuation">)</span>        m<span class="token punctuation">.</span>closed <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MyChannel<span class="token punctuation">)</span> <span class="token function">IsClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> m<span class="token punctuation">.</span>closed<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上方式有一些小弊端，如可能会产生竞态（关闭和发送操作发生在同一时刻），尽管此类数据竞态通常不会造成任何伤害；不能用在 select 语句中进行检查 <code>channel</code>  的状态。</p><h4 id="优雅的关闭-channel"><a href="#优雅的关闭-channel" class="headerlink" title="优雅的关闭 channel"></a>优雅的关闭 channel</h4><p>情况1：多个接受者，一个发送者。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span><span class="token function">SetFlags</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span>LstdFlags <span class="token operator">|</span> log<span class="token punctuation">.</span>Lshortfile<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">const</span> Max <span class="token operator">=</span> <span class="token number">100000</span>    <span class="token keyword">const</span> NumReceivers <span class="token operator">=</span> <span class="token number">100</span>    wgReceivers <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>    wgReceivers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>NumReceivers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ...</span>    dataCh <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// the sender</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> value <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>Max<span class="token punctuation">)</span><span class="token punctuation">;</span> value <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// The only sender can close the</span>                <span class="token comment" spellcheck="true">// channel at any time safely.</span>                <span class="token function">close</span><span class="token punctuation">(</span>dataCh<span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                dataCh <span class="token operator">&lt;-</span> value            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// receivers</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NumReceivers<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">defer</span> wgReceivers<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Receive values until dataCh is</span>            <span class="token comment" spellcheck="true">// closed and the value buffer queue</span>            <span class="token comment" spellcheck="true">// of dataCh becomes empty.</span>            <span class="token keyword">for</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> dataCh <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    wgReceivers<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>情况2：一个接受者，多个发送者。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span><span class="token function">SetFlags</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span>LstdFlags <span class="token operator">|</span> log<span class="token punctuation">.</span>Lshortfile<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">const</span> Max <span class="token operator">=</span> <span class="token number">100000</span>    <span class="token keyword">const</span> NumSenders <span class="token operator">=</span> <span class="token number">1000</span>    wgReceivers <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>    wgReceivers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ...</span>    dataCh <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    stopCh <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// stopCh is an additional signal channel.</span>        <span class="token comment" spellcheck="true">// Its sender is the receiver of channel</span>        <span class="token comment" spellcheck="true">// dataCh, and its receivers are the</span>        <span class="token comment" spellcheck="true">// senders of channel dataCh.</span>    <span class="token comment" spellcheck="true">// senders</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NumSenders<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// The try-receive operation is to try</span>                <span class="token comment" spellcheck="true">// to exit the goroutine as early as</span>                <span class="token comment" spellcheck="true">// possible. For this specified example,</span>                <span class="token comment" spellcheck="true">// it is not essential.</span>                <span class="token keyword">select</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token operator">&lt;-</span> stopCh<span class="token punctuation">:</span>                    <span class="token keyword">return</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Even if stopCh is closed, the first</span>                <span class="token comment" spellcheck="true">// branch in the second select may be</span>                <span class="token comment" spellcheck="true">// still not selected for some loops if</span>                <span class="token comment" spellcheck="true">// the send to dataCh is also unblocked.</span>                <span class="token comment" spellcheck="true">// But this is acceptable for this</span>                <span class="token comment" spellcheck="true">// example, so the first select block</span>                <span class="token comment" spellcheck="true">// above can be omitted.</span>                <span class="token keyword">select</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token operator">&lt;-</span> stopCh<span class="token punctuation">:</span>                    <span class="token keyword">return</span>                <span class="token keyword">case</span> dataCh <span class="token operator">&lt;-</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>Max<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// the receiver</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">defer</span> wgReceivers<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> dataCh <span class="token punctuation">{</span>            <span class="token keyword">if</span> value <span class="token operator">==</span> Max<span class="token number">-1</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// The receiver of channel dataCh is</span>                <span class="token comment" spellcheck="true">// also the sender of stopCh. It is</span>                <span class="token comment" spellcheck="true">// safe to close the stop channel here.</span>                <span class="token function">close</span><span class="token punctuation">(</span>stopCh<span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ...</span>    wgReceivers<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>情况3：多个接受者，多个发送者。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span><span class="token function">SetFlags</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span>LstdFlags <span class="token operator">|</span> log<span class="token punctuation">.</span>Lshortfile<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">const</span> Max <span class="token operator">=</span> <span class="token number">100000</span>    <span class="token keyword">const</span> NumReceivers <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">const</span> NumSenders <span class="token operator">=</span> <span class="token number">1000</span>    wgReceivers <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>    wgReceivers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>NumReceivers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ...</span>    dataCh <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    stopCh <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// stopCh is an additional signal channel.</span>        <span class="token comment" spellcheck="true">// Its sender is the moderator goroutine shown</span>        <span class="token comment" spellcheck="true">// below, and its receivers are all senders</span>        <span class="token comment" spellcheck="true">// and receivers of dataCh.</span>    toStop <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// The channel toStop is used to notify the</span>        <span class="token comment" spellcheck="true">// moderator to close the additional signal</span>        <span class="token comment" spellcheck="true">// channel (stopCh). Its senders are any senders</span>        <span class="token comment" spellcheck="true">// and receivers of dataCh, and its receiver is</span>        <span class="token comment" spellcheck="true">// the moderator goroutine shown below.</span>        <span class="token comment" spellcheck="true">// It must be a buffered channel.</span>    <span class="token keyword">var</span> stoppedBy <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// moderator</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        stoppedBy <span class="token operator">=</span> <span class="token operator">&lt;-</span>toStop        <span class="token function">close</span><span class="token punctuation">(</span>stopCh<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// senders</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NumSenders<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>id <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">{</span>                value <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>Max<span class="token punctuation">)</span>                <span class="token keyword">if</span> value <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Here, the try-send operation is</span>                    <span class="token comment" spellcheck="true">// to notify the moderator to close</span>                    <span class="token comment" spellcheck="true">// the additional signal channel.</span>                    <span class="token keyword">select</span> <span class="token punctuation">{</span>                    <span class="token keyword">case</span> toStop <span class="token operator">&lt;-</span> <span class="token string">"sender#"</span> <span class="token operator">+</span> id<span class="token punctuation">:</span>                    <span class="token keyword">default</span><span class="token punctuation">:</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// The try-receive operation here is to</span>                <span class="token comment" spellcheck="true">// try to exit the sender goroutine as</span>                <span class="token comment" spellcheck="true">// early as possible. Try-receive and</span>                <span class="token comment" spellcheck="true">// try-send select blocks are specially</span>                <span class="token comment" spellcheck="true">// optimized by the standard Go</span>                <span class="token comment" spellcheck="true">// compiler, so they are very efficient.</span>                <span class="token keyword">select</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token operator">&lt;-</span> stopCh<span class="token punctuation">:</span>                    <span class="token keyword">return</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Even if stopCh is closed, the first</span>                <span class="token comment" spellcheck="true">// branch in this select block might be</span>                <span class="token comment" spellcheck="true">// still not selected for some loops</span>                <span class="token comment" spellcheck="true">// (and for ever in theory) if the send</span>                <span class="token comment" spellcheck="true">// to dataCh is also non-blocking. If</span>                <span class="token comment" spellcheck="true">// this is unacceptable, then the above</span>                <span class="token comment" spellcheck="true">// try-receive operation is essential.</span>                <span class="token keyword">select</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token operator">&lt;-</span> stopCh<span class="token punctuation">:</span>                    <span class="token keyword">return</span>                <span class="token keyword">case</span> dataCh <span class="token operator">&lt;-</span> value<span class="token punctuation">:</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// receivers</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NumReceivers<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>id <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">defer</span> wgReceivers<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Same as the sender goroutine, the</span>                <span class="token comment" spellcheck="true">// try-receive operation here is to</span>                <span class="token comment" spellcheck="true">// try to exit the receiver goroutine</span>                <span class="token comment" spellcheck="true">// as early as possible.</span>                <span class="token keyword">select</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token operator">&lt;-</span> stopCh<span class="token punctuation">:</span>                    <span class="token keyword">return</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Even if stopCh is closed, the first</span>                <span class="token comment" spellcheck="true">// branch in this select block might be</span>                <span class="token comment" spellcheck="true">// still not selected for some loops</span>                <span class="token comment" spellcheck="true">// (and forever in theory) if the receive</span>                <span class="token comment" spellcheck="true">// from dataCh is also non-blocking. If</span>                <span class="token comment" spellcheck="true">// this is not acceptable, then the above</span>                <span class="token comment" spellcheck="true">// try-receive operation is essential.</span>                <span class="token keyword">select</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token operator">&lt;-</span> stopCh<span class="token punctuation">:</span>                    <span class="token keyword">return</span>                <span class="token keyword">case</span> value <span class="token operator">:=</span> <span class="token operator">&lt;-</span>dataCh<span class="token punctuation">:</span>                    <span class="token keyword">if</span> value <span class="token operator">==</span> Max<span class="token number">-1</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Here, the same trick is</span>                        <span class="token comment" spellcheck="true">// used to notify the moderator</span>                        <span class="token comment" spellcheck="true">// to close the additional</span>                        <span class="token comment" spellcheck="true">// signal channel.</span>                        <span class="token keyword">select</span> <span class="token punctuation">{</span>                        <span class="token keyword">case</span> toStop <span class="token operator">&lt;-</span> <span class="token string">"receiver#"</span> <span class="token operator">+</span> id<span class="token punctuation">:</span>                        <span class="token keyword">default</span><span class="token punctuation">:</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span>                    <span class="token punctuation">}</span>                    log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span>    wgReceivers<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"stopped by"</span><span class="token punctuation">,</span> stoppedBy<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面是最复杂的关闭方式，采用了中间者来进行关闭。</p><p>情况4：一个发送者，多个接收者的变种。（需要额外的 gorutine 进行关闭）</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span><span class="token function">SetFlags</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span>LstdFlags <span class="token operator">|</span> log<span class="token punctuation">.</span>Lshortfile<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">const</span> Max <span class="token operator">=</span> <span class="token number">100000</span>    <span class="token keyword">const</span> NumReceivers <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">const</span> NumThirdParties <span class="token operator">=</span> <span class="token number">15</span>    wgReceivers <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>    wgReceivers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>NumReceivers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ...</span>    dataCh <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    closing <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// signal channel</span>    closed <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// The stop function can be called</span>    <span class="token comment" spellcheck="true">// multiple times safely.</span>    stop <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">select</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> closing<span class="token operator">&lt;-</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span>            <span class="token operator">&lt;-</span>closed        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>closed<span class="token punctuation">:</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// some third-party goroutines</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NumThirdParties<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            r <span class="token operator">:=</span> <span class="token number">1</span> <span class="token operator">+</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>            <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// the sender</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">close</span><span class="token punctuation">(</span>closed<span class="token punctuation">)</span>            <span class="token function">close</span><span class="token punctuation">(</span>dataCh<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">{</span>            <span class="token keyword">select</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>closing<span class="token punctuation">:</span> <span class="token keyword">return</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token punctuation">}</span>            <span class="token keyword">select</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>closing<span class="token punctuation">:</span> <span class="token keyword">return</span>            <span class="token keyword">case</span> dataCh <span class="token operator">&lt;-</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>Max<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// receivers</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NumReceivers<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">defer</span> wgReceivers<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> dataCh <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    wgReceivers<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>情况5：多个发送者的变种。（数据通道必须关闭）</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span><span class="token function">SetFlags</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span>LstdFlags <span class="token operator">|</span> log<span class="token punctuation">.</span>Lshortfile<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token keyword">const</span> Max <span class="token operator">=</span> <span class="token number">1000000</span>    <span class="token keyword">const</span> NumReceivers <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">const</span> NumSenders <span class="token operator">=</span> <span class="token number">1000</span>    <span class="token keyword">const</span> NumThirdParties <span class="token operator">=</span> <span class="token number">15</span>    wgReceivers <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>    wgReceivers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>NumReceivers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ...</span>    dataCh <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// will be closed</span>    middleCh <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// will never be closed</span>    closing <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// signal channel</span>    closed <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> stoppedBy <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// The stop function can be called</span>    <span class="token comment" spellcheck="true">// multiple times safely.</span>    stop <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>by <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">select</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> closing <span class="token operator">&lt;-</span> by<span class="token punctuation">:</span>            <span class="token operator">&lt;-</span>closed        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>closed<span class="token punctuation">:</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// the middle layer</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        exit <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>v <span class="token builtin">int</span><span class="token punctuation">,</span> needSend <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">close</span><span class="token punctuation">(</span>closed<span class="token punctuation">)</span>            <span class="token keyword">if</span> needSend <span class="token punctuation">{</span>                dataCh <span class="token operator">&lt;-</span> v            <span class="token punctuation">}</span>            <span class="token function">close</span><span class="token punctuation">(</span>dataCh<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">{</span>            <span class="token keyword">select</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> stoppedBy <span class="token operator">=</span> <span class="token operator">&lt;-</span>closing<span class="token punctuation">:</span>                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">case</span> v <span class="token operator">:=</span> <span class="token operator">&lt;-</span> middleCh<span class="token punctuation">:</span>                <span class="token keyword">select</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> stoppedBy <span class="token operator">=</span> <span class="token operator">&lt;-</span>closing<span class="token punctuation">:</span>                    <span class="token function">exit</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span>                <span class="token keyword">case</span> dataCh <span class="token operator">&lt;-</span> v<span class="token punctuation">:</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// some third-party goroutines</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NumThirdParties<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>id <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            r <span class="token operator">:=</span> <span class="token number">1</span> <span class="token operator">+</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>            <span class="token function">stop</span><span class="token punctuation">(</span><span class="token string">"3rd-party#"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// senders</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NumSenders<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>id <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">{</span>                value <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>Max<span class="token punctuation">)</span>                <span class="token keyword">if</span> value <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>                    <span class="token function">stop</span><span class="token punctuation">(</span><span class="token string">"sender#"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span>                    <span class="token keyword">return</span>                <span class="token punctuation">}</span>                <span class="token keyword">select</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token operator">&lt;-</span> closed<span class="token punctuation">:</span>                    <span class="token keyword">return</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token punctuation">}</span>                <span class="token keyword">select</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token operator">&lt;-</span> closed<span class="token punctuation">:</span>                    <span class="token keyword">return</span>                <span class="token keyword">case</span> middleCh <span class="token operator">&lt;-</span> value<span class="token punctuation">:</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// receivers</span>    <span class="token keyword">for</span> <span class="token keyword">range</span> <span class="token punctuation">[</span>NumReceivers<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">defer</span> wgReceivers<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> dataCh <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span>    wgReceivers<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"stopped by"</span><span class="token punctuation">,</span> stoppedBy<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里将多个发送者转为中间层的一个发送者。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Channel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tcp/Ip详解读书笔记</title>
      <link href="/2020/11/02/tcp-ip-xiang-jie-du-shu-bi-ji/"/>
      <url>/2020/11/02/tcp-ip-xiang-jie-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Tcp-IP-详解读书笔记"><a href="#Tcp-IP-详解读书笔记" class="headerlink" title="Tcp/IP 详解读书笔记"></a>Tcp/IP 详解读书笔记</h1><p>网络分层为应用层，传输层，网络层，数据链路层，物理层。</p><p>物理层：</p><p>网线连接电脑，路由器。传递0，1的电信号！</p><p>链路层：</p><p>确定0和1的分组方式，使用以太网协议，规定使用一组电信号作为一个数据包，被曾为帧（Frame）。每一个帧分为标头（head）和数据（data）。”标头”包含数据包的一些说明项，比如发送者、接受者、数据类型等等；”数据”则是数据包的具体内容。”标头”的长度，固定为18字节。”数据”的长度，最短为46字节，最长为1500字节。因此，整个”帧”最短为64字节，最长为1518字节。如果数据很长，就必须分割成多个帧进行发送。</p><p>发送者和接受者使用网卡来确定，以太网规定，连入网络的所有设备，都必须具有”网卡”接口。数据包必须是从一块网卡，传送到另一块网卡。网卡的地址，就是数据包的发送地址和接收地址，这叫做MAC地址。mac地址用12位16进制表示，前6表示厂商，后6表示流水号。网卡与网卡之前通信使用 <code>ARP</code> 协议。以太网协议使用广播方式向同网络的电脑广播数据包，每个电脑比较接受者的mac地址是否是和本机的mac地址相同，相同的话就接收，不是就丢弃。</p><p>网络层：</p><p>需要网络层是因为以太网协议广播数据包作用于同网络的电脑，不同网络使用路由方式发送数据包。出现了网络层后就有网络地址来确定该计算机属于哪个网络了。</p><p>网络层使用的是IP协议，它所定义的地址叫网络地址。ipv4，32位二进制组层分为4组用来表示网络号和主机号，确定网络号和主机号使用子网掩码。为1则为网络部分，为0则为主机部分。计算两台计算机是否处于同一网络的方式为分别计算本机 IP地址和子网掩码做与计算，比较结果。</p><p>IP协议发送的数据包，叫IP数据包，它也有标头和数据部分，”标头”部分主要包括版本、长度、IP地址等信息，”数据”部分则是IP数据包的具体内容。它放在以太网协议发送的数据包的的数据部分。IP数据包的”标头”部分的长度为20到60字节，整个数据包的总长度最大为65,535字节。因此，理论上，一个IP数据包的”数据”部分，最长为65,515字节。前面说过，以太网数据包的”数据”部分，最长只有1500字节。因此，如果IP数据包超过了1500字节，它就需要分割成几个以太网数据包，分开发送了。</p><p>因为IP数据包是放在以太网数据包里发送的，所以我们必须同时知道两个地址，一个是对方的MAC地址，另一个是对方的IP地址。通常情况下，对方的IP地址是已知的，但是我们不知道它的MAC地址。这里存在两种情况，第一两个主机不在同一网络时，将数据包发送到连接两个网络的网关处处理；第二在同一网络时,使用ARP协议发送一个数据包，其中包含它所要查询主机的IP地址，在对方的MAC地址这一栏，填的是FF:FF:FF:FF:FF:FF，表示这是一个”广播”地址。它所在子网络的每一台主机，都会收到这个数据包，从中取出IP地址，与自身的IP地址进行比较。如果两者相同，都做出回复，向对方报告自己的MAC地址，否则就丢弃这个包。</p><p>传输层：</p><p>有了MAC地址和IP地址就可以传输数据包了，同一台主机的不同程序的数据包通过端口来区分，”端口”是0到65535之间的一个整数，正好16个二进制位。0到1023的端口被系统占用，用户只能选用大于1023的端口。不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口联系。<strong>“传输层”的功能，就是建立”端口到端口”的通信。相比之下，”网络层”的功能是建立”主机到主机”的通信。只要确定主机和端口，我们就能实现程序之间的交流。</strong>因此，Unix系统就把主机+端口，叫做”套接字”（socket）。有了它，就可以进行网络应用程序开发了。</p><p>UDP协议是传输层协议，它的数据包分为标头和数据两部分，标头主要定义了发出端口和接收端口，同样它加到IP数据包的数据部分。</p><p>TCP数据包和UDP数据包一样，都是内嵌在IP数据包的”数据”部分。TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。</p><p>应用层：</p><p><strong>“应用层”的作用，就是规定应用程序的数据格式。</strong>最典型的就是HTTP协议。它的数据直接放在tcp数据包的数据部分。</p>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tcp </tag>
            
            <tag> ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库学习笔记</title>
      <link href="/2020/09/15/shu-ju-ku-xue-xi-bi-ji/"/>
      <url>/2020/09/15/shu-ju-ku-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库学习笔记"><a href="#数据库学习笔记" class="headerlink" title="数据库学习笔记"></a>数据库学习笔记</h1><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="Order-by-按多个字段排序"><a href="#Order-by-按多个字段排序" class="headerlink" title="Order by 按多个字段排序"></a>Order by 按多个字段排序</h4><p>当 <code>SELECT</code> 结果按多个字段排序时，先对第一个字段排序后,再在第一次排序的结果之上排序第二个字段,第一个字段的顺序不会改变。</p><h4 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h4><p>WHERE 子句中可以使用 <code>AND</code> <code>OR</code> <code>BETWEEN...AND...</code> <code>LIKE</code> <code>IN</code> <code>IS NULL</code>  操作符。 </p><ul><li><code>LIKE</code> 使用 <code>%</code> 匹配任意字符或<code>_</code> 一个字符。</li><li><code>&lt;&gt;</code> 和 <code>!=</code> 等效，都表示不等于。</li><li><code>NULL</code> 在数据库中表示数据缺失或未知，和空字符串或 0 不等效。</li></ul><h4 id="子句执行顺序"><a href="#子句执行顺序" class="headerlink" title="子句执行顺序"></a>子句执行顺序</h4><p><code>FROM</code> -&gt;  <code>WHERE</code> -&gt; <code>SELECT</code>-&gt; <code>GROUP BY</code> -&gt; <code>HAVING</code> -&gt; <code>ORDER BY</code> -&gt; <code>LIMIT</code></p><h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><ul><li>进行操作符判断时当第一个条件满足且能得出结论时就不会执行后面的表达式了。</li><li>操作符优先级：<code>AND</code> &gt; <code>OR</code> </li><li><code>IN</code> 操作符先对 value 进行类型评估，然后对列表值进行排序，再二分查找。</li><li><code>IN</code> 通常用在子查询结果上。</li><li><code>LIKE</code> 中匹配特殊字符可以使用反斜杠进行转义 <code>%\_20%</code>  或使用 <code>ESCAPE</code> 子句 <code>LIKE &#39;%$_20%&#39; ESCAPE &#39;$&#39;</code></li><li><code>LIMIT</code> 语句限制显示的结果集. <code>LIMIT [offset,] row_count</code> offset 从0开始。</li><li><code>HAVING</code> 子句作用为一组行或集合指定过滤条件。如果忽略了 <code>GROUP BY</code> 那么它的作用和 <code>WHERE</code> 在 <code>SELECT</code> 语句中一样了。HAVING子句将过滤条件应用于每组行，而WHERE子句将过滤条件应用于每行。HAVING子句仅在与GROUP BY子句一起使用以生成高级报告的输出时才有用。</li><li><code>TINYINT(1)</code> 表示 <code>boolean</code> 类型 0 代表 false, 1 代表 true.</li><li><code>AS</code> 通常用在表连接中，不能用在 <code>WHERE</code> 子句中。</li></ul><h4 id="Having-子句"><a href="#Having-子句" class="headerlink" title="Having 子句"></a>Having 子句</h4><p>Having 用在 SELECT 语句中作为分组查询结果集或聚合函数结果集的过滤条件，它与 WHERE 的区别在于 WHERE 作用于每行，Having 作用于一组。 </p><h4 id="Group-By-子句"><a href="#Group-By-子句" class="headerlink" title="Group By 子句"></a>Group By 子句</h4><p>当没有使用 Group By 而使用聚合函数时，只会得到一行记录因为聚合函数会统计整个表中的数据。它可以执行分组的别名和排序，标准SQL不允许。当 Group By 多个字段的时候是将具有这几个相同字段的放到一个组中。</p><h4 id="ROLLUP-子句"><a href="#ROLLUP-子句" class="headerlink" title="ROLLUP 子句"></a>ROLLUP 子句</h4><p>使用在 Group By 中的扩展，它可以在 Group By 的分组上生成多个分组。<code>Group By c1,c2,c3 WITH ROLLUP</code> 优先级 c1 &gt; c2 &gt; c3。</p><h4 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h4><p>MySQL 支持4种类型的连接 <code>Inner join</code> <code>Left join</code> <code>Right join</code> <code>Cross join</code> 。<code>join</code>子句用在<code>SELECT</code> 语句的 <code>FROM</code> 子句之后。MySQL 不支持全外连接！</p><p>前三种连接需要连接条件，<code>Cross join</code> 表示两个表做一个笛卡尔积。</p><p><code>INNER JOIN</code> 的 <code>ON</code> 条件和  <code>WHERE</code> 条件作用相同，而在将 <code>WHERE</code> 条件移动到左连接或右连接上结果不同。</p><h4 id="派生表和临时表"><a href="#派生表和临时表" class="headerlink" title="派生表和临时表"></a>派生表和临时表</h4><p>在 SELECT 语句中 FROM 子句中使用的子查询叫派生表，它不会生成临时表。</p><p><img src="https://www.mysqltutorial.org/wp-content/uploads/2017/07/MySQL-Derived-Table.png" alt="https://www.mysqltutorial.org/wp-content/uploads/2017/07/MySQL-Derived-Table.png"></p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>器索引是类似于 <code>B-Tree</code> 的数据结构,它是为了加快表中数据查询速度。创建表的主键时，MySQL 会自动创建特殊的索引 <code>PRIMARY</code> 聚簇索引，它和数据一起存在同一表中，它强制执表的行顺序。</p><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><p>通常索引创建是在创建表的时候指定</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t<span class="token punctuation">(</span>   <span class="token number">c1</span> <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>   <span class="token number">c2</span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>   <span class="token number">c3</span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>   <span class="token number">c4</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token keyword">INDEX</span> <span class="token punctuation">(</span><span class="token number">c2</span><span class="token punctuation">,</span><span class="token number">c3</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过语句为列创建索引</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> table_name <span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h4><table><thead><tr><th align="left">Storage Engine</th><th align="left">Allowed Index Types</th></tr></thead><tbody><tr><td align="left">InnoDB</td><td align="left">BTREE</td></tr><tr><td align="left">MyISAM</td><td align="left">BTREE</td></tr><tr><td align="left">MEMORY/HEAP</td><td align="left">HASH, BTREE</td></tr></tbody></table><h4 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h4><p>查询表中的所有索引</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> INDEXES <span class="token keyword">FROM</span> table_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询表中的指定索引</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> INDEXES index_name <span class="token keyword">FROM</span> table_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询指定数据库中表里的索引</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> INDEXES <span class="token keyword">FROM</span> table_name <span class="token operator">IN</span> database_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Or</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> INDEXES <span class="token keyword">FROM</span> database_name<span class="token punctuation">.</span>table_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>INDEX</code> 和 <code>KEYS</code> 是 <code>INDEXES</code> 的同义词, <code>IN</code> 是 <code>FROM</code> 的同义词，所以下面的语句是一样的结果。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token operator">IN</span> table_name <span class="token keyword">FROM</span> database_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Or</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">KEYS</span> <span class="token keyword">FROM</span> table_name <span class="token operator">IN</span> database_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> table_name<span class="token punctuation">[</span>algorithm_option <span class="token operator">|</span> lock_option<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>algorithm_option</code> 表示删除算法有 <code>ALGORITHM [=] {DEFAULT|INPLACE|COPY}</code> 三种，MySQL 默认使用 <code>INPLACE</code> 也就是重建一个新表，<code>COPY</code> 是在表将逐行复制到新表中，然后在原始表的副本上执行DROP INDEX。 不允许并发数据操作语句，例如INSERT和UPDATE。</p>]]></content>
      
      
      <categories>
          
          <category> 存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go并发模式:Pipeline</title>
      <link href="/2020/09/07/go-bing-fa-mo-shi-guan-dao/"/>
      <url>/2020/09/07/go-bing-fa-mo-shi-guan-dao/</url>
      
        <content type="html"><![CDATA[<h1 id="Go并发模式：Pipeline"><a href="#Go并发模式：Pipeline" class="headerlink" title="Go并发模式：Pipeline"></a>Go并发模式：Pipeline</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Go 语言原生支持并发，所以构建数据流管道会很容易，数据流管道可有效利用I / O和多个CPU。</p><h2 id="管道定义"><a href="#管道定义" class="headerlink" title="管道定义"></a>管道定义</h2><p>在 Go 语言中没有对管道进行正式定义，常规来说就是通过 channel 来连接的多个阶段，每个阶段等效于在一个函数中运行的一组 gorutines 。这些 gorutines 的特征如下</p><ul><li>通过入站 channel 从上游接收值。</li><li>对数据执行一些功能，通常来说是生产新数据。</li><li>通过出站 channel 发送值到下游。 </li></ul><p>除了第一个和最后一个阶段，每个阶段都有任意数量的出站和入站 channel 。通常第一个阶段称为生成者（或源数据），最后一个阶段被称为消费者（或接收器）。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="建立包含三个阶段的管道并输出"><a href="#建立包含三个阶段的管道并输出" class="headerlink" title="建立包含三个阶段的管道并输出"></a>建立包含三个阶段的管道并输出</h3><p>第一个阶段</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">gen</span><span class="token punctuation">(</span>nums <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    out <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> n <span class="token operator">:=</span><span class="token keyword">range</span> nums <span class="token punctuation">{</span>            out <span class="token operator">&lt;-</span>n        <span class="token punctuation">}</span>         <span class="token function">close</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> out<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二阶段</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">sq</span><span class="token punctuation">(</span>in <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    out <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> n <span class="token operator">:=</span><span class="token keyword">range</span> in <span class="token punctuation">{</span>            out <span class="token operator">&lt;-</span> n<span class="token operator">*</span>n        <span class="token punctuation">}</span>        <span class="token function">close</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> out<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后一个阶段</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 建立管道</span>    c <span class="token operator">:=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>    out <span class="token operator">:=</span> <span class="token function">sq</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//获取输出</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>out<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>out<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 9</span>    <span class="token comment" spellcheck="true">// 另一种建立管道的形式</span>    <span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token function">sq</span><span class="token punctuation">(</span><span class="token function">sq</span><span class="token punctuation">(</span><span class="token function">gen</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 16 then 81</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Fan-out-fan-in-模式"><a href="#Fan-out-fan-in-模式" class="headerlink" title="Fan-out, fan-in 模式"></a>Fan-out, fan-in 模式</h3><p>fan-out: 多个函数从同一个 channel 中读取数据直到 channel 被关闭。这种方式提供了在一组 workers 之间分配 work 并行化使用 CPU 和 I/O 的方法</p><p>fan-in: 一个函数可以从多个 channel 中读取并继续操作，直到所有 channel 复用到一个 channel 上。当所有复用它的通道都关闭时，该通道关闭。</p><p>将上面的代码改成 fan-in 模式</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    in<span class="token operator">:=</span><span class="token function">gen</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 将 sq 任务分到两个 gorutine 中处理， 它们都从 in 中读取数据。</span>    c1 <span class="token operator">:=</span> <span class="token function">sq</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span>    c2 <span class="token operator">:=</span> <span class="token function">sq</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 读取输出</span>    <span class="token keyword">for</span> n <span class="token operator">:=</span><span class="token keyword">range</span> <span class="token function">merge</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">)</span><span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4 then 9, 9 then 4 </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">merge</span><span class="token punctuation">(</span>cs <span class="token operator">...</span><span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 发送完成后要关闭 out，用 sync.WaitGroup 方式来同步 goroutine ，完成关闭。</span>    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    out <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    output <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> n <span class="token operator">:=</span><span class="token keyword">range</span> c <span class="token punctuation">{</span>            out <span class="token operator">&lt;-</span> n        <span class="token punctuation">}</span>        wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> c <span class="token operator">:=</span><span class="token keyword">range</span> cs <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token function">output</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不阻塞返回 out</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">close</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> out<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码形成的模式</p><ul><li>当所有的发送操作结束时关闭它们的出站 channel 。</li><li>从入站的 channels 接收值直到它们关闭。</li></ul><p>上面代码会造成内存泄漏，如果此时只接收一个值，那么一个生产者所在的 gorutine 会挂起等待发送。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    in<span class="token operator">:=</span><span class="token function">gen</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 将 sq 任务分到两个 gorutine 中处理， 它们都从 in 中读取数据。</span>    c1 <span class="token operator">:=</span> <span class="token function">sq</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span>    c2 <span class="token operator">:=</span> <span class="token function">sq</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span>    out <span class="token operator">:=</span> <span class="token function">merge</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>out<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4 or 9</span>    <span class="token comment" spellcheck="true">// c1 或 c2 中的一个 goruntine 会挂起等待发送剩余的值。</span>    <span class="token comment" spellcheck="true">// 本例中的协程会随着 main 函数的退出而退出，在服务器程序中可以浮现这个问题。</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在我们知道发送数据的数量时，可以通过设置带缓冲的 channel 。但是这种方式不太好，可以通过在消费者处发送关闭信号到生产者处来解决这个问题。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    in <span class="token operator">:=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 将 sq 任务分到两个 gorutine 中处理， 它们都从 in 中读取数据。</span>    c1 <span class="token operator">:=</span> <span class="token function">sq</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span>    c2 <span class="token operator">:=</span> <span class="token function">sq</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 读取输出</span>    done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    out <span class="token operator">:=</span> <span class="token function">merge</span><span class="token punctuation">(</span>done<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>out<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4 or 9</span>    <span class="token comment" spellcheck="true">// 通知其他协程不再需要其他值了</span>    done <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    done <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">merge</span><span class="token punctuation">(</span>done <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> cs <span class="token operator">...</span><span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    out <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 使用 select 语句接收结束信号 done </span>    output <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> c <span class="token punctuation">{</span>            <span class="token keyword">select</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> out <span class="token operator">&lt;-</span> n<span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 剩余部分代码没有改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码会有一个问题，就是消费者需要知道生产者发送的数量，这样才能发送对应数量的结束信号，所以应该采用 close channel 的方式来实现，在关闭通道上接收操作可以立即执行产生元素类型的零值。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>    in <span class="token operator">:=</span> <span class="token function">gen</span><span class="token punctuation">(</span>done<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Distribute the sq work across two goroutines that both read from in.</span>    c1 <span class="token operator">:=</span> <span class="token function">sq</span><span class="token punctuation">(</span>done<span class="token punctuation">,</span> in<span class="token punctuation">)</span>    c2 <span class="token operator">:=</span> <span class="token function">sq</span><span class="token punctuation">(</span>done<span class="token punctuation">,</span> in<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Consume the first value from output.</span>    out <span class="token operator">:=</span> <span class="token function">merge</span><span class="token punctuation">(</span>done<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>out<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4 or 9</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">gen</span><span class="token punctuation">(</span>done <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> nums <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    out <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>            <span class="token keyword">select</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> out <span class="token operator">&lt;-</span> n <span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> out<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sq</span><span class="token punctuation">(</span>done <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> in <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    out <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> in <span class="token punctuation">{</span>            <span class="token keyword">select</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> out <span class="token operator">&lt;-</span> n <span class="token operator">*</span> n<span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> out<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">merge</span><span class="token punctuation">(</span>done <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> cs <span class="token operator">...</span><span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    out <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 使用 select 语句接收结束信号 done </span>    output <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> c <span class="token punctuation">{</span>            <span class="token keyword">select</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> out <span class="token operator">&lt;-</span> n<span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>                <span class="token keyword">return</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 剩余部分代码没有改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立管道应该遵守如下准则：</p><ul><li>在一个阶段，当所有的发送操作完成时关闭出站 channel 。</li><li>在一个阶段，会一直从入站通道接收值，直到这些通道关闭或发送方被阻止发送。</li></ul><h3 id="真实场景下管道的使用"><a href="#真实场景下管道的使用" class="headerlink" title="真实场景下管道的使用"></a>真实场景下管道的使用</h3><p>使用 md5 计算文件的摘要</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Calculate the MD5 sum of all files under the specified directory,</span>    <span class="token comment" spellcheck="true">// then print the results sorted by path name.</span>    m<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">MD5All</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> paths <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    <span class="token keyword">for</span> path <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">{</span>        paths <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>paths<span class="token punctuation">,</span> path<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> path <span class="token operator">:=</span> <span class="token keyword">range</span> paths <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%x  %s\n"</span><span class="token punctuation">,</span> m<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// MD5All reads all the files in the file tree rooted at root and returns a map</span><span class="token comment" spellcheck="true">// from file path to the MD5 sum of the file's contents.  If the directory walk</span><span class="token comment" spellcheck="true">// fails or any read operation fails, MD5All returns an error.</span><span class="token keyword">func</span> <span class="token function">MD5All</span><span class="token punctuation">(</span>root <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span>md5<span class="token punctuation">.</span>Size<span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span>md5<span class="token punctuation">.</span>Size<span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span>    err <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Walk</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> info os<span class="token punctuation">.</span>FileInfo<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token operator">!</span>info<span class="token punctuation">.</span><span class="token function">Mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRegular</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span>        <span class="token punctuation">}</span>        data<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err        <span class="token punctuation">}</span>        m<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> md5<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> m<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上面代码改成两种管道模式进行实现</p><p>方式一：将 MD5All 分成两个阶段的管道，第一阶段是开启一个新的 gorutine去 sumFiles, 遍历树，计算每个文件的摘要然后将结果和 <code>file.Walk</code>函数的错误返回。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> result <span class="token keyword">struct</span><span class="token punctuation">{</span>    path <span class="token builtin">string</span>     sum <span class="token punctuation">[</span>md5<span class="token punctuation">.</span>Size<span class="token punctuation">]</span><span class="token builtin">byte</span>    err <span class="token builtin">error</span><span class="token punctuation">}</span> <span class="token keyword">func</span> <span class="token function">sumFiles</span><span class="token punctuation">(</span>done <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> root <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">&lt;-</span><span class="token keyword">chan</span> result<span class="token punctuation">,</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// For each regular file, start a goroutine that sums the file and sends</span>    <span class="token comment" spellcheck="true">// the result on c.  Send the result of the walk on errc.</span>    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> result<span class="token punctuation">)</span>    errc <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup        err <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Walk</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> info os<span class="token punctuation">.</span>FileInfo<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> err            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token operator">!</span>info<span class="token punctuation">.</span><span class="token function">Mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRegular</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span>            <span class="token punctuation">}</span>            wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 开启一个新的协程去处理文件</span>            <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                data<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>                <span class="token keyword">select</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> c <span class="token operator">&lt;-</span> result<span class="token punctuation">{</span>path<span class="token punctuation">,</span> md5<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token punctuation">:</span>                <span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>                <span class="token punctuation">}</span>                wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Abort the walk if done is closed.</span>            <span class="token keyword">select</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>                <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"walk canceled"</span><span class="token punctuation">)</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// Walk has returned, so all calls to wg.Add are done.  Start a</span>        <span class="token comment" spellcheck="true">// goroutine to close c once all the sends are done.</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// No select needed here, since errc is buffered.</span>        errc <span class="token operator">&lt;-</span> err    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> c<span class="token punctuation">,</span> errc<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">MD5All</span><span class="token punctuation">(</span>root <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span>md5<span class="token punctuation">.</span>Size<span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// MD5All closes the done channel when it returns; it may do so before</span>    <span class="token comment" spellcheck="true">// receiving all the values from c and errc.</span>    done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>    c<span class="token punctuation">,</span> errc <span class="token operator">:=</span> <span class="token function">sumFiles</span><span class="token punctuation">(</span>done<span class="token punctuation">,</span> root<span class="token punctuation">)</span>    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span>md5<span class="token punctuation">.</span>Size<span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> c <span class="token punctuation">{</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>err        <span class="token punctuation">}</span>        m<span class="token punctuation">[</span>r<span class="token punctuation">.</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">.</span>sum    <span class="token punctuation">}</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token operator">&lt;-</span>errc<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> m<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式为每个文件单独开启了一个协程处理，但是如果在文件夹中有许多大文件，内存分配可能不足，我们可以通过限制并行读取的文件数来限制这些分配。</p><p>方式二：创建多个 gorutines 读取文件，现在管道分为三个阶段遍历树结构 、获取文件摘要、 收集文件摘要信息。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">walkFiles</span><span class="token punctuation">(</span>done <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>root <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    paths <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>    errc <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>paths<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 该发送操作不需要 select 语句，因为 errc 是缓存的。</span>        errc <span class="token operator">&lt;-</span> filepath<span class="token punctuation">.</span><span class="token function">Walk</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> info os<span class="token punctuation">.</span>FileInfo<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> err            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token operator">!</span>info<span class="token punctuation">.</span><span class="token function">Mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IsRegular</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">nil</span>            <span class="token punctuation">}</span>            <span class="token keyword">select</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> paths <span class="token operator">&lt;-</span> path<span class="token punctuation">:</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>                <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"walk canceled"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> paths<span class="token punctuation">,</span>errc<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这里没有关闭 paths，是因为我们在 MD5All 中进行关闭。</span><span class="token keyword">func</span> <span class="token function">digester</span><span class="token punctuation">(</span>done <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> paths <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span> c <span class="token keyword">chan</span><span class="token operator">&lt;-</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> path <span class="token operator">:=</span> <span class="token keyword">range</span> paths <span class="token punctuation">{</span>        data<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">select</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> c <span class="token operator">&lt;-</span> result<span class="token punctuation">{</span>path<span class="token punctuation">,</span> md5<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token punctuation">:</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">MD5All</span><span class="token punctuation">(</span>root <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span>md5<span class="token punctuation">.</span>Size<span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>    paths<span class="token punctuation">,</span> errc <span class="token operator">:=</span> <span class="token function">walkFiles</span><span class="token punctuation">(</span>done<span class="token punctuation">,</span> root<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Start a fixed number of goroutines to read and digest files.</span>    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> result<span class="token punctuation">)</span>    <span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup    <span class="token keyword">const</span> numDigesters <span class="token operator">=</span> <span class="token number">20</span>    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>numDigesters<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numDigesters<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">digester</span><span class="token punctuation">(</span>done<span class="token punctuation">,</span> paths<span class="token punctuation">,</span> c<span class="token punctuation">)</span>            wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span>md5<span class="token punctuation">.</span>Size<span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> c <span class="token punctuation">{</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>err        <span class="token punctuation">}</span>        m<span class="token punctuation">[</span>r<span class="token punctuation">.</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">.</span>sum    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Check whether the Walk failed.</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token operator">&lt;-</span>errc<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> m<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p><a href><a href="https://blog.golang.org/pipelines" target="_blank" rel="noopener">Go Concurrency Patterns: Pipelines and cancellation</a></a></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Go并发模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习笔记</title>
      <link href="/2020/09/01/docker-xue-xi-bi-ji/"/>
      <url>/2020/09/01/docker-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="docker学习笔记"><a href="#docker学习笔记" class="headerlink" title="docker学习笔记"></a>docker学习笔记</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Docker是一个用于开发，发布和运行应用程序的开放平台。 Docker使您能够将应用程序与基础架构分开，从而可以快速交付软件。 借助Docker，您可以以与管理应用程序相同的方式来管理基础架构。 通过利用Docker的快速交付，测试和部署代码的方法，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。简单来说就是将应用的运行环境和应用分开了，更方便的管理应用的运行环境。</p><p>docker 可以让应用快速化部署，测试和交互。它可以使用容器，让应用隔离，安全的运行。在同一台机器可以同时运行多个容器，它是直接跑在机器的内核上的，对比传统的虚拟机它更加轻量。它可以运行在主机，虚拟机上。</p><p>它支持组件方式容器化部署应用，容器作为你分发和测试的单元，部署到本地数据中心或云服务或者两者结合它们的工作原理都相同</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="CI-continuous-integrate-CD-continuous-delivery-工作流模式。"><a href="#CI-continuous-integrate-CD-continuous-delivery-工作流模式。" class="headerlink" title="CI(continuous integrate)/CD(continuous delivery)工作流模式。"></a>CI(continuous integrate)/CD(continuous delivery)工作流模式。</h3><p>当你在生产环境构建好你的应用后你可以快速的将它容器化推送到测试环境中进行测试，当你的应用出现了bug时你修复好了之后可以再次将它推送到测试环境，测试通过后它就可以推送到生产环境。</p><h3 id="响应时部署和扩容"><a href="#响应时部署和扩容" class="headerlink" title="响应时部署和扩容"></a>响应时部署和扩容</h3><p>容器化应用的轻量性和可移植性，可以根据业务需求实时扩展和删除应用。</p><h3 id="在相同的硬件下运行不同应用"><a href="#在相同的硬件下运行不同应用" class="headerlink" title="在相同的硬件下运行不同应用"></a>在相同的硬件下运行不同应用</h3><p>因为它的隔离性和轻量性，可以在同样的硬件环境下，运行多个工作负载。</p><h2 id="概念和架构"><a href="#概念和架构" class="headerlink" title="概念和架构"></a>概念和架构</h2><p>docker 引擎是一个客户端服务器应用架构，它有三个主要的组件：</p><ul><li>长时间后台运行的守护进程。（<code>dockerd</code>命令行）</li><li><code>REST API</code> 应用接口，可以连接和操作守护进程。</li><li>命令行接口客户端 (<code>docker</code>命令行)</li></ul><p>架构图如下：</p><p><img src="https://docs.docker.com/engine/images/engine-components-flow.png" alt></p><p><img src="https://docs.docker.com/engine/images/architecture.svg" alt></p><p>docker 守护进程监听 docker <code>API</code> 请求和管理镜像(image)，容器(container)，网络(network)，存储卷(volume)</p><p>docker 客户端可以运行命名通过 <code>REST API</code> 发送到 <code>dockerd</code> 中，获取结果到命令行上。</p><p>docker registry 是存储镜像的仓库，有一个 Docker Hub 是一个公有的镜像仓库。 </p><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>它是一个只读的模板，包括了创建 docker 容器的说明。一个镜像通常依赖其他镜像并在其之上做一些定制化。如使用 <code>ubuntu</code> 镜像，安装你自己应用需要的环境，构建出镜像。</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>它是镜像的一个实例，你可以创建，启动，停止和删除。</p><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><p>依赖多个 docker daemon ，扩展容器服务，形成集群，负载均衡的访问各个节点的服务。</p><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>它提供了隔离的工作空间 <code>container</code> ，当创建一个 container 时，docker 会为该容器创建一组命名空间。容器的每个方面都在单独的名称空间中运行，并且其访问仅限于该名称空间。</p><p>在 Linux 下使用了如下命名空间：</p><ul><li><strong>The <code>pid</code> namespace:</strong> Process isolation (PID: Process ID).</li><li><strong>The <code>net</code> namespace:</strong> Managing network interfaces (NET: Networking).</li><li><strong>The <code>ipc</code> namespace:</strong> Managing access to IPC resources (IPC: InterProcess Communication).</li><li><strong>The <code>mnt</code> namespace:</strong> Managing filesystem mount points (MNT: Mount).</li><li><strong>The <code>uts</code> namespace:</strong> Isolating kernel and version identifiers. (UTS: Unix Timesharing System).</li></ul><h3 id="Control-groups"><a href="#Control-groups" class="headerlink" title="Control groups"></a>Control groups</h3><p>该技术可以限制应用使用的资源大小。</p><h3 id="Union-file-systems"><a href="#Union-file-systems" class="headerlink" title="Union file systems"></a>Union file systems</h3><p>Docker Engine使用UnionFS为容器提供构建模块。 Docker Engine可以使用多个UnionFS变体，包括AUFS，btrfs，vfs和DeviceMapper。</p><h3 id="容器格式"><a href="#容器格式" class="headerlink" title="容器格式"></a>容器格式</h3><p>docker engine 联合了以上三种技术就叫做容器格式，默认的容器格式是 <code>libcontainer</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> docker </tag>
            
            <tag> 容器技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>English-2020-09</title>
      <link href="/2020/09/01/english-2020-09/"/>
      <url>/2020/09/01/english-2020-09/</url>
      
        <content type="html"><![CDATA[<h1 id="English-2020-09"><a href="#English-2020-09" class="headerlink" title="English-2020-09"></a>English-2020-09</h1><h3 id="Day-01"><a href="#Day-01" class="headerlink" title="Day: 01"></a>Day: 01</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">detach</td><td align="center">分离，脱离</td></tr><tr><td align="center">official</td><td align="center">官方，正式</td></tr><tr><td align="center">determine</td><td align="center">确定，决定，判断</td></tr><tr><td align="center">inform</td><td align="center">通知，告知</td></tr><tr><td align="center">simultaneously</td><td align="center">同时</td></tr><tr><td align="center">kernel</td><td align="center">核心</td></tr><tr><td align="center">external</td><td align="center">外部，外</td></tr><tr><td align="center">integrate</td><td align="center">整合，结合</td></tr></tbody></table><h3 id="Day-03"><a href="#Day-03" class="headerlink" title="Day:03"></a>Day:03</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">indentation</td><td align="center">缩进</td></tr><tr><td align="center">encounters</td><td align="center">遭遇</td></tr></tbody></table><h3 id="Day-07"><a href="#Day-07" class="headerlink" title="Day:07"></a>Day:07</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">discard</td><td align="center">丢弃，废弃，抛弃</td></tr><tr><td align="center">realistic</td><td align="center">现实，真实</td></tr><tr><td align="center">digest</td><td align="center">摘要</td></tr><tr><td align="center">proceed</td><td align="center">继续</td></tr><tr><td align="center">sole</td><td align="center">唯一</td></tr></tbody></table><h3 id="Day-08"><a href="#Day-08" class="headerlink" title="Day:08"></a>Day:08</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">compatible</td><td align="center">兼容</td></tr><tr><td align="center">integrated</td><td align="center">集成</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日英语 </tag>
            
            <tag> 2020-09 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript学习笔记</title>
      <link href="/2020/08/31/typescript-xue-xi-bi-ji/"/>
      <url>/2020/08/31/typescript-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript学习笔记"><a href="#TypeScript学习笔记" class="headerlink" title="TypeScript学习笔记"></a>TypeScript学习笔记</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>TypeScript是微软推出的 JavaScript 的超集。</p><h2 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h2><p>如下</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// boolean </span><span class="token keyword">let</span> isDone<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span><span class="token comment" spellcheck="true">// number</span><span class="token keyword">let</span> decimal<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token keyword">let</span> pi<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token comment" spellcheck="true">// string  单双引号都可以</span><span class="token keyword">let</span> color<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"blue"</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token comment" spellcheck="true">// 反引号可以包含多行 还可以使用${} 嵌入表达式。</span><span class="token keyword">let</span> sentence<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>fullName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.I'll be </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old next month.`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// array 数组</span><span class="token keyword">let</span> list <span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// tuple 元组</span><span class="token comment" spellcheck="true">// declare a tuple type </span><span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Initialize it</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span><span class="token comment" spellcheck="true">// Initialize it incorrectly</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 脚本语言 </tag>
            
            <tag> script </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言知识点记录</title>
      <link href="/2020/08/27/go-yu-yan-zhi-shi-dian-ji-lu/"/>
      <url>/2020/08/27/go-yu-yan-zhi-shi-dian-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-语言知识点记录"><a href="#Go-语言知识点记录" class="headerlink" title="Go 语言知识点记录"></a>Go 语言知识点记录</h1><h2 id="sync包的Once结构"><a href="#sync包的Once结构" class="headerlink" title="sync包的Once结构"></a>sync包的Once结构</h2><p>sync 是 Golang 标准库中的同步包，<code>Once</code> 结构中的 <code>Do</code> 方法能够保证传入的参数 <code>f</code> 只执行一次,并且在 Do 返回时  f 已经执行完成。它的源码如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Once is an object that will perform exactly one action.</span><span class="token keyword">type</span> Once <span class="token keyword">struct</span> <span class="token punctuation">{</span>    m    Mutex    done <span class="token builtin">uint32</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Do calls the function f if and only if Do is being called for the</span><span class="token comment" spellcheck="true">// first time for this instance of Once. In other words, given</span><span class="token comment" spellcheck="true">//     var once Once</span><span class="token comment" spellcheck="true">// if once.Do(f) is called multiple times, only the first call will invoke f,</span><span class="token comment" spellcheck="true">// even if f has a different value in each invocation. A new instance of</span><span class="token comment" spellcheck="true">// Once is required for each function to execute.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Do is intended for initialization that must be run exactly once. Since f</span><span class="token comment" spellcheck="true">// is niladic, it may be necessary to use a function literal to capture the</span><span class="token comment" spellcheck="true">// arguments to a function to be invoked by Do:</span><span class="token comment" spellcheck="true">//     config.once.Do(func() { config.init(filename) })</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Because no call to Do returns until the one call to f returns, if f causes</span><span class="token comment" spellcheck="true">// Do to be called, it will deadlock.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// If f panics, Do considers it to have returned; future calls of Do return</span><span class="token comment" spellcheck="true">// without calling f.</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>Once<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span>f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">LoadUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>o<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Slow-path.</span>    o<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> o<span class="token punctuation">.</span>m<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> o<span class="token punctuation">.</span>done <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">defer</span> atomic<span class="token punctuation">.</span><span class="token function">StoreUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>o<span class="token punctuation">.</span>done<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它包含了一个 m 互斥锁和一个 done 原子变量，这样做的目的是为了保证在 Do 返回时，f 已经调用完成。(版本 1.15.8有对应说明) </p><p>相关文章：</p><p><a href="https://preshing.com/20130618/atomic-vs-non-atomic-operations/" target="_blank" rel="noopener">atomic vs non-atomic</a></p><p>以下是使用示例代码：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"sync"</span><span class="token punctuation">)</span><span class="token keyword">var</span> _config <span class="token operator">*</span>Config<span class="token keyword">var</span> once sync<span class="token punctuation">.</span>Once<span class="token comment" spellcheck="true">// Config .</span><span class="token keyword">type</span> Config <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// NewConfig .</span><span class="token keyword">func</span> <span class="token function">NewConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Config <span class="token punctuation">{</span>    <span class="token keyword">return</span> _config<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    once<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        _config <span class="token operator">=</span> <span class="token operator">&amp;</span>Config<span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"init finish "</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    config <span class="token operator">:=</span> <span class="token function">NewConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Go-编译过程"><a href="#Go-编译过程" class="headerlink" title="Go 编译过程"></a>Go 编译过程</h2><p>Go 语言程序运行之前需要先编译成二进制，在编译过程会生成中间代码。它具有静态单赋值（Static Single Assignment）的特性。</p><p>抽象语法树（abstract syntax tree）是源代码语法的结构的一种抽象表示。编译器在执行完语法分析之后会输出一个抽象语法树，这个抽象语法树会辅助编译器进行语义分析。</p><p>如果一个中间代码具有静态单赋值的特性，那么每个变量就只会被赋值一次。静态单赋值主要是对代码进行优化。</p><p>指令集对应了不同的机器的架构。可以使用 <code>uname -m</code> 进行查看。</p><p>编译器分为前端和后端，编译器的前端一般承担着词法分析、语法分析、类型检查和中间代码生成几部分工作，而编译器后端主要负责目标代码的生成和优化，也就是将中间代码翻译成目标机器能够运行的二进制机器码。 </p><p><code>go build</code> 和 <code>go install</code> 的区别在于  <code>go install</code> 命令会将包安装到 <code>$GOPATH/pkg</code> 目录中。 编译减小文件大小，可以加上参数 <code>go build -ldflags &quot;-s -w&quot;</code> ，可以减少可执行文件的大小。<a href="https://stackoverflow.com/questions/3861634/how-to-reduce-compiled-file-size" target="_blank" rel="noopener">详情见此</a></p><h2 id="Go-中的-strings"><a href="#Go-中的-strings" class="headerlink" title="Go 中的 strings"></a>Go 中的 strings</h2><p>在 Go 中的字符串本质上是一个只读的字节数组,所以它没有容量.</p><h2 id="Go-性能测试"><a href="#Go-性能测试" class="headerlink" title="Go 性能测试"></a>Go 性能测试</h2><p>执行命令 <code>go test -v -bench=. -benchmem</code> :</p><pre class="line-numbers language-shell"><code class="language-shell">Benchmarkf1-4     10000        3703 ns/op        2433 B/op         28 allocs/opBenchmarkf2-4     10000        4342 ns/op        2288 B/op         26 allocs/op<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>-4</code> 执行的函数 <code>f1 和 f2</code> 执行的次数.</li><li><code>10000</code> 执行迭代的次数 <code>for i := 0; i &lt; b.N; i++ {</code>.</li><li><code>XXX ns/op</code> 完成每次迭代需要的时间.</li></ul><h2 id="Go-包管理模式中注意项"><a href="#Go-包管理模式中注意项" class="headerlink" title="Go 包管理模式中注意项"></a>Go 包管理模式中注意项</h2><p><code>go.mod</code> 文件中第一行除以是包的导入路径外，它还关联了该包的下载地址。如使用 go get  go install 命令下载。</p><p>在 <code>go.mod</code> 文件所在的子文件夹也会使用 module 模式。</p><p><code>go get</code> 命令会下载 remote 包到 <code>GOPATH</code> 的 <code>src</code> 文件夹下。</p><p><code>go install</code> 命令默认将该包安装到第一个 <code>GOPATH</code> 的 <code>bin</code> 文件夹下，若想设置自定义安装路径使用环境变量 <code>GOBIN</code> 。</p><p>go module 依赖包会自动下载到 pkg/mod 子目录下面，只读。使用该命令删除：<code>go clean -modcache</code></p><p>参考：<a href="https://golang.org/doc/code.html" target="_blank" rel="noopener">How to Write Go Code</a></p><h3 id="Go-语言编程规范-2020-12-9"><a href="#Go-语言编程规范-2020-12-9" class="headerlink" title="Go 语言编程规范(2020.12.9)"></a>Go 语言编程规范(2020.12.9)</h3><p><a href="https://github.com/golang/go/wiki/CodeReviewComments" target="_blank" rel="noopener">CodeReviewComments</a></p><p><a href="https://golang.org/doc/effective_go.html" target="_blank" rel="noopener">EffectiveGo</a></p><h3 id="Go-如何优雅的关闭-http-服务器"><a href="#Go-如何优雅的关闭-http-服务器" class="headerlink" title="Go 如何优雅的关闭 http 服务器"></a>Go 如何优雅的关闭 http 服务器</h3><p>代码示例（go 1.8之后）：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    mux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    mux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>rw http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>rw<span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> os<span class="token punctuation">.</span>Signal<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    signal<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span>done<span class="token punctuation">,</span> os<span class="token punctuation">.</span>Interrupt<span class="token punctuation">,</span> os<span class="token punctuation">.</span>Kill<span class="token punctuation">)</span>    srv <span class="token operator">:=</span> http<span class="token punctuation">.</span>Server<span class="token punctuation">{</span>        Addr<span class="token punctuation">:</span>    <span class="token string">":10000"</span><span class="token punctuation">,</span>        Handler<span class="token punctuation">:</span> mux<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> srv<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Server serve failed.  %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&lt;-</span>done    ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    srv<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Go-读取-http-Request-Body-内容"><a href="#Go-读取-http-Request-Body-内容" class="headerlink" title="Go 读取 http.Request.Body 内容"></a>Go 读取 http.Request.Body 内容</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">if</span> http<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">}</span>body<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// panic if http.Request.Body is nil.</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">NopCloser</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// do not anything,http.Request.Body closed by request.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<a href="https://stackoverflow.com/questions/43021058/golang-read-request-body" target="_blank" rel="noopener">golang-read-request-body</a></p><h3 id="Go-HTTP-单元测试"><a href="#Go-HTTP-单元测试" class="headerlink" title="Go HTTP 单元测试"></a>Go HTTP 单元测试</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestVersion</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    engine <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    inputs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span> <span class="token punctuation">{</span>        method  <span class="token builtin">string</span>        url     <span class="token builtin">string</span>        body    io<span class="token punctuation">.</span>Reader        request <span class="token keyword">func</span><span class="token punctuation">(</span>method <span class="token builtin">string</span><span class="token punctuation">,</span> url <span class="token builtin">string</span><span class="token punctuation">,</span> body io<span class="token punctuation">.</span>Reader<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>        rr   <span class="token operator">*</span>httptest<span class="token punctuation">.</span>ResponseRecorder        want <span class="token builtin">string</span>    <span class="token punctuation">}</span><span class="token punctuation">{</span>        <span class="token punctuation">{</span>            method<span class="token punctuation">:</span>  <span class="token string">"GET"</span><span class="token punctuation">,</span>            url<span class="token punctuation">:</span>     <span class="token string">"/last/version"</span><span class="token punctuation">,</span>            body<span class="token punctuation">:</span>    <span class="token boolean">nil</span><span class="token punctuation">,</span>            request<span class="token punctuation">:</span> http<span class="token punctuation">.</span>NewRequest<span class="token punctuation">,</span>            rr<span class="token punctuation">:</span>      httptest<span class="token punctuation">.</span><span class="token function">NewRecorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            want<span class="token punctuation">:</span>    <span class="token string">`{"code":0,"message":"ok","data":"v1.2.9"}`</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            method<span class="token punctuation">:</span>  <span class="token string">"GET"</span><span class="token punctuation">,</span>            url<span class="token punctuation">:</span>     <span class="token string">"/last/version"</span><span class="token punctuation">,</span>            body<span class="token punctuation">:</span>    <span class="token boolean">nil</span><span class="token punctuation">,</span>            request<span class="token punctuation">:</span> http<span class="token punctuation">.</span>NewRequest<span class="token punctuation">,</span>            rr<span class="token punctuation">:</span>      httptest<span class="token punctuation">.</span><span class="token function">NewRecorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            want<span class="token punctuation">:</span>    <span class="token string">`{"code":0,"message":"ok","data":"v1.2.9"}`</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> input <span class="token operator">:=</span> <span class="token keyword">range</span> inputs <span class="token punctuation">{</span>        r<span class="token punctuation">,</span> err <span class="token operator">:=</span> input<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>method<span class="token punctuation">,</span> input<span class="token punctuation">.</span>url<span class="token punctuation">,</span> input<span class="token punctuation">.</span>body<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"http request failed. %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        engine<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span>rr<span class="token punctuation">,</span> r<span class="token punctuation">)</span>        <span class="token keyword">if</span> input<span class="token punctuation">.</span>rr<span class="token punctuation">.</span>Code <span class="token operator">!=</span> http<span class="token punctuation">.</span>StatusOK <span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"request: %s | %s | failed. %v"</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span>method<span class="token punctuation">,</span> input<span class="token punctuation">.</span>url<span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> input<span class="token punctuation">.</span>rr<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> input<span class="token punctuation">.</span>want <span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"request: %s | %s | failed. got: %s; want: %v"</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span>method<span class="token punctuation">,</span> input<span class="token punctuation">.</span>url<span class="token punctuation">,</span> input<span class="token punctuation">.</span>rr<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> input<span class="token punctuation">.</span>want<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><h4 id="版本日志"><a href="#版本日志" class="headerlink" title="版本日志"></a>版本日志</h4><ul><li>第一版：2020 年 08 月 27 日</li><li>第二版：2021 年 02 月 20 日</li><li>第三版：2021 年 03 月 29 日</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb学习笔记</title>
      <link href="/2020/08/27/mongodb-xue-xi-bi-ji/"/>
      <url>/2020/08/27/mongodb-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB学习笔记"><a href="#MongoDB学习笔记" class="headerlink" title="MongoDB学习笔记"></a>MongoDB学习笔记</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MongoDB 是一个基于文档的通用分布式部署的现代应用数据库。数据存储格式跟 JSON 格式类似，每个数据可以看成是一个对象并可以嵌套。</p><p>安装请参考<a href="https://docs.mongodb.com/manual/installation/" target="_blank" rel="noopener">MongoDB Install</a> 或使用 docker 安装。</p><p><code>docker run --name some-mongo -p 27017:27017 -d mongo:tag</code>  </p><p>–name 表示指定这个容器的名字；-p 容器端口到本地端口映射；-d 后端运行；<code>tag</code> 指定 MongoDB 的版本。</p><p>更多关于 docker 安装 MongoDB 的<a href="https://hub.docker.com/_/mongo" target="_blank" rel="noopener">细节说明</a>。</p><h2 id="Go语言使用示例"><a href="#Go语言使用示例" class="headerlink" title="Go语言使用示例"></a>Go语言使用示例</h2><p>在 Go Module 模式下安装：<code>go get go.mongodb.org/mongo-driver/mongo</code>，其他包管理模式请自行 <code>baidu</code> 或 <code>google</code>。</p><p>导入数据库驱动和创建客户端</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">import</span><span class="token punctuation">(</span>    <span class="token string">"go.mongodb.org/mongo-driver/mongo"</span>    <span class="token string">"go.mongodb.org/mongo-driver/mongo/options"</span>    <span class="token string">"go.mongodb.org/mongo-driver/mongo/readpref"</span><span class="token punctuation">)</span>client<span class="token punctuation">,</span> err <span class="token operator">:=</span> mongo<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>连接数据库</p><pre class="line-numbers language-go"><code class="language-go">ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>断开数据库连接</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Disconnect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>Ping</code> 方法测试是否已经连接到了数据库</p><pre class="line-numbers language-go"><code class="language-go">ctx<span class="token punctuation">,</span> cancel <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> readpref<span class="token punctuation">.</span><span class="token function">Primary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>插入数据</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"go.mongodb.org/mongo-driver/bson"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 指定数据库，创建操作对象</span>collection <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">"testing"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">"numbers"</span><span class="token punctuation">)</span>ctx<span class="token punctuation">,</span> cancel <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>res<span class="token punctuation">,</span> err <span class="token operator">:=</span> collection<span class="token punctuation">.</span><span class="token function">InsertOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"pi"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">:</span> <span class="token number">3.14159</span><span class="token punctuation">}</span><span class="token punctuation">)</span>id <span class="token operator">:=</span> res<span class="token punctuation">.</span>InsertedID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询数据</p><pre class="line-numbers language-go"><code class="language-go">ctx<span class="token punctuation">,</span> cancel <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>cur<span class="token punctuation">,</span> err <span class="token operator">:=</span> collection<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">defer</span> cur<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token keyword">for</span> cur<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> result bson<span class="token punctuation">.</span>M   err <span class="token operator">:=</span> cur<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>   <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// do something with result....</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">:=</span> cur<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询一条数据</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> result <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Value <span class="token builtin">float64</span><span class="token punctuation">}</span>filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"pi"</span><span class="token punctuation">}</span>ctx<span class="token punctuation">,</span> cancel <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>err <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">FindOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Do something with result...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例完整代码</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"context"</span>    <span class="token string">"fmt"</span>    <span class="token string">"log"</span>    <span class="token string">"time"</span>    <span class="token string">"go.mongodb.org/mongo-driver/mongo/readpref"</span>    <span class="token string">"go.mongodb.org/mongo-driver/bson"</span>    <span class="token string">"go.mongodb.org/mongo-driver/mongo"</span>    <span class="token string">"go.mongodb.org/mongo-driver/mongo/options"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">SetFlags</span><span class="token punctuation">(</span>log<span class="token punctuation">.</span>Lshortfile<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// create timeout context based on background root context</span>    ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// create client</span>    client<span class="token punctuation">,</span> err <span class="token operator">:=</span> mongo<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ApplyURI</span><span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">handError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Create client failed"</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Disconnect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token function">handError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Disconnect failed"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// connect mongodb</span>    err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token function">handError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Connect server failed"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// ping</span>    err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> readpref<span class="token punctuation">.</span><span class="token function">Primary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">handError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Ping client failed"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// insert one record</span>    collection <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Database</span><span class="token punctuation">(</span><span class="token string">"testing"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Collection</span><span class="token punctuation">(</span><span class="token string">"numbers"</span><span class="token punctuation">)</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">InsertOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"ty"</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token punctuation">:</span>  <span class="token number">123</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">handError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Insert record failed"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// select all record</span>    cur<span class="token punctuation">,</span> err <span class="token operator">:=</span> collection<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> bson<span class="token punctuation">.</span>D<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">handError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Find all record failed"</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> cur<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token keyword">for</span> cur<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> result bson<span class="token punctuation">.</span>M        err <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>        <span class="token function">handError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Loop result error"</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// check error return by cursor</span>    err <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">handError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Last cursor failed"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// select one record</span>    <span class="token keyword">var</span> result <span class="token keyword">struct</span> <span class="token punctuation">{</span>        Name <span class="token builtin">string</span>        Age  <span class="token builtin">float64</span>    <span class="token punctuation">}</span>    filter <span class="token operator">:=</span> bson<span class="token punctuation">.</span>M<span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"ty"</span><span class="token punctuation">}</span>    err <span class="token operator">=</span> collection<span class="token punctuation">.</span><span class="token function">FindOne</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>result<span class="token punctuation">)</span>    <span class="token function">handError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Find one record failed"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// delete all record</span>    res<span class="token punctuation">,</span> err <span class="token operator">:=</span> collection<span class="token punctuation">.</span><span class="token function">DeleteMany</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> filter<span class="token punctuation">)</span>    <span class="token function">handError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Delete  record failed"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">handError</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> info <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalln</span><span class="token punctuation">(</span>info<span class="token operator">+</span><span class="token string">": "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> NoSQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ学习笔记</title>
      <link href="/2020/08/24/rabbitmq-xue-xi-bi-ji/"/>
      <url>/2020/08/24/rabbitmq-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="RabbitMQ学习笔记"><a href="#RabbitMQ学习笔记" class="headerlink" title="RabbitMQ学习笔记"></a>RabbitMQ学习笔记</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>RabbitMQ 是一个开源的消息队列，它的主要功能如下：</p><ul><li>异步消息：支持多种消息协议，消息队列，传递确认，灵活路由，多类型交换。</li><li>多语言支持，多类型部署。</li><li><code>HTTP-API</code>，命令行和<code>UI</code>管理和监控</li><li>支持插件集成功能</li></ul><p><a href="https://www.rabbitmq.com/download.html" target="_blank" rel="noopener">安装RabbitMQ</a></p><h2 id="RabbitMQ-核心概念"><a href="#RabbitMQ-核心概念" class="headerlink" title="RabbitMQ 核心概念"></a>RabbitMQ 核心概念</h2><p>在RabbitMQ中它可以比喻为邮局，接收，存储和转发消息，但是不能处理消息。</p><p>RabbitMQ中的一些概念：</p><ul><li>P-生产者即发送消息的程序就是生产者。</li><li><code>queue_name</code>-在RabbitMQ中使用名称确定一个队列，消息只能存储在队列中，它受限于主机的内存和磁盘，队列的本质就是一个大的消息缓存。多个生产者可以将消息发送到一个队列中，多个消费者可以从一个队列中接收消息。</li><li>C-消费者即等待接收消息的程序就是消费者。</li></ul><blockquote><p>生产者，消费者和队列不必在同一台机器上，一个应用既可以是生产者也可以是消费者。</p></blockquote><p>RabbitMQ支持多种协议，以下使用的是 <code>AMQP 0-9-1</code>消息协议。</p><p><code>amqp</code>Go中的RabbitMQ客户端，安装命令 <code>go get github.com/streadway/amqp</code>。</p><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><p>架构图</p><p><img src="https://www.rabbitmq.com/img/tutorials/python-one.png" alt="producer/customer"></p><p>发送消息（<code>send.go</code>）</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"log"</span>    <span class="token string">"github.com/streadway/amqp"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// send hello world message and closed</span><span class="token keyword">func</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// connect rabbitmq</span>    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> amqp<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"amqp://localhost:5672/"</span><span class="token punctuation">)</span>    <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to connect to RabbitMQ"</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// create a  amqp channel as a context for valid message exchanged</span>    ch<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to open a channel"</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> ch<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// create a queue</span>    q<span class="token punctuation">,</span> err <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span>        <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//name </span>        <span class="token boolean">false</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//durable</span>        <span class="token boolean">false</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// delete when unused</span>        <span class="token boolean">false</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// exclusive</span>        <span class="token boolean">false</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// no-wait</span>        <span class="token boolean">nil</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// arguments</span>    <span class="token punctuation">)</span>    <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to declare a queue"</span><span class="token punctuation">)</span>    body <span class="token operator">:=</span> <span class="token string">"Hello, world!"</span>    ch<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>        <span class="token string">""</span><span class="token punctuation">,</span>        q<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>        <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token boolean">false</span><span class="token punctuation">,</span>        amqp<span class="token punctuation">.</span>Publishing<span class="token punctuation">{</span>            ContentType<span class="token punctuation">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">,</span>            Body<span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to pubilish a message"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// error handle</span><span class="token keyword">func</span> <span class="token function">failOnError</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"%s: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接收消息</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"log"</span>    <span class="token string">"github.com/streadway/amqp"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// connect rabbitmq</span>    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> amqp<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"amqp://localhost:5672/"</span><span class="token punctuation">)</span>    <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to connect to RabbitMQ"</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    ch<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to open a channel"</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> ch<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    q<span class="token punctuation">,</span> err <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span>        <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// name</span>        <span class="token boolean">false</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// durable</span>        <span class="token boolean">false</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// delete when unused</span>        <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// exclusive</span>        <span class="token boolean">false</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// no-wait</span>        <span class="token boolean">nil</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// arguments</span>    <span class="token punctuation">)</span>    <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to declare a queue"</span><span class="token punctuation">)</span>    msgs<span class="token punctuation">,</span> err <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">Consume</span><span class="token punctuation">(</span>        q<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// queue</span>        <span class="token string">""</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// consumer</span>        <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// auto-ack</span>        <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// exclusive</span>        <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// no-local</span>        <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// no-wait</span>        <span class="token boolean">nil</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// args</span>    <span class="token punctuation">)</span>    <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to register a consumer"</span><span class="token punctuation">)</span>    forever <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> d <span class="token operator">:=</span> <span class="token keyword">range</span> msgs <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Recevied a message: %s"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" [*] Waiting for messages. To exit press CTRL+C"</span><span class="token punctuation">)</span>    <span class="token operator">&lt;-</span>forever<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">failOnError</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"%s: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ch.QueueDeclare</code> 方法中 <code>durable</code> 表示队列是否持久化，<code>autoDelete</code> 队列是否自动删除。两个参数联合的说明参考<code>API</code>文档。</p><p>在接收方又声明了一个相同的队列，是因为在运行接收程序之前，有可能发送程序还没有运行。如果已经存在相同的队列会直接忽略重新声明。</p><h2 id="工作队列"><a href="#工作队列" class="headerlink" title="工作队列"></a>工作队列</h2><p>架构图</p><p><img src="https://www.rabbitmq.com/img/tutorials/python-two.png" alt="worker"></p><p>task 只需要将<code>send.go</code>的代码作出如下改动</p><pre class="line-numbers language-go"><code class="language-go">body <span class="token operator">:=</span> <span class="token function">bodyFrom</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span>err <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>  <span class="token string">""</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">// exchange</span>  q<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// routing key</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// mandatory</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  amqp<span class="token punctuation">.</span>Publishing <span class="token punctuation">{</span>    DeliveryMode<span class="token punctuation">:</span> amqp<span class="token punctuation">.</span>Persistent<span class="token punctuation">,</span>    ContentType<span class="token punctuation">:</span>  <span class="token string">"text/plain"</span><span class="token punctuation">,</span>    Body<span class="token punctuation">:</span>         <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to publish a message"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" [x] Sent %s"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">bodyFrom</span><span class="token punctuation">(</span>args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> s <span class="token builtin">string</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> <span class="token string">"hello"</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        s <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>worker 在<code>receive.go</code>的代码改动</p><pre class="line-numbers language-go"><code class="language-go">msgs<span class="token punctuation">,</span> err <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">Consume</span><span class="token punctuation">(</span>  q<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// queue</span>  <span class="token string">""</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// consumer</span>  <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// auto-ack</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// exclusive</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// no-local</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// no-wait</span>  <span class="token boolean">nil</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// args</span><span class="token punctuation">)</span><span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to register a consumer"</span><span class="token punctuation">)</span>forever <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> d <span class="token operator">:=</span> <span class="token keyword">range</span> msgs <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Received a message: %s"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>    dot_count <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>Body<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>dot_count<span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>t <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Done"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" [*] Waiting for messages. To exit press CTRL+C"</span><span class="token punctuation">)</span><span class="token operator">&lt;-</span>forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序会发现多个 <code>worker</code> 程序收到的消息数量平均，这种方式被称为轮询分发。它的好处在于如果一个任务长时间没有完成，可以将后面的任务分发给其他 <code>woker</code> 继续后续任务。</p><p>上面代码运行会存在一个问题，那就是当<code>worker</code>执行耗时任务时，如果 <code>woker</code> 被结束了，或者连接断开了这时候这种方式运行的 RabbitMQ 就会丢失消息。所以为了解决这个问题，使用消息确认机制来解决这个问题。</p><p>在<code>ch.Consume</code>函数中使用手动控制消息确认将 <code>autoACK</code> 参数设置为 false,增加对应的代码来解决。</p><pre class="line-numbers language-go"><code class="language-go">msgs<span class="token punctuation">,</span> err <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">Consume</span><span class="token punctuation">(</span>  q<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// queue</span>  <span class="token string">""</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// consumer</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// auto-ack</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// exclusive</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// no-local</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// no-wait</span>  <span class="token boolean">nil</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// args</span><span class="token punctuation">)</span><span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to register a consumer"</span><span class="token punctuation">)</span>forever <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> d <span class="token operator">:=</span> <span class="token keyword">range</span> msgs <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Received a message: %s"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>    dot_count <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>Body<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>dot_count<span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>t <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Done"</span><span class="token punctuation">)</span>    d<span class="token punctuation">.</span><span class="token function">Ack</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" [*] Waiting for messages. To exit press CTRL+C"</span><span class="token punctuation">)</span><span class="token operator">&lt;-</span>forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：在没有收到确认消息，RabbitMQ会占用越来越多的内存。</p></blockquote><p>以上的内容都是临时保存的，在 RabbitMQ 重启之后消息会消失，如要进行消息持久化保存，可以按下面的方式进行设置。</p><p>消息持久化可以使用对应的字段进行设置，首先将队列进行持久化，将<code>ch.QueueDeclare</code>的<code>durable</code>字段设为true，然后再在<code>amqp.Publishing</code> 加上<code>DeliveryMode: amqp.Persistent</code>字段。</p><blockquote><p>RabbitMQ不允许多次在一个队列上设置不同的参数，同时即使加上了上面的代码消息也不能确保一定能够持久化保存，它们是保存在缓存中的，你可以使用官方提供的 <code>pulisher confirms</code> 进行持久化处理。</p></blockquote><pre class="line-numbers language-go"><code class="language-go">q<span class="token punctuation">,</span> err <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span>  <span class="token string">"task_queue"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// name</span>  <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// durable</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// delete when unused</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// exclusive</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// no-wait</span>  <span class="token boolean">nil</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// arguments</span><span class="token punctuation">)</span><span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to declare a queue"</span><span class="token punctuation">)</span>err <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>  <span class="token string">""</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">// exchange</span>  q<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// routing key</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// mandatory</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  amqp<span class="token punctuation">.</span>Publishing <span class="token punctuation">{</span>    DeliveryMode<span class="token punctuation">:</span> amqp<span class="token punctuation">.</span>Persistent<span class="token punctuation">,</span>    ContentType<span class="token punctuation">:</span>  <span class="token string">"text/plain"</span><span class="token punctuation">,</span>    Body<span class="token punctuation">:</span>         <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码还会存在一个问题就是它的轮询分发机制，可能会引起一个<code>worker</code>即使非常繁忙还是能收到任务，但是另一个 <code>worker</code> 空闲但是收不到任务。这是因为这种机制造成的，可以使用 <code>ch.Qos</code> 方法设置不要在一个时间分多个任务给一个 <code>worker</code> ，也就是说不要给一个还没有确认消息的 <code>worker</code> 发送任务。 </p><pre class="line-numbers language-go"><code class="language-go">err <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">Qos</span><span class="token punctuation">(</span>  <span class="token number">1</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// prefetch count</span>  <span class="token number">0</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// prefetch size</span>  <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// global</span><span class="token punctuation">)</span><span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to set QoS"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整代码如下</p><p>task</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>        <span class="token string">"log"</span>        <span class="token string">"os"</span>        <span class="token string">"strings"</span>        <span class="token string">"github.com/streadway/amqp"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">failOnError</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"%s: %s"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> amqp<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"amqp://guest:guest@localhost:5672/"</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to connect to RabbitMQ"</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ch<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to open a channel"</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> ch<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        q<span class="token punctuation">,</span> err <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span>                <span class="token string">"task_queue"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// name</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// durable</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// delete when unused</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// exclusive</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// no-wait</span>                <span class="token boolean">nil</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// arguments</span>        <span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to declare a queue"</span><span class="token punctuation">)</span>        body <span class="token operator">:=</span> <span class="token function">bodyFrom</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span>        err <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>                <span class="token string">""</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">// exchange</span>                q<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// routing key</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// mandatory</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>                amqp<span class="token punctuation">.</span>Publishing<span class="token punctuation">{</span>                        DeliveryMode<span class="token punctuation">:</span> amqp<span class="token punctuation">.</span>Persistent<span class="token punctuation">,</span>                        ContentType<span class="token punctuation">:</span>  <span class="token string">"text/plain"</span><span class="token punctuation">,</span>                        Body<span class="token punctuation">:</span>         <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to publish a message"</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" [x] Sent %s"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">bodyFrom</span><span class="token punctuation">(</span>args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> s <span class="token builtin">string</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>                s <span class="token operator">=</span> <span class="token string">"hello"</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                s <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>worker</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>        <span class="token string">"bytes"</span>        <span class="token string">"github.com/streadway/amqp"</span>        <span class="token string">"log"</span>        <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">failOnError</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"%s: %s"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> amqp<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"amqp://guest:guest@localhost:5672/"</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to connect to RabbitMQ"</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ch<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to open a channel"</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> ch<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        q<span class="token punctuation">,</span> err <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span>                <span class="token string">"task_queue"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// name</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// durable</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// delete when unused</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// exclusive</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// no-wait</span>                <span class="token boolean">nil</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// arguments</span>        <span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to declare a queue"</span><span class="token punctuation">)</span>        err <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">Qos</span><span class="token punctuation">(</span>                <span class="token number">1</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// prefetch count</span>                <span class="token number">0</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// prefetch size</span>                <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// global</span>        <span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to set QoS"</span><span class="token punctuation">)</span>        msgs<span class="token punctuation">,</span> err <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">Consume</span><span class="token punctuation">(</span>                q<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// queue</span>                <span class="token string">""</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// consumer</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// auto-ack</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// exclusive</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// no-local</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// no-wait</span>                <span class="token boolean">nil</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// args</span>        <span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to register a consumer"</span><span class="token punctuation">)</span>        forever <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> d <span class="token operator">:=</span> <span class="token keyword">range</span> msgs <span class="token punctuation">{</span>                        log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Received a message: %s"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>                        dot_count <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>Body<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>dot_count<span class="token punctuation">)</span>                        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>t <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>                        log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Done"</span><span class="token punctuation">)</span>                        d<span class="token punctuation">.</span><span class="token function">Ack</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" [*] Waiting for messages. To exit press CTRL+C"</span><span class="token punctuation">)</span>        <span class="token operator">&lt;-</span>forever<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h2><p>在 RbbitMQ 中完整的消息传递模式是：生产者不会直接传递消息到消息队列中，而是将消息传递到 <code>exchange</code> 中，由它来确定如何发送消息，它将从生产者接受到的消息发送到消息队列中。</p><p><code>exchange</code> 的类型决定了它发送消息的方式，有如下方式可以使用 <code>direct, topic, headers and fanout</code>，发布订阅模型选用 <code>fanout</code> 类型。 </p><p>发布订阅模式的 <code>exchange</code> 类型是 <code>fanout</code>,这时候的消息队列是临时的消息队列用于和消费者进行绑定的，当断开连接时，该队列应该删除并且这时候 <code>routing key</code> 是忽略的。</p><p><img src="https://www.rabbitmq.com/img/tutorials/exchanges.png" alt="pub/sub"></p><p>示例代码：</p><p>publish—-&gt; <code>emit_log.go</code></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>        <span class="token string">"log"</span>        <span class="token string">"os"</span>        <span class="token string">"strings"</span>        <span class="token string">"github.com/streadway/amqp"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">failOnError</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"%s: %s"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> amqp<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"amqp://guest:guest@localhost:5672/"</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to connect to RabbitMQ"</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ch<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to open a channel"</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> ch<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        err <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">ExchangeDeclare</span><span class="token punctuation">(</span>                <span class="token string">"logs"</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// name</span>                <span class="token string">"fanout"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// type</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// durable</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// auto-deleted</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// internal</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// no-wait</span>                <span class="token boolean">nil</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// arguments</span>        <span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to declare an exchange"</span><span class="token punctuation">)</span>        body <span class="token operator">:=</span> <span class="token function">bodyFrom</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span>        err <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>                <span class="token string">"logs"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// exchange</span>                <span class="token string">""</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// routing key</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// mandatory</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// immediate</span>                amqp<span class="token punctuation">.</span>Publishing<span class="token punctuation">{</span>                        ContentType<span class="token punctuation">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">,</span>                        Body<span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to publish a message"</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" [x] Sent %s"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">bodyFrom</span><span class="token punctuation">(</span>args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> s <span class="token builtin">string</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>                s <span class="token operator">=</span> <span class="token string">"hello"</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                s <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>subscribe—&gt;<code>receive_logs.go</code></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>        <span class="token string">"log"</span>        <span class="token string">"github.com/streadway/amqp"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">failOnError</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"%s: %s"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> amqp<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"amqp://guest:guest@localhost:5672/"</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to connect to RabbitMQ"</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ch<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to open a channel"</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> ch<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        err <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">ExchangeDeclare</span><span class="token punctuation">(</span>                <span class="token string">"logs"</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// name</span>                <span class="token string">"fanout"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// type</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// durable</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// auto-deleted</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// internal</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// no-wait</span>                <span class="token boolean">nil</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// arguments</span>        <span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to declare an exchange"</span><span class="token punctuation">)</span>        q<span class="token punctuation">,</span> err <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span>                <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// name</span>                <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// durable</span>                <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// delete when unused</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// exclusive</span>                <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// no-wait</span>                <span class="token boolean">nil</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// arguments</span>        <span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to declare a queue"</span><span class="token punctuation">)</span>        err <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">QueueBind</span><span class="token punctuation">(</span>                q<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// queue name</span>                <span class="token string">""</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// routing key</span>                <span class="token string">"logs"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// exchange</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token boolean">nil</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to bind a queue"</span><span class="token punctuation">)</span>        msgs<span class="token punctuation">,</span> err <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">Consume</span><span class="token punctuation">(</span>                q<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// queue</span>                <span class="token string">""</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// consumer</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// auto-ack</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// exclusive</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// no-local</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// no-wait</span>                <span class="token boolean">nil</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// args</span>        <span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to register a consumer"</span><span class="token punctuation">)</span>        forever <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> d <span class="token operator">:=</span> <span class="token keyword">range</span> msgs <span class="token punctuation">{</span>                        log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" [x] %s"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" [*] Waiting for logs. To exit press CTRL+C"</span><span class="token punctuation">)</span>        <span class="token operator">&lt;-</span>forever<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h2><p>对于 <code>fanout</code> 类型的 <code>exchange</code>，它会将任意消息推送给和它绑定的队列，但是者缺乏一些灵活性，有时候我们需要一些有用的消息，可以对消息进行过滤，这时候 <code>exchange</code> 类型应该改变为 <code>direct</code> 。这时候就需要 <code>routing key</code> 来进行设置了。</p><p><img src="https://www.rabbitmq.com/img/tutorials/python-four.png" alt="routing"></p><p>示例代码：</p><p><code>emit_log_direct.go</code></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>        <span class="token string">"log"</span>        <span class="token string">"os"</span>        <span class="token string">"strings"</span>        <span class="token string">"github.com/streadway/amqp"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">failOnError</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"%s: %s"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> amqp<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"amqp://guest:guest@localhost:5672/"</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to connect to RabbitMQ"</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ch<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to open a channel"</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> ch<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        err <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">ExchangeDeclare</span><span class="token punctuation">(</span>                <span class="token string">"logs_direct"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// name</span>                <span class="token string">"direct"</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// type</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// durable</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// auto-deleted</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// internal</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// no-wait</span>                <span class="token boolean">nil</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">// arguments</span>        <span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to declare an exchange"</span><span class="token punctuation">)</span>        body <span class="token operator">:=</span> <span class="token function">bodyFrom</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span>        err <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>                <span class="token string">"logs_direct"</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// exchange</span>                <span class="token function">severityFrom</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// routing key</span>                <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// mandatory</span>                <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// immediate</span>                amqp<span class="token punctuation">.</span>Publishing<span class="token punctuation">{</span>                        ContentType<span class="token punctuation">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">,</span>                        Body<span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to publish a message"</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" [x] Sent %s"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">bodyFrom</span><span class="token punctuation">(</span>args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> s <span class="token builtin">string</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">||</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>                s <span class="token operator">=</span> <span class="token string">"hello"</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                s <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">severityFrom</span><span class="token punctuation">(</span>args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> s <span class="token builtin">string</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>                s <span class="token operator">=</span> <span class="token string">"info"</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                s <span class="token operator">=</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>receive_logs_direct.go</code></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>        <span class="token string">"log"</span>        <span class="token string">"os"</span>        <span class="token string">"github.com/streadway/amqp"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">failOnError</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"%s: %s"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> amqp<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"amqp://guest:guest@localhost:5672/"</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to connect to RabbitMQ"</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ch<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to open a channel"</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> ch<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        err <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">ExchangeDeclare</span><span class="token punctuation">(</span>                <span class="token string">"logs_direct"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// name</span>                <span class="token string">"direct"</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// type</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// durable</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// auto-deleted</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// internal</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// no-wait</span>                <span class="token boolean">nil</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">// arguments</span>        <span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to declare an exchange"</span><span class="token punctuation">)</span>        q<span class="token punctuation">,</span> err <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span>                <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// name</span>                <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// durable</span>                <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// delete when unused</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// exclusive</span>                <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// no-wait</span>                <span class="token boolean">nil</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// arguments</span>        <span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to declare a queue"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Usage: %s [info] [warning] [error]"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Binding queue %s to exchange %s with routing key %s"</span><span class="token punctuation">,</span>                        q<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token string">"logs_direct"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>                err <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">QueueBind</span><span class="token punctuation">(</span>                        q<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// queue name</span>                        s<span class="token punctuation">,</span>             <span class="token comment" spellcheck="true">// routing key</span>                        <span class="token string">"logs_direct"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// exchange</span>                        <span class="token boolean">false</span><span class="token punctuation">,</span>                        <span class="token boolean">nil</span><span class="token punctuation">)</span>                <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to bind a queue"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        msgs<span class="token punctuation">,</span> err <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">Consume</span><span class="token punctuation">(</span>                q<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// queue</span>                <span class="token string">""</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// consumer</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// auto ack</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// exclusive</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// no local</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// no wait</span>                <span class="token boolean">nil</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// args</span>        <span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to register a consumer"</span><span class="token punctuation">)</span>        forever <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> d <span class="token operator">:=</span> <span class="token keyword">range</span> msgs <span class="token punctuation">{</span>                        log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" [x] %s"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" [*] Waiting for logs. To exit press CTRL+C"</span><span class="token punctuation">)</span>        <span class="token operator">&lt;-</span>forever<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Topics"><a href="#Topics" class="headerlink" title="Topics"></a>Topics</h2><p>在路由的基础上还可以使用 <code>topic</code> 类型的模式来提高过滤的灵活性，其中 <code>*</code> 表示匹配一个单词，<code>#</code> 表示匹配多个单词，并且它们之间用 <code>.</code> 隔开。</p><p><img src="https://www.rabbitmq.com/img/tutorials/python-five.png" alt="topic"></p><p>示例代码：</p><p><code>emit_log_topic.go</code></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>        <span class="token string">"log"</span>        <span class="token string">"os"</span>        <span class="token string">"strings"</span>        <span class="token string">"github.com/streadway/amqp"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">failOnError</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"%s: %s"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> amqp<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"amqp://guest:guest@localhost:5672/"</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to connect to RabbitMQ"</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ch<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to open a channel"</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> ch<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        err <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">ExchangeDeclare</span><span class="token punctuation">(</span>                <span class="token string">"logs_topic"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// name</span>                <span class="token string">"topic"</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// type</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// durable</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// auto-deleted</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// internal</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// no-wait</span>                <span class="token boolean">nil</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// arguments</span>        <span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to declare an exchange"</span><span class="token punctuation">)</span>        body <span class="token operator">:=</span> <span class="token function">bodyFrom</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span>        err <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">Publish</span><span class="token punctuation">(</span>                <span class="token string">"logs_topic"</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// exchange</span>                <span class="token function">severityFrom</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// routing key</span>                <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// mandatory</span>                <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// immediate</span>                amqp<span class="token punctuation">.</span>Publishing<span class="token punctuation">{</span>                        ContentType<span class="token punctuation">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">,</span>                        Body<span class="token punctuation">:</span>        <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to publish a message"</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" [x] Sent %s"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">bodyFrom</span><span class="token punctuation">(</span>args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> s <span class="token builtin">string</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">||</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>                s <span class="token operator">=</span> <span class="token string">"hello"</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                s <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">severityFrom</span><span class="token punctuation">(</span>args <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> s <span class="token builtin">string</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">||</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>                s <span class="token operator">=</span> <span class="token string">"anonymous.info"</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                s <span class="token operator">=</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>receive_logs_topic.go</code></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>        <span class="token string">"log"</span>        <span class="token string">"os"</span>        <span class="token string">"github.com/streadway/amqp"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">failOnError</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"%s: %s"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> amqp<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"amqp://guest:guest@localhost:5672/"</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to connect to RabbitMQ"</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ch<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to open a channel"</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> ch<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        err <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">ExchangeDeclare</span><span class="token punctuation">(</span>                <span class="token string">"logs_topic"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// name</span>                <span class="token string">"topic"</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// type</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// durable</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// auto-deleted</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// internal</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// no-wait</span>                <span class="token boolean">nil</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// arguments</span>        <span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to declare an exchange"</span><span class="token punctuation">)</span>        q<span class="token punctuation">,</span> err <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">QueueDeclare</span><span class="token punctuation">(</span>                <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// name</span>                <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// durable</span>                <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// delete when unused</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// exclusive</span>                <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// no-wait</span>                <span class="token boolean">nil</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// arguments</span>        <span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to declare a queue"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Usage: %s [binding_key]..."</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Binding queue %s to exchange %s with routing key %s"</span><span class="token punctuation">,</span>                        q<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token string">"logs_topic"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>                err <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">QueueBind</span><span class="token punctuation">(</span>                        q<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// queue name</span>                        s<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// routing key</span>                        <span class="token string">"logs_topic"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// exchange</span>                        <span class="token boolean">false</span><span class="token punctuation">,</span>                        <span class="token boolean">nil</span><span class="token punctuation">)</span>                <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to bind a queue"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        msgs<span class="token punctuation">,</span> err <span class="token operator">:=</span> ch<span class="token punctuation">.</span><span class="token function">Consume</span><span class="token punctuation">(</span>                q<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// queue</span>                <span class="token string">""</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// consumer</span>                <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// auto ack</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// exclusive</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// no local</span>                <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// no wait</span>                <span class="token boolean">nil</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// args</span>        <span class="token punctuation">)</span>        <span class="token function">failOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"Failed to register a consumer"</span><span class="token punctuation">)</span>        forever <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> d <span class="token operator">:=</span> <span class="token keyword">range</span> msgs <span class="token punctuation">{</span>                        log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" [x] %s"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">" [*] Waiting for logs. To exit press CTRL+C"</span><span class="token punctuation">)</span>        <span class="token operator">&lt;-</span>forever<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dart语言笔记.md</title>
      <link href="/2020/08/22/dart-yu-yan-bi-ji/"/>
      <url>/2020/08/22/dart-yu-yan-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Dart-语言学习笔记"><a href="#Dart-语言学习笔记" class="headerlink" title="Dart 语言学习笔记"></a>Dart 语言学习笔记</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Google 推出的在任意平台快速构建应用的客户端优化语言，可以编译成 ARM &amp; <code>X64</code> 到任意平台上。</p><h2 id="语法结构"><a href="#语法结构" class="headerlink" title="语法结构"></a>语法结构</h2><p>代码码上来</p><pre class="line-numbers language-dart"><code class="language-dart"><span class="token comment" spellcheck="true">// 每个应用都有 main 函数</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 变量声明名，Dart 可以进行类型推导，所以大部分变量都不需要显式声明类型。</span><span class="token comment" spellcheck="true">// 在 dart 中字符串常用单引号，双引号也可以。并且每个结束语句后要有分号</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'ty'</span><span class="token punctuation">;</span><span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token number">2020</span><span class="token punctuation">;</span><span class="token keyword">var</span> point <span class="token operator">=</span> <span class="token number">3.7</span> <span class="token punctuation">;</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'book1'</span><span class="token punctuation">,</span> <span class="token string">'book2'</span><span class="token punctuation">,</span><span class="token string">'book3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'tags'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'haha'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'url'</span><span class="token punctuation">:</span><span class="token string">'path/to/a.jpg'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 流程控制语句</span><span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'big than 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'less than 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'equal 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> object <span class="token keyword">in</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">print</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>year <span class="token operator">&lt;</span> <span class="token number">2050</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    year <span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 函数，官方推荐指定函数的返回值和参数。</span>int <span class="token function">fibonacci</span><span class="token punctuation">(</span>int n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 函数只有单条语句的简写方法，这种简写方式在传入异步回调的时候会显得特别简便。</span>array<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">'turn'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注释</span><span class="token comment" spellcheck="true">// 单行注释</span><span class="token comment" spellcheck="true">/// 文档注释  IDE 工具和文档工具可以提示注释</span><span class="token comment" spellcheck="true">/// 这是文档注释的其他部分</span><span class="token comment" spellcheck="true">/* 此种注释方式也支持 */</span><span class="token comment" spellcheck="true">// 导包</span><span class="token comment" spellcheck="true">// 导入标准库</span><span class="token keyword">import</span> <span class="token string">'dart:math'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导入三方库</span><span class="token keyword">import</span> <span class="token string">'package:test/test.dart'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导入文件</span><span class="token keyword">import</span> <span class="token string">'path/to/my_other_file.dart'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 脚本语言 </tag>
            
            <tag> script </tag>
            
            <tag> dart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go踩坑笔记</title>
      <link href="/2020/08/04/go-cai-keng-bi-ji/"/>
      <url>/2020/08/04/go-cai-keng-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Go踩坑笔记"><a href="#Go踩坑笔记" class="headerlink" title="Go踩坑笔记"></a>Go踩坑笔记</h1><h2 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h2><p>通过网络传输的数据将结构体进行绑定时，字段一定要导出，不然绑定会失败，tag 遵循它该有的原则。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> param <span class="token keyword">struct</span><span class="token punctuation">{</span>    field1 <span class="token string">`json:"filed1"`</span>    Filed2 <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 第一种即使有 tag 解析函数仍然不会解析到结构体的参数上。</span><span class="token comment" spellcheck="true">// 第二种即使没有 tag 也可以解释到结构体上，按照默认规则，首字母小写进行解析 filed2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Channel-操作"><a href="#Channel-操作" class="headerlink" title="Channel 操作"></a>Channel 操作</h2><p>在使用 <code>for range</code> 接收无缓存 channel 的数据时，如果发送完成没有关闭该 channel 可能会发生死锁。</p><h2 id="调度机制"><a href="#调度机制" class="headerlink" title="调度机制"></a>调度机制</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">{</span>             <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millsecond<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上结果可能会卡住，这是因为 go 的调度器的调度机制造成了，在没有实现抢占式调度之前，该程序不会打印，实现了抢占式调度会打印 <code>ok</code> 并退出。详情可以查看 <code>Golang MPG</code> 模式！</p><h2 id="defer-机制"><a href="#defer-机制" class="headerlink" title="defer 机制"></a>defer 机制</h2><p>当使用 defer 函数进行资源关闭时，要先进行错误判断在 defer 关闭资源。</p><pre class="line-numbers language-go"><code class="language-go">file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="v2rayW项目"><a href="#v2rayW项目" class="headerlink" title="v2rayW项目"></a>v2rayW项目</h2><p>项目采用 token 验证用户权限，当请求 <code>v2ray</code> 的状态和日志需要使用到 <code>websocket</code> 协议 , 当请求这两个接口时需要验证 token 权限，所以前端请求时将 token 放到了<code>Sec-WebSocket-Protocol</code> 头里到服务器进行验证权限。当没有其他操作时使用这种方式一些浏览器能够正常工作，但是使用 chrome 时，<code>http</code> 不能升级到 <code>websocket</code>，原因是因为服务器没有设置 <code>websocket</code> 的子协议，<a href="https://stackoverflow.com/questions/34198566/websocket-error-during-websocket-handshake-sent-non-empty-sec-websocket-proto" target="_blank" rel="noopener">原因说明</a>。</p><p>在本项目中，我把每个请求的 token 设置到了 <code>websocket</code> 的子协议中，在进行权限验证。</p><h2 id="slice-append-扩容机制"><a href="#slice-append-扩容机制" class="headerlink" title="slice append 扩容机制"></a>slice append 扩容机制</h2><h3 id="扩容大小"><a href="#扩容大小" class="headerlink" title="扩容大小"></a>扩容大小</h3><p>在使用 append 函数为 slice 进行扩容时，网上很多文章都说它的扩容是在原 slice 容量小于 1024 时，2倍扩容，在大于或等于 1024 时扩容为 1.25 倍。在 <a href="https://github.com/golang/go/blob/440f7d64048cd94cba669e16fe92137ce6b84073/src/runtime/slice.go#L76-L191" target="_blank" rel="noopener">runtime/slice.go</a>处有如下代码：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">growslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> old slice<span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> slice <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>    newcap <span class="token operator">:=</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span>    doublecap <span class="token operator">:=</span> newcap <span class="token operator">+</span> newcap    <span class="token keyword">if</span> <span class="token builtin">cap</span> <span class="token operator">></span> doublecap <span class="token punctuation">{</span>        newcap <span class="token operator">=</span> <span class="token builtin">cap</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> old<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token punctuation">{</span>            newcap <span class="token operator">=</span> doublecap        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Check 0 &lt; newcap to detect overflow</span>            <span class="token comment" spellcheck="true">// and prevent an infinite loop.</span>            <span class="token keyword">for</span> <span class="token number">0</span> <span class="token operator">&lt;</span> newcap <span class="token operator">&amp;&amp;</span> newcap <span class="token operator">&lt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>                newcap <span class="token operator">+=</span> newcap <span class="token operator">/</span> <span class="token number">4</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Set newcap to the requested cap when</span>            <span class="token comment" spellcheck="true">// the newcap calculation overflowed.</span>            <span class="token keyword">if</span> newcap <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>                newcap <span class="token operator">=</span> <span class="token builtin">cap</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是就是由于这段代码让我在测试 append 是否真的按这样的方式在做的时候出现了问题</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// cap is 1</span>    s1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// cap is 4</span>    s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> s1<span class="token operator">...</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 按上面的代码段得到的新容量应该为 5 但实际是6</span>    <span class="token comment" spellcheck="true">// 其它示例</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span>    a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// cap is 8</span>    b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">}</span>    b <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// cap is 6</span>    c <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int32</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">}</span>    c <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// cap is 8</span>    <span class="token keyword">type</span> D <span class="token keyword">struct</span><span class="token punctuation">{</span>        age <span class="token builtin">byte</span>        name <span class="token builtin">string</span>    <span class="token punctuation">}</span>    d <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>D<span class="token punctuation">{</span>        <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"123"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"234"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    d <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span>D<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"456"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>D<span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"567"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>D<span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"678"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// cap is 5 </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出现上面的原因在于在 <code>growslice</code> 中后面的代码重新计算了 slice 的容量</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">growslice</span><span class="token punctuation">(</span>et <span class="token operator">*</span>_type<span class="token punctuation">,</span> old slice<span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token builtin">int</span><span class="token punctuation">)</span> slice <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>    newcap <span class="token operator">:=</span> old<span class="token punctuation">.</span><span class="token builtin">cap</span>    doublecap <span class="token operator">:=</span> newcap <span class="token operator">+</span> newcap    <span class="token keyword">if</span> <span class="token builtin">cap</span> <span class="token operator">></span> doublecap <span class="token punctuation">{</span>        newcap <span class="token operator">=</span> <span class="token builtin">cap</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> old<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token operator">&lt;</span> <span class="token number">1024</span> <span class="token punctuation">{</span>            newcap <span class="token operator">=</span> doublecap        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Check 0 &lt; newcap to detect overflow</span>            <span class="token comment" spellcheck="true">// and prevent an infinite loop.</span>            <span class="token keyword">for</span> <span class="token number">0</span> <span class="token operator">&lt;</span> newcap <span class="token operator">&amp;&amp;</span> newcap <span class="token operator">&lt;</span> <span class="token builtin">cap</span> <span class="token punctuation">{</span>                newcap <span class="token operator">+=</span> newcap <span class="token operator">/</span> <span class="token number">4</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Set newcap to the requested cap when</span>            <span class="token comment" spellcheck="true">// the newcap calculation overflowed.</span>            <span class="token keyword">if</span> newcap <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span>                newcap <span class="token operator">=</span> <span class="token builtin">cap</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> overflow <span class="token builtin">bool</span>    <span class="token keyword">var</span> lenmem<span class="token punctuation">,</span> newlenmem<span class="token punctuation">,</span> capmem <span class="token builtin">uintptr</span>    <span class="token comment" spellcheck="true">// Specialize for common values of et.size.</span>    <span class="token comment" spellcheck="true">// For 1 we don't need any division/multiplication.</span>    <span class="token comment" spellcheck="true">// For sys.PtrSize, compiler will optimize division/multiplication into a shift by a constant.</span>    <span class="token comment" spellcheck="true">// For powers of 2, use a variable shift.</span>    <span class="token keyword">switch</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> et<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span>        newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span>        capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span><span class="token punctuation">)</span>        overflow <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">></span> maxAlloc        newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem<span class="token punctuation">)</span>    <span class="token keyword">case</span> et<span class="token punctuation">.</span>size <span class="token operator">==</span> sys<span class="token punctuation">.</span>PtrSize<span class="token punctuation">:</span>        lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">*</span> sys<span class="token punctuation">.</span>PtrSize        newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token operator">*</span> sys<span class="token punctuation">.</span>PtrSize        capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">*</span> sys<span class="token punctuation">.</span>PtrSize<span class="token punctuation">)</span>        overflow <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">></span> maxAlloc<span class="token operator">/</span>sys<span class="token punctuation">.</span>PtrSize        newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">/</span> sys<span class="token punctuation">.</span>PtrSize<span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">var</span> shift <span class="token builtin">uintptr</span>        <span class="token keyword">if</span> sys<span class="token punctuation">.</span>PtrSize <span class="token operator">==</span> <span class="token number">8</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Mask shift for better code generation.</span>            shift <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span><span class="token function">Ctz64</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">63</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            shift <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span><span class="token function">Ctz32</span><span class="token punctuation">(</span><span class="token function">uint32</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">31</span>        <span class="token punctuation">}</span>        lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift        newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift        capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift<span class="token punctuation">)</span>        overflow <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>maxAlloc <span class="token operator">>></span> shift<span class="token punctuation">)</span>        newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">>></span> shift<span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">)</span> <span class="token operator">*</span> et<span class="token punctuation">.</span>size        newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token builtin">cap</span><span class="token punctuation">)</span> <span class="token operator">*</span> et<span class="token punctuation">.</span>size        capmem<span class="token punctuation">,</span> overflow <span class="token operator">=</span> math<span class="token punctuation">.</span><span class="token function">MulUintptr</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span><span class="token punctuation">)</span>        capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span>capmem<span class="token punctuation">)</span>        newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">/</span> et<span class="token punctuation">.</span>size<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>et 是 slice 中元素的类型的一种元数据信息，就分析 slice，et 中只需要知道 size 就足够了，size代表的是，元素在计算机所占的字节大小。对于 64 位系统, size 大小为8个字节。<strong>round-up，向上取整，<code>roundupsize</code>，向上取一个size。<code>(uintptr(newcap) \* sys.PtrSize)</code>的乘积应该为5*8=40，经过向上取整之后得到了新的所需内存<code>capmem=48</code>，接着所需内存/类型大小<code>int(capmem / sys.PtrSize)</code>，得到了新的容量，也就是6.</strong></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在扩容后赋予另一个变量</span>    a <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [4/8]0xc000094f18</span>    b <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [7/8]0xc000094f18 [4/8]0xc000094f18 </span>    a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [7/8]0xc000094f18 4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>在通过上面扩容代码段得到新容量后，还要根据 slice 的类型 size，计算出新的容量所需的内存大小 <code>capmem</code>，然后在对 <code>capmem</code> 向上取整，得到新的所需要的内存大小然后除以 size 得到真正的容量大小。</strong></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://draveness.me/golang/docs/part2-foundation/ch03-datastructure/golang-array-and-slice/#324-%E8%BF%BD%E5%8A%A0%E5%92%8C%E6%89%A9%E5%AE%B9" target="_blank" rel="noopener">Go语言设计与实现 – 切片</a></p><p><a href="https://juejin.im/post/6844903812331732999" target="_blank" rel="noopener">Go slice扩容深度分析</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Go 语言踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础知识记录</title>
      <link href="/2020/07/29/ji-chu-zhi-shi-ji-lu/"/>
      <url>/2020/07/29/ji-chu-zhi-shi-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识记录"><a href="#基础知识记录" class="headerlink" title="基础知识记录"></a>基础知识记录</h1><h2 id="Hash-函数"><a href="#Hash-函数" class="headerlink" title="Hash 函数"></a>Hash 函数</h2><p>hash 也称散列，哈希。基本原理是将任意长度的输入，通过 hash 函数变成固定长度的输出。原始数据映射后的二进制串就是哈希值</p><h2 id="Hash-表"><a href="#Hash-表" class="headerlink" title="Hash 表"></a>Hash 表</h2><p>hash 表是一个存储键值映射的数据结构，它的读写效率在装载因子在正常水平时为 O(1)，若不正常时为 O(n)。它有两种实现方案; 开放寻址法：底层数据结构为数组，在发生 hash 冲突时，从索引(<code>index=hash(key)%array.length</code>)位置开始向后查找为空的位置进行插入，查询也是同理。拉链法:底层数据结构为数组加链表，当 hash 发生冲突时，会在冲突位置上进行链表遍历查找，如果找到就替换，没找到就链表后面插入，索引计算方式相同。两种方式相比而言后者查找长度更短，内存为动态分配，还可以用红黑树进行优化链表。</p><p> Go 语言中的 map 也是利用 hash 表来实现的，其中底层结构中 <code>hmap</code> 表示哈希表。有几个关键的字段 <code>count</code> 表示的是元素的数量，<code>B</code> 表示桶（存放的是链表(<code>bmap</code>)结构）的个数，且桶的个数是 2的 n 次方的倍数，还有 <code>hash0</code> 表示计算 hash 值用到的种子。在一个桶中存放的是键值对为 8 个当超过这个个数时，还有一个专门存放溢出的 key/value 的结构。当装载因子超过 6.5 或哈希表使用了太多溢出桶，map 要进行扩容处理，扩容中会有 <code>oldbuckets</code> 保存之前的数据。会有等量扩容和倍数扩容。此时如果有增删改操作，发生时，原来的桶不会立即删除，还会使用之前桶里的数据等所有操作结束后在进行正确的操作。在 map 进行字面量赋值时，没超过 25 时，会将所有的键值对放到 map 中，超过会遍历将其放到 map 中。在向 map 插入值时，会使用 <code>bmap</code> 中存储的 hash 值的高8 位进行加速匹配查找，对应的 key 以便找到对应的值。删除也是利用这个原理。</p><h2 id="bit-byte"><a href="#bit-byte" class="headerlink" title="bit byte"></a>bit byte</h2><p>bit(位) 是计算机最小的存储和发送接收单元，也就是二进制中的位，每一位上的数字为 0 或 1 使用进位制来表示数字。一位有两种组合方式 0 或 1，两位有 4 种组合方式 00 01 10 11 分别代表了数字 0 1 2 3 所以位可以表示成 2 的指数增长方式及 2 的 n 次方。所表示的数字是 0 ~ 2^n -1 因为是从 0 开始的。</p><blockquote><p>8 bits(位)等于 1 byte(字节)，可以用它来存储字符和字母，因为它表示数字的范围在 0 ~ 255 而 ASCLL 码在这个范围内。ASCLL 编码是将键盘的每个字符用一个数字进行代替。UNICODE 是一些语言的编码方式，通常每两个字节代表一个字符。</p></blockquote><p>byte 是信息存储的最小单元，一个字母表示一个字节。</p><p>换算关系: </p><p>1KB=2^10 bytes (1024 字节)</p><p>1MB= 2^20 bytes </p><p>1GB=2^30 bytes </p><p>1TB=2^40 bytes</p><p>在网络中说到的带宽指的是 bit ，网速说的是 Byte。换算关系为带宽除以 8 约等于网速，因为存在其他因素的影响。</p><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><p>计算机中的常用的进制表示为二进制，八进制，十进制和十六进制。二进制表示为0和1，逢2进1；八进制表示为0<del>7，逢8进1；十六进制表示为0</del>9,A-F(10~15)，逢16进1。</p><p>符号对应的进制：</p><p>b:二进制 </p><p>d:十进制 </p><p>o:八进制</p><p>x:十六进制</p><p>以十进制为参考，转换方式如下：</p><p>乘法</p><p>100(二进制) = (2^2 x 1)+(2^1 x 0)+(2^0 x 0) (十进制)</p><p>100(八进制) = (8^2 x 1)+(8^1 x 0)+(8^0 x 0) (十进制)</p><p>100(十六进制) = (16^2 x 1)+(16^1 x 0)+(16^0 x 0) (十进制)</p><p>除法(将余数倒写表示最终结果)</p><p>100(十进制) = 1100100(二进制)</p><p>转换过程：</p><p>(100/2 = 50 … 0) </p><p>(50/2 = 25 … 0) </p><p>(25/2 = 12 … 1)</p><p>(12/2 = 6 … 0)</p><p>(6/2 = 3 … 0)</p><p>(3/2 = 1 … 1)</p><p>(1/2 = 0 … 1)    </p><p>同理可得</p><p>100(十进制) = 144(八进制)</p><p>100(十进制) = 64(十六进制)</p><p>八进制，十六进制与二进制之间的转换：</p><p>八进制中的一位相当于二进制中的三位(2^3=8)</p><p>十六进制中的一位相当于二进制中的四位(2^4=8)</p><p>1001(二进制) = 11(八进制 [从低位开始转换，高位不足用0表示])</p><p>1001(二进制) = a(十六进制 [从低位开始转换，高位不足用0表示]) </p><p>可以将其转为十进制在进行转换</p><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>回调表现状态为当编写的库函数需要你传入的函数作为参数才能实现某种功能的时候，中间函数就使用到了你编写的函数，而这个过程就称为回调。</p><p>在这个机制中存在三个个体，主调者，中间者，被调用者。它们分别对应了主函数，中间函数（库函数），回调函数（传入中间函数参数的函数）。</p><p>回调函数在前端中为异步处理的方案。当一些耗时操作完成在执行回调里面的内容！在异步处理中使用回调会有一个问题就是回调地域。比如一个网络请求依赖另一个网络请求的结果！</p><h2 id="前端异步"><a href="#前端异步" class="headerlink" title="前端异步"></a>前端异步</h2><p>在使用回调函数进行异步操作会产生回调地域的问题，所以在 ES6 使用 Promise 来解决这个问题，对象有三个状态：pending（初始状态）, fulfilled(resolve 完成状态)，rejected(失败状态)，</p><p>pending可以转化为fulfilled或rejected并且只能转化一次，也就是说如果pending转化到fulfilled状态，那么就不能再转化到rejected。并且fulfilled和rejected状态只能由pending转化而来，两者之间不能互相转换。</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>建立缓存的方式：<code>HashMap</code>，<code>Redis</code>。</p><h2 id="Session-和-Cookie"><a href="#Session-和-Cookie" class="headerlink" title="Session 和 Cookie"></a>Session 和 Cookie</h2><p>cookie 是 web 应用中客户端（一般指浏览器）存储用户信息的方式，存在浏览器会存在一定的风险，所以可以使用 session 也就是在服务器保存用户的信息。请求时只用带上 <code>sessionID</code> 便可以找到对应的信息，可以将 session 存在文件，内存或数据库中。 </p><h2 id="Shell-中的-Source"><a href="#Shell-中的-Source" class="headerlink" title="Shell 中的 Source"></a>Shell 中的 Source</h2><p>source 是 shell 的内置命令，用来在当前 shell 环境（用户当前敲命令的终端）下执行某文件中的一组命令，可以简写为点(.)。</p><p>获取 shell 脚本(.sh)文件的路径和文件名可以在脚本文件中使用 <code>$BASH_SOURCE</code> 变量。</p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashecho "shell file position: $BASH_SOURCE"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="用户级线程、内核级线程"><a href="#用户级线程、内核级线程" class="headerlink" title="用户级线程、内核级线程"></a>用户级线程、内核级线程</h2><p>内核级线程就是操作系统调用的线程，而用户级线程是抽象出来给用户操作的一个线程。它和内核级线程是绑定关系，它对操作系统而言是不可见的。</p><h2 id="统一资源标识符格式"><a href="#统一资源标识符格式" class="headerlink" title="统一资源标识符格式"></a>统一资源标识符格式</h2><pre><code>[协议名]://[用户名]:[密码]@[主机名]:[端口]/[路径]?[查询参数]#[片段ID]</code></pre><h2 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h2><p>字节序，或字节顺序（”Endian”、”endianness” 或 “byte-order”），描述了计算机如何组织字节，组成对应的数字。</p><p>大端序：高位存在低地址（网络字节序已经为标准）</p><p>小端序：高位存在高地址（cpu中）</p><p>参考：</p><p><a href="https://www.ruanyifeng.com/blog/2016/11/byte-order.html" target="_blank" rel="noopener">理解字节序</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Endianness" target="_blank" rel="noopener">Endianness（字节序）</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机通用知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go并发模式:Context</title>
      <link href="/2020/07/25/go-bing-fa-mo-shi-context/"/>
      <url>/2020/07/25/go-bing-fa-mo-shi-context/</url>
      
        <content type="html"><![CDATA[<h1 id="Go并发模式：Context"><a href="#Go并发模式：Context" class="headerlink" title="Go并发模式：Context"></a>Go并发模式：Context</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>在 Go 服务器中，每一个传入请求都在一个单独的协程中进行处理。如果在该请求中需要处理其他耗时任务，或其他服务请求，例如数据库操作、RPC 服务；一般都会启动另外的协程去执行这些操作，此刻若传入请求被关闭或者超时，所有工作在该请求的其他协程都应该立刻推出，并且由系统释放它们使用的资源。在一些简单的场景下可以自己使用 channel 实现，但是在一些复杂的场景下，要想实现一种较好的模式代价太高，所以此时可以通过 1.7 版本引入标准库的 context 包去控制它们能正确退出和释放资源。</p><h2 id="Context结构"><a href="#Context结构" class="headerlink" title="Context结构"></a>Context结构</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// A Context carries a deadline, a cancelation signal, and other values across</span><span class="token comment" spellcheck="true">// API boundaries.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Context's methods may be called by multiple goroutines simultaneously.</span><span class="token keyword">type</span> Context <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Deadline returns the time when work done on behalf of this context</span>    <span class="token comment" spellcheck="true">// should be canceled. Deadline returns ok==false when no deadline is</span>    <span class="token comment" spellcheck="true">// set. Successive calls to Deadline return the same results.</span>    <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Done returns a channel that's closed when work done on behalf of this</span>    <span class="token comment" spellcheck="true">// context should be canceled. Done may return nil if this context can</span>    <span class="token comment" spellcheck="true">// never be canceled. Successive calls to Done return the same value.</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// If Done is not yet closed, Err returns nil.</span>    <span class="token comment" spellcheck="true">// If Done is closed, Err returns a non-nil error explaining why:</span>    <span class="token comment" spellcheck="true">// Canceled if the context was canceled</span>    <span class="token comment" spellcheck="true">// or DeadlineExceeded if the context's deadline passed.</span>    <span class="token comment" spellcheck="true">// After Err returns a non-nil error, successive calls to Err return the same error.</span>    <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>    <span class="token comment" spellcheck="true">// Value returns the value associated with this context for key, or nil</span>    <span class="token comment" spellcheck="true">// if no value is associated with key. Successive calls to Value with</span>    <span class="token comment" spellcheck="true">// the same key returns the same result.</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Context 是一个接口类型，其中包括了4个方法分别为 Deadline(最后期限[时间点])，Done(关闭信号)，Err(关闭原因)和 Value(context 传递中保存的值，如 session)。</p><p>使用规则：</p><ul><li>在各个不同的程序包之间保证接口一致性，可以用静态分析工具(go vet)追踪传播链路。</li><li>不再结构体类型中存储，显示声明函数需要 Context 类型。</li><li>Context 应该作为第一个参数，命名为 <code>ctx</code> 。</li><li>不能传递 <code>nil</code> Context，不确定使用哪个context , 使用 <code>context.TODO</code> 。</li><li><code>context value</code>用于传递过程和 <code>API</code> 的请求范围数据，而不用于将可选参数传递给函数。</li><li>context 是并发安全的。</li></ul><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">DoSomething</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> arg Arg<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// use ctx ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以通过 <code>context.Background()</code> 方法创建使用在主函数，<code>init</code> 函数和测试中，通常作为根节点 context。还可以通过 <code>context.TODO()</code> 方法创建，在不确定使用哪个 context 时。</p><h2 id="Context使用"><a href="#Context使用" class="headerlink" title="Context使用"></a>Context使用</h2><p>在 context 包中提供了以下4中方法，让我们使用：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">WithCancel</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">)</span> <span class="token punctuation">(</span>ctx Context<span class="token punctuation">,</span> cancel CancelFunc<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">WithDeadline</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token punctuation">(</span>Context<span class="token punctuation">,</span> CancelFunc<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">WithTimeout</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">(</span>Context<span class="token punctuation">,</span> CancelFunc<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">WithValue</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> Context<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>WithCancel</code> 方法返回一个可以取消的 context ，当需要取消时调用 cancel 方法。<code>WithTimeout</code> 和 <code>WithDeadline</code> 方法可以设置超时 context 自动取消，也可以手动关闭。 <code>WithValue</code> 方法可以设置在多个 <code>goroutine</code> 中使用的值。</p><p>示例代码：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">select</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"timeout"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"return"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>        <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main exit"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Context-源码分析和细节说明"><a href="#Context-源码分析和细节说明" class="headerlink" title="Context 源码分析和细节说明"></a>Context 源码分析和细节说明</h2><p>在 context 包中定义了两个错误类型</p><ul><li><code>Canceled</code> 表示当 context 已经关闭时，调用了 <code>Context.Err</code> 方法返回的错误。</li><li><code>DeadlineExceeded</code> 表示当超过 context 的截至时间，调用了 <code>Context.Err</code> 方法返回的错误。</li></ul><p><code>emptyCtx</code> 是实现了Context 接口的不能关闭，没有值，没有截止时间的类型。它不是一个结构体，因为这种类型的变量不能是同一种类型。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> emptyCtx <span class="token builtin">int</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span>ok <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>emptyCtx<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> e <span class="token punctuation">{</span>    <span class="token keyword">case</span> background<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"context.Background"</span>    <span class="token keyword">case</span> todo<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"context.TODO"</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"unknown empty Context"</span><span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    background <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>emptyCtx<span class="token punctuation">)</span>    todo       <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>emptyCtx<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>context.Backgroud</code> 方法返回的是 context 包中的 <code>backgroud</code>，它通常用在 main 函数，初始化，测试和传入请求的顶层 Context 即跟节点。</p><p><code>context.TODO</code>  方法返回的是 context 包中的 <code>todo</code>，它通常是在不确定使用哪种 Context 或不可用时。</p><blockquote><p>注：because the surrounding function has not yet been extended to accept a Context parameter</p><p>上面是官方对<code>context.TODO</code> 在不可用时的说明，暂时还没有理解到什么意思。</p></blockquote><p><code>CancelFunc</code> 是一个类型，用于结束工作，它不会等待工作完成在调用。若连续调用，不再生效。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> CancelFunc <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>closedchan</code> 是一个可重用的已经关闭的 channel。 </p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">var</span> closedchan <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">close</span><span class="token punctuation">(</span>closedchan<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>canceler</code> 是一个接口，是一个 context 类型能够被直接关闭，<code>*cancelCtx</code> 和 <code>*timerCtx</code> 实现了该接口。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> canceler <span class="token keyword">interface</span><span class="token punctuation">{</span>    <span class="token function">cancel</span><span class="token punctuation">(</span>removeFromParent <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span>    <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>propagateCancel</code> 方法的作用是当父 context 被关闭时它的子 context 同时被取消。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">propagateCancel</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">,</span> child canceler<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> parent<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token comment" spellcheck="true">// 父节点不能被关闭(当 context 为 backgroud 和 todo 时)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> p<span class="token punctuation">,</span> ok <span class="token operator">:=</span> <span class="token function">parentCancelCtx</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 找到为 *cancelCtx 类型的父 context </span>        p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> p<span class="token punctuation">.</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> p<span class="token punctuation">.</span>children <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                p<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>canceler<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            p<span class="token punctuation">.</span>children<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">select</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token operator">&lt;-</span>parent<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">case</span> <span class="token operator">&lt;-</span> child<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// parentCancelCtx follows a chain of parent references until it finds a</span><span class="token comment" spellcheck="true">// *cancelCtx. This function understands how each of the concrete types in this</span><span class="token comment" spellcheck="true">// package represents its parent.</span><span class="token keyword">func</span> <span class="token function">parentCancelCtx</span><span class="token punctuation">(</span>parent Context<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>cancelCtx<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> c <span class="token operator">:=</span> parent<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token operator">*</span>cancelCtx<span class="token punctuation">:</span>            <span class="token keyword">return</span> c<span class="token punctuation">,</span> <span class="token boolean">true</span>        <span class="token keyword">case</span> <span class="token operator">*</span>timerCtx<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">&amp;</span>c<span class="token punctuation">.</span>cancelCtx<span class="token punctuation">,</span> <span class="token boolean">true</span>        <span class="token keyword">case</span> <span class="token operator">*</span>valueCtx<span class="token punctuation">:</span>            parent <span class="token operator">=</span> c<span class="token punctuation">.</span>Context        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>cancelCtx</code> 用来关闭 context ，实现了 <code>canceler</code> 接口的子 context 也会被关闭 。它嵌入了 Context 接口，实现了 <code>Done</code> 和 <code>Err</code> 方法有一个互斥锁用于保护 done，children，err 字段。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> cancelCtx <span class="token keyword">struct</span><span class="token punctuation">{</span>    Context     mu sync<span class="token punctuation">.</span>Mutex <span class="token comment" spellcheck="true">// protects following fields </span>    done <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// created lazily, closed by first cancel call </span>    children <span class="token keyword">map</span><span class="token punctuation">[</span>canceler<span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// set to nil by the first cancel call</span>    err <span class="token builtin">error</span> <span class="token comment" spellcheck="true">// set to non-nil by the first cancel call</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span> <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>done <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span>done <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    d <span class="token operator">:=</span> c<span class="token punctuation">.</span>done    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> d<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span> <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    err <span class="token operator">:=</span> c<span class="token punctuation">.</span>err    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%v.WithCancel"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Context<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cancelCtx<span class="token punctuation">)</span> <span class="token function">cancel</span><span class="token punctuation">(</span>removeFromParent <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"context: internal error: missing cancel error"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token comment" spellcheck="true">// already canceled</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">.</span>err <span class="token operator">=</span> err    <span class="token keyword">if</span> c<span class="token punctuation">.</span>done <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span>done <span class="token operator">=</span> closedchan    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>done<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> child <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>children <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// NOTE: acquiring the child's lock while holding parent's lock.</span>        child<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token boolean">nil</span>    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> removeFromParent <span class="token punctuation">{</span>        <span class="token function">removeChild</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>timerCtx</code> 嵌入了 <code>cancelCtx</code>、<code>timer</code> 计时器 、<code>deadline</code> 截止时间。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> timerCtx <span class="token keyword">struct</span> <span class="token punctuation">{</span>    cancelCtx    timer <span class="token operator">*</span>time<span class="token punctuation">.</span>Timer <span class="token comment" spellcheck="true">// Under cancelCtx.mu.</span>    deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>timerCtx<span class="token punctuation">)</span> <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> c<span class="token punctuation">.</span>deadline<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>timerCtx<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%v.WithDeadline(%s [%s])"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>cancelCtx<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c<span class="token punctuation">.</span>deadline<span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>deadline<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>timerCtx<span class="token punctuation">)</span> <span class="token function">cancel</span><span class="token punctuation">(</span>removeFromParent <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c<span class="token punctuation">.</span>cancelCtx<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token keyword">if</span> removeFromParent <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Remove this timerCtx from its parent cancelCtx's children.</span>        <span class="token function">removeChild</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>cancelCtx<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>timer <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span>timer<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>valueCtx</code> 携带了一个键值对，实现了 Context 的 Value 方法。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// A valueCtx carries a key-value pair. It implements Value for that key and</span><span class="token comment" spellcheck="true">// delegates all other calls to the embedded Context.</span><span class="token keyword">type</span> valueCtx <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Context    key<span class="token punctuation">,</span> val <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>valueCtx<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%v.WithValue(%#v, %#v)"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> c<span class="token punctuation">.</span>key<span class="token punctuation">,</span> c<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>valueCtx<span class="token punctuation">)</span> <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>key <span class="token operator">==</span> key <span class="token punctuation">{</span>        <span class="token keyword">return</span> c<span class="token punctuation">.</span>val    <span class="token punctuation">}</span>    <span class="token keyword">return</span> c<span class="token punctuation">.</span>Context<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从整个 context 包中的实现过程来看，通过 <code>cancelCtx</code> 基础结构衍生出<code>timerCtx</code> 和 <code>valueCtx</code> 结构。通过 <code>cancelFunc</code> 方法关闭当前 context 以及它的子 context(如果存在)。对整个 context 树结构进行控制，通过 <code>context.Backgroud</code> 作为跟节点，通过 <code>WithCancel</code>、<code>WithDeadline</code>、 <code>WithTimeout</code>、<code>WithValue</code> 派生子 context ，然后在调用链上传递 context 以达到控制当前工作何时结束以及正确释放资源。</p><p>其中重点在于其 <code>context.Done</code> 方法，即何时收到关闭信号。用法如下</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">DoSomething</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> arg Arg<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">select</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"context is canceled"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">Tick</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"time out"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上是自己总结的，其他的细节说明不想写了直接贴参考链接：</p><p><a href="https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-context/" target="_blank" rel="noopener">上下文 Context</a></p><p><a href="https://blog.golang.org/context" target="_blank" rel="noopener">https://blog.golang.org/context</a></p><p><a href="https://blog.golang.org/pipelines" target="_blank" rel="noopener">https://blog.golang.org/pipelines</a></p><p><a href="https://www.sohamkamani.com/golang/2018-06-17-golang-using-context-cancellation/" target="_blank" rel="noopener">https://www.sohamkamani.com/golang/2018-06-17-golang-using-context-cancellation/</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Go并发模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高性能MySQL读书笔记</title>
      <link href="/2020/07/23/gao-xing-neng-mysql-du-shu-bi-ji/"/>
      <url>/2020/07/23/gao-xing-neng-mysql-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="高性能MySQL读书笔记"><a href="#高性能MySQL读书笔记" class="headerlink" title="高性能MySQL读书笔记"></a>高性能MySQL读书笔记</h1><h2 id="Chapter1"><a href="#Chapter1" class="headerlink" title="Chapter1"></a>Chapter1</h2><p>MySQL的架构分为三层：第一层是客户端，通过网络连接服务端获取对应的数据。第二层是它的核心架构设计包括解析器，查询缓存，优化器。第三层是存储引擎，引擎之间不会互相通信，通过 API 接口向上层暴露端口来进行数据的操作。</p><p>在MySQL中的并发控制通过两种类型的锁来进行解决：第一种是共享锁（读锁）；第二种是排他锁（写锁）。MySQL中锁是一种资源，所以针对不同的应用场景包括了两种比较重要的锁策略模式——表锁和行锁。这两种策略前者开销小，但是并发性能不如后者。并且行锁只在存储引擎层实现了，而表锁在服务器层和存储引擎层都实现了。</p><p>事务是一组原子性SQL的操作，要么全部成功，要么全部失败。事务处理系统包括 ACID 表示原子型(atomicity)、一致性(consistency)、隔离型(isolation)、持久性(durability)。</p><p>原子性表示一系列 SQL 操作必须看成一个整体，要么全部成功，要么全部失败。一致性表示在执行事务时发生了意外情况，操作不会更新到数据库中。</p><p>在事务并发操作可能出现下面的问题：</p><ol><li>脏读（读取了其他事务未提交的数据）</li><li>不可重复读（多次读取同一个事务，数据内容不一致）</li><li>幻读（多次读取同一个事务，数据总量不一致）</li></ol><p>不可重复读和幻读的区域：</p><ul><li>不可重复读是读取了其他事务更改的数据，针对 update 操作。（使用行级锁解决）</li><li>幻读是读取了其他事务新增或减少的数据，针对 insert 和 delete 操作。（使用表锁解决）</li></ul><p>隔离性中包括了不同的事务隔离级别：</p><p>未提交读：表示当前事务中的修改即使没提交，对其他事务也是可见的，其他事务可以读取未提交的数据，表示脏读。(实际应用中很少用到该隔离级别)</p><p>提交读：（大部分数据库的事务隔离级别都是默认该级别但是MySQL不是）一个事务从开始到提交前对其他事务都是不可见的也被称为不可重复读，因为两次同样的查询操作可能得到不同的查询结果。该事务隔离级别会导致不可重复读问题。</p><p>可重复读：解决了不可重复读问题，保证了在同一个事务中多次读取同样的记录是一样的。但是不能避免幻读。 MySQL的存储引擎 InnoDB 和 XtraDB 通过多版本控制 Multiversion Concurrency Control 解决了幻读的问题。(MySQL事务的默认隔离级别)</p><p>可串行化：事务的最高隔离级别，强制事务的串行执行，避免了幻读问题。</p><p>事务执行过程中有可能会因为资源竞争的问题发生死锁，每个引擎的处理方式不同 InnoDB 的处理方式是将事务超时后将持有最少行锁的事务进行回滚，死锁发生后只需要将发生死锁的事务回滚即可。</p><p>事务日志是可以帮助提交事务的效率，它是将数据的修改进行拷贝记录到事务日志然后在将其持久化到磁盘顺序 io上，所以相对于之前更快。而数据在后台慢慢持久化到磁盘中。</p><p>MySQL中提供了事务性的存储引擎：InnoDB 和 NDB Cluster 还有一些第三方存储引擎页支持事务 XtraDB 和 PBXT。MySQL默认采用自动提交模式，也就是没有显示采用事务将自动进行提交。</p><h2 id="Chapter5"><a href="#Chapter5" class="headerlink" title="Chapter5"></a>Chapter5</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>索引可以类比一本书的目录，为了找到特定的章节可以先查看书的目录。在MySQL中，存储引擎使用相同的方式使用索引，现在索引出找到对应的值，然后根据匹配的索引找到对应的数据行。在数据量较大时，利用这种方式，可以让查询效率提高很多的数量级。</p><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><p>索引是在存储引擎层实现的，不同的存储引擎的索引类型一定相同，并且相同类型索引实现也不一定相同。</p>]]></content>
      
      
      <categories>
          
          <category> 存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 关系型数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cocos creator</title>
      <link href="/2020/07/03/cocos-creator/"/>
      <url>/2020/07/03/cocos-creator/</url>
      
        <content type="html"><![CDATA[<h1 id="Cocos-Creator学习笔记"><a href="#Cocos-Creator学习笔记" class="headerlink" title="Cocos-Creator学习笔记"></a>Cocos-Creator学习笔记</h1><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><pre><code>ProjectName（项目文件夹）├──assets├──library├──local├──packages├──settings├──temp└──project.json</code></pre><p><code>assets</code> 用来放置游戏中所有的本地资源文件、脚本和第三方库。只有在 <code>assets</code> 目录下的内容才能显示在 <strong>资源管理器</strong> 中。<code>assets</code> 中的每个文件在导入项目后都会生成一个相同名字的 <code>.meta</code> 文件，用于存储对应的资源配置和索引信息。<code>.meta</code> 文件需要一并提交到版本控制系统。</p><p><code>project.json</code> 文件和 <code>assets</code> 文件夹一起，作为验证 Cocos Creator 项目合法性的标志，只有包括了这两个内容的文件夹才能作为 Cocos Creator 项目打开。开发者不需要关心里面的内容。</p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>cocos creator 工作流程是以数据驱动和场景为核心。</p><h3 id="编辑器基础"><a href="#编辑器基础" class="headerlink" title="编辑器基础"></a>编辑器基础</h3><p><strong>层级管理器</strong> 用树状列表的形式展示场景中的所有节点和它们的层级关系，所有在 <strong>场景编辑器</strong> 中看到的内容都可以在 <strong>层级管理器</strong> 中找到对应的节点条目，在编辑场景时这两个面板的内容会同步显示，一般我们也会同时使用这两个面板来搭建场景。</p>]]></content>
      
      
      <categories>
          
          <category> 游戏引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cocos creator </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用工具</title>
      <link href="/2020/05/20/shi-yong-gong-ju/"/>
      <url>/2020/05/20/shi-yong-gong-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h1><p>自己在平时的开发过程中，发现的一些比较好用的一些网站和实用工具，仅用于学习使用。</p><p>域名服务商：<a href="https://www.namesilo.com/" target="_blank" rel="noopener">NameSilo</a></p><p>服务器：<a href="https://manage.hostdare.com/" target="_blank" rel="noopener">HostDare</a></p><p>CDN加速：<a href="https://www.cloudflare.com/" target="_blank" rel="noopener">Cloudflare</a></p><p>邮箱：<a href="https://mail.google.com/" target="_blank" rel="noopener">Gmail</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WingsOfLiberty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gRPC框架</title>
      <link href="/2020/05/16/grpc-kuang-jia/"/>
      <url>/2020/05/16/grpc-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="gRPC框架"><a href="#gRPC框架" class="headerlink" title="gRPC框架"></a>gRPC框架</h1><h3 id="gRPC简介"><a href="#gRPC简介" class="headerlink" title="gRPC简介"></a>gRPC简介</h3><h4 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h4><blockquote><p>RPC 全称远程过程调用（Remote Procedure Call），是一种像本地调用函数的一种平台无关性的接口调用的实现方案。</p></blockquote><p>简单来说就是可以调用另外一个服务器上的方法.</p><h4 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h4><p>gRPC 架构为 CS , protocol buffer 作为客户端和服务端的 Interface Definition Language （IDL） 来描述服务及方法的请求参数和响应结构及消息数据序列化.它支持跨平台和多语言的特性,用 go 写的服务 API,可以通过其他语言调用.</p><p>gRPC 核心思想和其他 RPC 架构一样，围绕服务定义，包含有请求参数和响应值的方法，服务端实现服务接口，客户端使用存根进行调用。</p><h3 id="Protocol-Buffers"><a href="#Protocol-Buffers" class="headerlink" title="Protocol Buffers"></a>Protocol Buffers</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote><p>Protocol Buffers 是一种平台无关，语言无关的可扩展的用于序列化数据类似于 <code>XML</code> 的接口定义语言（Interface Definition Language）。</p></blockquote><h4 id="语法（proto3）"><a href="#语法（proto3）" class="headerlink" title="语法（proto3）"></a>语法（proto3）</h4><h5 id="使用-message-类型进行结构化数据的定义"><a href="#使用-message-类型进行结构化数据的定义" class="headerlink" title="使用 message 类型进行结构化数据的定义"></a>使用 message 类型进行结构化数据的定义</h5><pre class="line-numbers language-protobuf"><code class="language-protobuf">syntax <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span><span class="token keyword">message</span> SerachRequest<span class="token punctuation">{</span>    <span class="token primitive symbol">string</span> query <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token primitive symbol">int32</span> page_number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token primitive symbol">int32</span> result_per_page <span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明</strong>：</p><p>第一行指定了 <code>Protocol Buffers</code> 的语法，现在有 <code>proto2</code> 和 <code>proto3</code> ，第一行必须表明语法。每个字段都是一个键值对，并且还要标明每个字段的唯一数值。字段的数值在 1-15 编码占一个字节，16-2047 占2个字节。可以指定字段的规则，单个（默认）或者多个（repeated）。</p><h5 id="文件的注释风格"><a href="#文件的注释风格" class="headerlink" title="文件的注释风格"></a>文件的注释风格</h5><p>使用的 c/c++ 的 // 或 /* .. */，前者为单行注释，后者为多行注释。</p><h5 id="Protocol-Buffers-编译成-Go-语言类型对应表"><a href="#Protocol-Buffers-编译成-Go-语言类型对应表" class="headerlink" title="Protocol Buffers 编译成 Go 语言类型对应表"></a>Protocol Buffers 编译成 Go 语言类型对应表</h5><table><thead><tr><th align="center">.proto Type</th><th align="center">Notes</th><th align="center">Go Type</th></tr></thead><tbody><tr><td align="center">double</td><td align="center"></td><td align="center">float64</td></tr><tr><td align="center">float</td><td align="center"></td><td align="center">float32</td></tr><tr><td align="center">int32</td><td align="center">Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead.</td><td align="center">int32</td></tr><tr><td align="center">int64</td><td align="center">Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead.</td><td align="center">int64</td></tr><tr><td align="center">uint32</td><td align="center">Uses variable-length encoding.</td><td align="center">uint32</td></tr><tr><td align="center">uint64</td><td align="center">Uses variable-length encoding.</td><td align="center">uint64</td></tr><tr><td align="center">sint32</td><td align="center">Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.</td><td align="center">int32</td></tr><tr><td align="center">sint64</td><td align="center">Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.</td><td align="center">int64</td></tr><tr><td align="center">fixed32</td><td align="center">Always four bytes. More efficient than uint32 if values are often greater than 228.</td><td align="center">uint32</td></tr><tr><td align="center">fixed64</td><td align="center">Always eight bytes. More efficient than uint64 if values are often greater than 256.</td><td align="center">uint64</td></tr><tr><td align="center">sfixed32</td><td align="center">Always four bytes.</td><td align="center">int32</td></tr><tr><td align="center">sfixed64</td><td align="center">Always eight bytes.</td><td align="center">int64</td></tr><tr><td align="center">bool</td><td align="center"></td><td align="center">bool</td></tr><tr><td align="center">string</td><td align="center">A string must always contain UTF-8 encoded or 7-bit ASCII text, and cannot be longer than 232.</td><td align="center">string</td></tr><tr><td align="center">bytes</td><td align="center">May contain any arbitrary sequence of bytes no longer than 232.</td><td align="center">[]byte</td></tr></tbody></table><h5 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h5><p>如果在编码时没有指定其字段的值则会使用默认值，string 默认值为空字符串， bytes 默认值为空 bytes, <code>bools</code> 默认值为 false,数值类型的默认值为 0。message 类型为对应语言的默认值。</p><blockquote><p><strong>注意</strong>: 对于标量 message 字段，一旦被解析就无法显示设置默认值。</p></blockquote><h5 id="保留字段"><a href="#保留字段" class="headerlink" title="保留字段"></a>保留字段</h5><pre class="line-numbers language-protobuf"><code class="language-protobuf"><span class="token keyword">enum</span> Foo <span class="token punctuation">{</span>  <span class="token builtin">reserved</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">9</span> to <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">40</span> to max<span class="token punctuation">;</span>  <span class="token builtin">reserved</span> <span class="token string">"FOO"</span><span class="token punctuation">,</span> <span class="token string">"BAR"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>保留字段主要是考虑到兼容性，避免删除字段或注释字段。如一方使用了删除或注释字段而另一方没有使用时，而出现的意外情况。使用保留字段，编译过程会提示错误。</p><h5 id="使用其他-message-类型"><a href="#使用其他-message-类型" class="headerlink" title="使用其他 message 类型"></a>使用其他 message 类型</h5><pre class="line-numbers language-protobuf"><code class="language-protobuf"><span class="token keyword">message</span> SearchResponse <span class="token punctuation">{</span>    <span class="token builtin">repeated</span> Result results <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">message</span> Result <span class="token punctuation">{</span>    <span class="token primitive symbol">string</span> url <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token primitive symbol">string</span> titile <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token builtin">repeated</span> <span class="token primitive symbol">string</span> snippets <span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="map-类型"><a href="#map-类型" class="headerlink" title="map 类型"></a>map 类型</h5><pre class="line-numbers language-protobuf"><code class="language-protobuf">map<span class="token operator">&lt;</span><span class="token primitive symbol">string</span><span class="token punctuation">,</span> Project<span class="token operator">></span> projects <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="RPC-service-类型"><a href="#RPC-service-类型" class="headerlink" title="RPC  service 类型"></a>RPC  service 类型</h5><pre class="line-numbers language-protobuf"><code class="language-protobuf">service SearchService <span class="token punctuation">{</span>  rpc <span class="token function">Search</span> <span class="token punctuation">(</span>SearchRequest<span class="token punctuation">)</span> <span class="token function">returns</span> <span class="token punctuation">(</span>SearchResponse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h4><p>生成对应语言的代码参考<a href="https://developers.google.com/protocol-buffers/docs/reference/overview" target="_blank" rel="noopener">官网</a></p><p>安装 protoc 编译器</p><blockquote><p>地址：<a href="https://github.com/protocolbuffers/protobuf/releases" target="_blank" rel="noopener">https://github.com/protocolbuffers/protobuf/releases</a></p></blockquote><h5 id="安装-go-插件"><a href="#安装-go-插件" class="headerlink" title="安装 go 插件"></a>安装 go 插件</h5><p><code>go install google.golang.org/protobuf/cmd/protoc-gen-go</code> </p><blockquote><p>注意：官网推荐使用上面的插件。</p></blockquote><h5 id="编译-go-文件"><a href="#编译-go-文件" class="headerlink" title="编译 go 文件"></a>编译 go 文件</h5><p><code>protoc -I=$SRC_DIR --go_out=$DST_DIR   $SRC_DIR/addressbook.proto</code></p><p><code>protoc --proto_path=$SRC_DIR --go_out=$DST_DIR --go_opt=paths=source_relative  $SRC_DIR/addressbook.proto</code> </p><p>说明：</p><p><code>- I</code> 和 <code>--proto_path</code> 都表示  <code>.proto</code> 文件的所在位置，如果不指定默认为当前位置。</p><p><code>--go_out</code> 表示生成的 Go 代码的输出位置。</p><p><code>$SRC_DIR/addressbook.proto</code> 表示要编译的 <code>.proto</code> 文件。</p><p><code>--go_opt</code> 表示生成 Go 代码的可选项。<a href="https://developers.google.com/protocol-buffers/docs/reference/go-generated#invocation" target="_blank" rel="noopener">详情</a></p><p>使用第二种方式生成代码的参数说明：</p><p>一个良好的符合 Go 风格中的 <code>.proto</code> 文件中理应加上 <code>option go_package = &quot;[go module name]/[generate code output path]...&quot;</code> 格式行即完整的生成文件输出位置。</p><p><code>--proto_path</code> 或 <code>-I</code> 与输入的 <code>.proto</code> 文件相关，<code>--go_opt=paths=source_relavtive</code> 是相对于 <code>--go_out</code> 的路径。</p><p>按照以上示例会在 <code>$DST_DIR</code> 目录下生成 <code>addressbook.pb.go</code> 文件。</p><h4 id="踩坑-protoc-版本为-v3-14-0"><a href="#踩坑-protoc-版本为-v3-14-0" class="headerlink" title="踩坑(protoc 版本为 v3.14.0)"></a>踩坑(protoc 版本为 v3.14.0)</h4><ul><li>当 option 不存在 <code>.proto</code> 文件中时，生成文件的包名是安装文件的名称进行生成的，具体文件名参考生成文件。当存在 <code>option go_pakcage=bar</code> 或<code>option go_pakcage=github.com/far/bar</code> 包名为 bar   。</li><li>option 选项可以指定文件生成对应语言文件的文件位置和包名，现在规范把 options 加上以指定位置和包名。<code>option go_package = &quot;路径;包名&quot;;</code> 这是其他语言的风格，还是按照 go 的风格进行书写如：<code>option go_package=github.com/example/hello</code> </li><li>执行<code>protoc --proto_path=protos/service --go_out=pb protos/service/test.service.v1.proto</code> 若在 <code>test.service.v1.proto</code> 文件中存在 <code>option go_package=example.com/foo/bar</code> 代码,则会在 pb 目录下自动生成 <code>example.com/foo/bar/test.service.v1.pb.go</code>。若 <code>--go_out</code> 所在的 pb 目录不存在, 不会自动生成。</li><li>执行 <code>protoc --proto_path=protos/service --go_out=pb protos/service/test.service.v1.proto</code> 若在 <code>.proto</code> 文件中存在 <code>option go_package=bar</code> 选项时或不存在该选项时，会相对于 <code>--proto_path</code> 所指目录生成文件。该命令会在 pb 目录下生成 <code>test.service.v1.pb.go</code> 文件,若 <code>--proto_path=protos</code> ,则生成的内容会改为 <code>service/test.service.v1.pb.go</code>。</li><li><code>--go_opt=paths=source_relative</code> 表示相对于 <code>--proto_path</code> 或 <code>-I</code> 路径生成目录结构或代码。如执行 <code>protoc --proto_path=. --go_out=pb --go_opt=paths=source_relative protos/service/test.service.v1.proto</code>命令时，会在 pb 目录下自动生成 <code>protos/service/test.service.v1.pb.go</code> ；若改成 <code>protoc --proto_path=protos/service --go_out=pb --go_opt=paths=source_relative protos/service/test.service.v1.proto</code> 命令，则在 pb 目录下自会生成 <code>test.service.v1.proto</code> 文件。</li></ul><h3 id="gRPC-使用"><a href="#gRPC-使用" class="headerlink" title="gRPC 使用"></a>gRPC 使用</h3><p> <a href="https://pkg.go.dev/google.golang.org/grpc" target="_blank" rel="noopener">API文档</a></p><h4 id="获取-gRPC-包"><a href="#获取-gRPC-包" class="headerlink" title="获取 gRPC 包"></a>获取 gRPC 包</h4><p><code>go get google.golang.org/grpc</code></p><h4 id="安装生成-gRPC-代码插件"><a href="#安装生成-gRPC-代码插件" class="headerlink" title="安装生成 gRPC 代码插件"></a>安装生成 gRPC 代码插件</h4><p><code>go get google.golang.org/grpc/cmd/protoc-gen-go-grpc</code></p><h4 id="生成-gRPC-代码"><a href="#生成-gRPC-代码" class="headerlink" title="生成 gRPC 代码"></a>生成 gRPC 代码</h4><p><code>protoc -I $SRC --go_out=plugins=grpc:$DST [filepath]</code></p><blockquote><p>注意：上面能够生成 grpc 代码，是因为 protoc-gen-go 插件中内置了生成 gRPC 代码的插件（2021.1.7补充）</p></blockquote><p><code>protoc --go_out=. --go_opt=paths=source_relative \    --go-grpc_out=. --go-grpc_opt=paths=source_relative \    helloworld/helloworld.proto</code></p><p>推荐使用下面的命令生成代码。</p><p>两种命令生成方式解释说明</p><p><a href="https://grpc.io/docs/languages/go/generated-code/#packages-and-namespaces" target="_blank" rel="noopener">grpc官网</a></p><p><a href="https://pkg.go.dev/google.golang.org/grpc/cmd/protoc-gen-go-grpc" target="_blank" rel="noopener">gRPC插件readme</a></p><p>说明</p><h4 id="通过-proto-文件定义服务-gRPC-允许四种服务方法。"><a href="#通过-proto-文件定义服务-gRPC-允许四种服务方法。" class="headerlink" title="通过 .proto 文件定义服务,gRPC 允许四种服务方法。"></a>通过 .proto 文件定义服务,gRPC 允许四种服务方法。</h4><h5 id="简单-RPC，就像普通函数调用，客户端发送存根到服务器，等待服务器响应。"><a href="#简单-RPC，就像普通函数调用，客户端发送存根到服务器，等待服务器响应。" class="headerlink" title="简单 RPC，就像普通函数调用，客户端发送存根到服务器，等待服务器响应。"></a>简单 RPC，就像普通函数调用，客户端发送存根到服务器，等待服务器响应。</h5><pre class="line-numbers language-protobuf"><code class="language-protobuf">service RouteGuide<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// a simple RPC method</span>    rpc <span class="token function">GetFeature</span> <span class="token punctuation">(</span>Point<span class="token punctuation">)</span> <span class="token function">returns</span> <span class="token punctuation">(</span>Feature<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="服务器端流式-RPC，客户端发送请求到服务器，获取服务器数据流直到没有数据返回。"><a href="#服务器端流式-RPC，客户端发送请求到服务器，获取服务器数据流直到没有数据返回。" class="headerlink" title="服务器端流式 RPC，客户端发送请求到服务器，获取服务器数据流直到没有数据返回。"></a>服务器端流式 RPC，客户端发送请求到服务器，获取服务器数据流直到没有数据返回。</h5><pre class="line-numbers language-protobuf"><code class="language-protobuf">service RouteGuide<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// a server-side streaming RPC method</span>    rpc <span class="token function">ListFeature</span> <span class="token punctuation">(</span>Rectangle<span class="token punctuation">)</span> <span class="token function">returns</span> <span class="token punctuation">(</span>stream Feature<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="客户端流式-RPC，客户端使用提供的流，写消息序列到服务器。一旦完成消息队列的写入，就等到服务器将它们全部读取然后响应。"><a href="#客户端流式-RPC，客户端使用提供的流，写消息序列到服务器。一旦完成消息队列的写入，就等到服务器将它们全部读取然后响应。" class="headerlink" title="客户端流式 RPC，客户端使用提供的流，写消息序列到服务器。一旦完成消息队列的写入，就等到服务器将它们全部读取然后响应。"></a>客户端流式 RPC，客户端使用提供的流，写消息序列到服务器。一旦完成消息队列的写入，就等到服务器将它们全部读取然后响应。</h5><pre class="line-numbers language-protobuf"><code class="language-protobuf">service RouteGuide<span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// a client-side streaming RPC method</span>    rpc <span class="token function">RecordRoute</span><span class="token punctuation">(</span>stream Point<span class="token punctuation">)</span> <span class="token function">returns</span> <span class="token punctuation">(</span>RouteSummary<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="双向流式-RPC，客户端和服务器都是独立的利用读写流，写一串消息到对方。所以它们可以按照自己的顺序进行读写。"><a href="#双向流式-RPC，客户端和服务器都是独立的利用读写流，写一串消息到对方。所以它们可以按照自己的顺序进行读写。" class="headerlink" title="双向流式 RPC，客户端和服务器都是独立的利用读写流，写一串消息到对方。所以它们可以按照自己的顺序进行读写。"></a>双向流式 RPC，客户端和服务器都是独立的利用读写流，写一串消息到对方。所以它们可以按照自己的顺序进行读写。</h5><pre class="line-numbers language-protobuf"><code class="language-protobuf">service RouteGuide<span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// a bidirectional streaming RPC</span>    rpc <span class="token function">RouteChat</span><span class="token punctuation">(</span>stream RouteNote<span class="token punctuation">)</span> <span class="token function">returns</span> <span class="token punctuation">(</span>stream RouteNote<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>gRPC 服务的生命周期为：</p><ol><li>客户端调用 RPC 方法，服务器接收到带有客户端元信息，方法名和超时时间（存在的话）的 RPC 被执行。</li><li>服务器立马返回服务器的初始元数据（在任何响应之前发送）或等待接收客户端的请求消息，谁先发生特定与应用程序。</li><li>服务器接收到客户端请求消息后，填充响应消息结构和对应的状态信息（状态码和可选消息）返回。</li><li>完成调用</li></ol><p>对于客户端流、服务器流或双向流声明周期大体相同，区别在于：</p><ol><li>服务器流：服务端等待接收到客户端消息后，发送完所有响应数据，完成调用；客户端等待服务端响应后完成调用。</li><li>客户端流：服务端通常（不是必须）等待接收到所有消息后，响应消息，完成调用；客户端发送完所有的消息后完成调用。</li><li>双向流：它们是相互独立的对象，什么时候完成取决于自身。</li></ol><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p><a href="https://github.com/grpc/grpc-go/tree/master/examples/route_guide" target="_blank" rel="noopener">示例代码仓库</a></p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li>gRPC 是CS结构，对于同步和异步问题在大部分语言中有两种方式实现，具体详情查看相关语言的具体实现。</li><li>gRPC 在 Go 中的实现是阻塞同步模式。</li><li>gRPC 使用 Protocol Buffers 作为接口定义语言。</li><li>gRPC 服务调用可以指定超时和元数据。元数据为一组键值对，键为字符串，值为字符串数组。在 Go 中指定超时传递是用过 context 来指定的，其中它的传递过程是可以跨进程的，这是因为它利用了它在 HTTP2 协议头中加入了 <code>grpc-timeout</code> ，通过在服务器端解析协议中的超时标记达到效果。</li></ul><h3 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h3><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p><a href="https://grpc.io/docs/guides/error/#standard-error-model" target="_blank" rel="noopener">官网说明</a></p><h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><h4 id="版本日志"><a href="#版本日志" class="headerlink" title="版本日志"></a>版本日志</h4><ul><li>第一版：2020 年 05 月 16 日</li><li>第二版：2021 年 01 月 08 日</li><li>第三版：2021 年 02 月 23 日（增加 protoc 工具对生成 grpc 代码的各个参数说明）</li></ul><p>credentials 证书 </p><p>authentication 身份认证、认证方式 </p><p>authorization 授权</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RPC框架 </tag>
            
            <tag> gRPC </tag>
            
            <tag> Protobuf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EveryDay English</title>
      <link href="/2020/05/13/everyday-english/"/>
      <url>/2020/05/13/everyday-english/</url>
      
        <content type="html"><![CDATA[<h1 id="Everyday-English"><a href="#Everyday-English" class="headerlink" title="Everyday English"></a>Everyday English</h1><h2 id="Year-2020-Month-05"><a href="#Year-2020-Month-05" class="headerlink" title="Year: 2020 Month: 05"></a>Year: 2020 Month: 05</h2><h3 id="Day-11"><a href="#Day-11" class="headerlink" title="Day: 11"></a>Day: 11</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">fetch</td><td align="center">取</td></tr><tr><td align="center">integrate</td><td align="center">整合</td></tr><tr><td align="center">schema</td><td align="center">概要，架构，结构</td></tr><tr><td align="center">retrieve</td><td align="center">取回,检索</td></tr><tr><td align="center">origin</td><td align="center">起源，来源</td></tr><tr><td align="center">render</td><td align="center">渲染</td></tr><tr><td align="center">convenient</td><td align="center">方便，便利</td></tr></tbody></table><h3 id="Day-12"><a href="#Day-12" class="headerlink" title="Day: 12"></a>Day: 12</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">textual</td><td align="center">文字的</td></tr><tr><td align="center">explicit</td><td align="center">显示的</td></tr><tr><td align="center">token</td><td align="center">令牌</td></tr><tr><td align="center">generate</td><td align="center">生成，产生</td></tr><tr><td align="center">produce</td><td align="center">产生，生产</td></tr><tr><td align="center">equivalent</td><td align="center">等效</td></tr><tr><td align="center">resolve</td><td align="center">解析</td></tr></tbody></table><h3 id="Day-13"><a href="#Day-13" class="headerlink" title="Day: 13"></a>Day: 13</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">filled</td><td align="center">填，填充</td></tr><tr><td align="center">anonymous</td><td align="center">匿名</td></tr><tr><td align="center">custom</td><td align="center">习惯，自定义</td></tr><tr><td align="center">chain</td><td align="center">链，连锁</td></tr><tr><td align="center">currency</td><td align="center">货币</td></tr></tbody></table><h3 id="Day-14"><a href="#Day-14" class="headerlink" title="Day: 14"></a>Day: 14</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">serve（v），service（n）</td><td align="center">服务</td></tr><tr><td align="center">server</td><td align="center">服务器</td></tr><tr><td align="center">Undeliverable</td><td align="center">无法交付</td></tr><tr><td align="center">compatible</td><td align="center">兼容</td></tr><tr><td align="center">attached to</td><td align="center">附于</td></tr><tr><td align="center">entry</td><td align="center">条目</td></tr><tr><td align="center">performance</td><td align="center">性能</td></tr><tr><td align="center">stable</td><td align="center">稳定</td></tr><tr><td align="center">preset</td><td align="center">预设</td></tr></tbody></table><h3 id="Day-15"><a href="#Day-15" class="headerlink" title="Day: 15"></a>Day: 15</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">announce</td><td align="center">宣告，声明</td></tr><tr><td align="center">applicable</td><td align="center">可适用</td></tr><tr><td align="center">procedure</td><td align="center">程序，过程，步骤</td></tr><tr><td align="center">compatible</td><td align="center">处理</td></tr><tr><td align="center">perform</td><td align="center">执行，履行</td></tr><tr><td align="center">concurrently</td><td align="center">同时</td></tr><tr><td align="center">in the case</td><td align="center">在这种情况下</td></tr><tr><td align="center">transfer</td><td align="center">传递</td></tr><tr><td align="center">concept</td><td align="center">概念</td></tr><tr><td align="center">a variety of</td><td align="center">多种( variety 品种)</td></tr><tr><td align="center">currently</td><td align="center">目前</td></tr><tr><td align="center">Unique</td><td align="center">唯一</td></tr><tr><td align="center">scalar</td><td align="center">标量，常量</td></tr><tr><td align="center">assign</td><td align="center">指定，分配</td></tr><tr><td align="center">composite</td><td align="center">综合，复合</td></tr><tr><td align="center">reserve</td><td align="center">保留，储备</td></tr><tr><td align="center">severe</td><td align="center">严重</td></tr></tbody></table><h3 id="Day-16"><a href="#Day-16" class="headerlink" title="Day: 16"></a>Day: 16</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">stub</td><td align="center">存根</td></tr><tr><td align="center">blocking</td><td align="center">阻塞</td></tr><tr><td align="center">synchronous</td><td align="center">同步</td></tr><tr><td align="center">populate</td><td align="center">填充</td></tr></tbody></table><h3 id="Day-18"><a href="#Day-18" class="headerlink" title="Day: 18"></a>Day: 18</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">indefinitely</td><td align="center">无限期</td></tr></tbody></table><h3 id="Day-21"><a href="#Day-21" class="headerlink" title="Day: 21"></a>Day: 21</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">directive</td><td align="center">指示，指令</td></tr><tr><td align="center">invalid</td><td align="center">无效</td></tr><tr><td align="center">label</td><td align="center">标签</td></tr><tr><td align="center">bundle</td><td align="center">包，束，包裹</td></tr></tbody></table><h3 id="Day-22"><a href="#Day-22" class="headerlink" title="Day: 22"></a>Day: 22</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">Toggle</td><td align="center">切换</td></tr></tbody></table><h3 id="Day-23"><a href="#Day-23" class="headerlink" title="Day: 23"></a>Day: 23</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">annotate</td><td align="center">注释</td></tr><tr><td align="center">policy</td><td align="center">政策</td></tr></tbody></table><h3 id="Day-25"><a href="#Day-25" class="headerlink" title="Day: 25"></a>Day: 25</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">generic</td><td align="center">通用的，泛型</td></tr><tr><td align="center">reputation</td><td align="center">声誉</td></tr></tbody></table><h3 id="Day-27"><a href="#Day-27" class="headerlink" title="Day: 27"></a>Day: 27</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">fulfill</td><td align="center">完成，履行，满足</td></tr></tbody></table><h2 id="Year-2020-Month-07"><a href="#Year-2020-Month-07" class="headerlink" title="Year: 2020 Month: 07"></a>Year: 2020 Month: 07</h2><h3 id="Day-3"><a href="#Day-3" class="headerlink" title="Day: 3"></a>Day: 3</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">canvas</td><td align="center">画布</td></tr><tr><td align="center">expired</td><td align="center">过期，已到期</td></tr><tr><td align="center">indication</td><td align="center">指示，提示</td></tr><tr><td align="center">capture</td><td align="center">捕获</td></tr></tbody></table><h3 id="Day-7"><a href="#Day-7" class="headerlink" title="Day: 7"></a>Day: 7</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">interval</td><td align="center">间隔，间隙</td></tr><tr><td align="center">associated</td><td align="center">关联的，联合的</td></tr><tr><td align="center">snippet</td><td align="center">片段</td></tr></tbody></table><h3 id="Day-8"><a href="#Day-8" class="headerlink" title="Day: 8"></a>Day: 8</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">except</td><td align="center">除非，除了</td></tr></tbody></table><h3 id="Day-9"><a href="#Day-9" class="headerlink" title="Day: 9"></a>Day: 9</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">credentials</td><td align="center">证书</td></tr><tr><td align="center">retrieve</td><td align="center">获取</td></tr></tbody></table><h3 id="Day-14-1"><a href="#Day-14-1" class="headerlink" title="Day: 14"></a>Day: 14</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">patterns</td><td align="center">模式</td></tr></tbody></table><h2 id="Year-2020-Month-08"><a href="#Year-2020-Month-08" class="headerlink" title="Year: 2020 Month: 08"></a>Year: 2020 Month: 08</h2><h3 id="Day-23-1"><a href="#Day-23-1" class="headerlink" title="Day: 23"></a>Day: 23</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">client-optimized</td><td align="center">客户端优化</td></tr><tr><td align="center">sample</td><td align="center">样本，样子</td></tr><tr><td align="center">exhaustive</td><td align="center">详细，彻底的</td></tr><tr><td align="center">brief</td><td align="center">简要，简短</td></tr><tr><td align="center">native</td><td align="center">本机</td></tr><tr><td align="center">explicit</td><td align="center">明确的，显式</td></tr><tr><td align="center">inference</td><td align="center">推理，推论，推导</td></tr><tr><td align="center">recommend</td><td align="center">推荐</td></tr><tr><td align="center">handy</td><td align="center">方便，便利</td></tr><tr><td align="center">specially</td><td align="center">特别，专门</td></tr><tr><td align="center">member</td><td align="center">会员，成员</td></tr><tr><td align="center">inheritance</td><td align="center">继承</td></tr><tr><td align="center">launch</td><td align="center">发布，发射</td></tr><tr><td align="center">hierarchies</td><td align="center">层次结构</td></tr></tbody></table><h3 id="Day-24"><a href="#Day-24" class="headerlink" title="Day: 24"></a>Day: 24</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">broker</td><td align="center">经纪人，中间商，代理</td></tr><tr><td align="center">acknowledgement</td><td align="center">承认，感谢</td></tr><tr><td align="center">flexible</td><td align="center">灵活</td></tr><tr><td align="center">distributed</td><td align="center">分布式，分布</td></tr><tr><td align="center">throughput</td><td align="center">吞吐量</td></tr><tr><td align="center">authorization</td><td align="center">授权</td></tr><tr><td align="center">focus</td><td align="center">焦点，重点</td></tr><tr><td align="center">regarding</td><td align="center">关于，对于</td></tr><tr><td align="center">deliver</td><td align="center">传递，传送</td></tr><tr><td align="center">eventually</td><td align="center">最终</td></tr><tr><td align="center">essentially</td><td align="center">实质上</td></tr><tr><td align="center">reside</td><td align="center">居住，驻留</td></tr><tr><td align="center">diagram</td><td align="center">图标，图解</td></tr><tr><td align="center">discarded</td><td align="center">丢弃，废弃，抛弃</td></tr><tr><td align="center">durable</td><td align="center">持续</td></tr><tr><td align="center">remain</td><td align="center">仍，保留</td></tr><tr><td align="center">regardless</td><td align="center">无论</td></tr><tr><td align="center">process</td><td align="center">过程，处理</td></tr><tr><td align="center">fake</td><td align="center">假，伪造</td></tr><tr><td align="center">arbitrary</td><td align="center">任意的</td></tr></tbody></table><h3 id="Day-25-1"><a href="#Day-25-1" class="headerlink" title="Day: 25"></a>Day: 25</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">indicate</td><td align="center">表明，表示</td></tr><tr><td align="center">essential</td><td align="center">必要，重要</td></tr></tbody></table><h3 id="Day-27-1"><a href="#Day-27-1" class="headerlink" title="Day: 27"></a>Day: 27</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">purpose</td><td align="center">目的，意图</td></tr><tr><td align="center">Successive</td><td align="center">连续</td></tr></tbody></table><h3 id="Day-28"><a href="#Day-28" class="headerlink" title="Day: 28"></a>Day: 28</h3><table><thead><tr><th align="center">单词</th><th align="center">翻译</th></tr></thead><tbody><tr><td align="center">arrange</td><td align="center">安排，排列</td></tr><tr><td align="center">Successive</td><td align="center">连续</td></tr><tr><td align="center">exceed</td><td align="center">超过</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每日英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO语言ORM之GORM</title>
      <link href="/2020/04/26/go-yu-yan-orm-zhi-gorm/"/>
      <url>/2020/04/26/go-yu-yan-orm-zhi-gorm/</url>
      
        <content type="html"><![CDATA[<h1 id="GO语言ORM之GORM"><a href="#GO语言ORM之GORM" class="headerlink" title="GO语言ORM之GORM"></a>GO语言ORM之GORM</h1><h3 id="一-GORM-简介"><a href="#一-GORM-简介" class="headerlink" title="一.GORM 简介"></a>一.GORM 简介</h3><p><strong>定义：</strong>The fantastic ORM library for Golang, aims to be developer friendly.</p><p>特性：</p><ul><li>Full-Featured ORM (almost)</li><li>Associations (Has One, Has Many, Belongs To, Many To Many, Polymorphism)</li><li>Hooks (Before/After Create/Save/Update/Delete/Find)<br>Preloading (eager loading)</li><li>Transactions</li><li>Composite Primary Key</li><li>SQL Builder</li><li>Auto Migrations</li><li>Logger</li><li>Extendable, write Plugins based on GORM callbacks</li><li>Every feature comes with tests</li><li>Developer Friendly</li></ul><h3 id="二-GORM-安装"><a href="#二-GORM-安装" class="headerlink" title="二.GORM 安装"></a>二.GORM 安装</h3><pre class="line-numbers language-shell"><code class="language-shell">go get -u -v github.com/jinzhu/gorm <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：如果项目是 Go module 模式，请慎重使用 -u 参数，因为它可能影响项目中 go.mod 文件中其他 module 的版本依赖。可以使用 go help get 查看 -u 参数的详情说明，也可参考 Go 包管理文章中对 module 模式的说明。</p></blockquote><h3 id="三-GORM-使用"><a href="#三-GORM-使用" class="headerlink" title="三.GORM 使用"></a>三.GORM 使用</h3><h4 id="1-数据库支持"><a href="#1-数据库支持" class="headerlink" title="1.数据库支持"></a>1.数据库支持</h4><p>​    <code>MySQL</code>、<code>PostgreSQL</code>、<code>Sqlite3</code>、<code>SQL Server</code> 对应的数据库驱动可以查看官网或者查看 <code>gorm.Open()</code> 函数查看源码中的驱动注释 。<a href="https://gorm.io/docs/connecting_to_the_database.html" target="_blank" rel="noopener">详情见此</a></p><blockquote><p>注意：使用 MySQL 时，如果想正确处理 time.Time 类型，则需要在 source 字段传中加上 parseTime 参数。</p><p>完整示例：<code>user:password@/dbname?charset=utf8&amp;parseTime=True&amp;loc=Local</code></p></blockquote><h4 id="2-模型定义"><a href="#2-模型定义" class="headerlink" title="2.模型定义"></a>2.模型定义</h4><h5 id="2-1-类型是正常的-golang-structs、基本-Go-类型或它们的指针。同时支持-sql-Scanner-和-driver-Valuer-接口。"><a href="#2-1-类型是正常的-golang-structs、基本-Go-类型或它们的指针。同时支持-sql-Scanner-和-driver-Valuer-接口。" class="headerlink" title="2.1 类型是正常的 golang structs、基本 Go 类型或它们的指针。同时支持 sql.Scanner 和 driver.Valuer 接口。"></a>2.1 类型是正常的 golang structs、基本 Go 类型或它们的指针。同时支持 <code>sql.Scanner</code> 和 <code>driver.Valuer</code> 接口。</h5><p>示例:</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>    gorm<span class="token punctuation">.</span>Model     Name <span class="token builtin">string</span>     Age sql<span class="token punctuation">.</span>NullInt64    Birthday <span class="token operator">*</span>time<span class="token punctuation">.</span>Time    Email        <span class="token builtin">string</span>  <span class="token string">`gorm:"type:varchar(100);unique_index"`</span>    Role         <span class="token builtin">string</span>  <span class="token string">`gorm:"size:255"`</span> <span class="token comment" spellcheck="true">// 设置字段大小为255</span>    MemberNumber <span class="token operator">*</span><span class="token builtin">string</span> <span class="token string">`gorm:"unique;not null"`</span> <span class="token comment" spellcheck="true">// 设置会员号（member number）唯一并且不为空</span>    Num          <span class="token builtin">int</span>     <span class="token string">`gorm:"AUTO_INCREMENT"`</span> <span class="token comment" spellcheck="true">// 设置 num 为自增类型</span>    Address      <span class="token builtin">string</span>  <span class="token string">`gorm:"index:addr"`</span> <span class="token comment" spellcheck="true">// 给address字段创建名为addr的索引</span>    IgnoreMe     <span class="token builtin">int</span>     <span class="token string">`gorm:"-"`</span> <span class="token comment" spellcheck="true">// 忽略本字段</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-2-结构体标记"><a href="#2-2-结构体标记" class="headerlink" title="2.2 结构体标记"></a>2.2 结构体标记</h5><table><thead><tr><th align="left">结构体标记（Tag）</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Column</td><td align="left">指定列名</td></tr><tr><td align="left">Type</td><td align="left">指定列数据类型</td></tr><tr><td align="left">Size</td><td align="left">指定列大小, 默认值255</td></tr><tr><td align="left">PRIMARY_KEY</td><td align="left">将列指定为主键</td></tr><tr><td align="left">UNIQUE</td><td align="left">将列指定为唯一</td></tr><tr><td align="left">DEFAULT</td><td align="left">指定列默认值</td></tr><tr><td align="left">PRECISION</td><td align="left">指定列精度</td></tr><tr><td align="left">NOT NULL</td><td align="left">将列指定为非 NULL</td></tr><tr><td align="left">AUTO_INCREMENT</td><td align="left">指定列是否为自增类型</td></tr><tr><td align="left">INDEX</td><td align="left">创建具有或不带名称的索引, 如果多个索引同名则创建复合索引</td></tr><tr><td align="left">UNIQUE_INDEX</td><td align="left">和 <code>INDEX</code> 类似，只不过创建的是唯一索引</td></tr><tr><td align="left">EMBEDDED</td><td align="left">将结构设置为嵌入</td></tr><tr><td align="left">EMBEDDED_PREFIX</td><td align="left">设置嵌入结构的前缀</td></tr><tr><td align="left">-</td><td align="left">忽略此字段</td></tr></tbody></table><h4 id="3-GORM的一些约定"><a href="#3-GORM的一些约定" class="headerlink" title="3.GORM的一些约定"></a>3.GORM的一些约定</h4><h5 id="3-1-内嵌结构-gorm-Model"><a href="#3-1-内嵌结构-gorm-Model" class="headerlink" title="3.1 内嵌结构 gorm.Model"></a>3.1 内嵌结构 <code>gorm.Model</code></h5><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// gorm.Model 定义</span><span class="token keyword">type</span> Model <span class="token keyword">struct</span> <span class="token punctuation">{</span>  ID        <span class="token builtin">uint</span> <span class="token string">`gorm:"primary_key"`</span>  CreatedAt time<span class="token punctuation">.</span>Time  UpdatedAt time<span class="token punctuation">.</span>Time  DeletedAt <span class="token operator">*</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-2-默认会使用名为-ID-的字段作为表的主键。"><a href="#3-2-默认会使用名为-ID-的字段作为表的主键。" class="headerlink" title="3.2 默认会使用名为 ID 的字段作为表的主键。"></a>3.2 默认会使用名为 ID 的字段作为表的主键。</h5><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ID <span class="token builtin">uint64</span> <span class="token comment" spellcheck="true">// 默认作为表的主键 </span>    Name <span class="token builtin">string</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-3-表名默认是结构体名称的复数"><a href="#3-3-表名默认是结构体名称的复数" class="headerlink" title="3.3 表名默认是结构体名称的复数"></a>3.3 表名默认是结构体名称的复数</h5><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 默认表名是 `users`</span><span class="token comment" spellcheck="true">// 将 User 的表名设置为 `profiles`</span><span class="token keyword">func</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> <span class="token function">TableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">"profiles"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 禁用默认表名的复数形式，但是如果结构体有 TableName 方法则不受影响。</span>db<span class="token punctuation">.</span><span class="token function">SingularTable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 使用 User 结构指定表名为 haha_user。</span>db<span class="token punctuation">.</span><span class="token function">Table</span><span class="token punctuation">(</span><span class="token string">"haha_user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateTable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-4-下划线分割列字段名，可使用标记指定列名"><a href="#3-4-下划线分割列字段名，可使用标记指定列名" class="headerlink" title="3.4 下划线分割列字段名，可使用标记指定列名"></a>3.4 下划线分割列字段名，可使用标记指定列名</h5><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ID <span class="token builtin">int</span> <span class="token comment" spellcheck="true">// 列名为 id</span>    Name <span class="token builtin">string</span> <span class="token comment" spellcheck="true">// 列名为 name</span>    CreateAt time<span class="token punctuation">.</span>Time <span class="token comment" spellcheck="true">// 列名为 create_at</span>    Age <span class="token builtin">int64</span> <span class="token string">`gorm:"column:age_young`</span> <span class="token comment" spellcheck="true">// 列名为 age_young</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-5-时间点（Timestamp），如果模型有-CreatedAt-字段，该字段的值为首次创建记录的时间；如果模型有-UpdatedAt-字段，该字段为每次更新记录的时间；如果模型有-DeletedAt-字段，当调用-Delete-删除该记录是，会将-DeletedAt-字段设置为当前时间，表示该记录已经从数据库中删除，但是数据库仍然存在该记录，这是软删除。"><a href="#3-5-时间点（Timestamp），如果模型有-CreatedAt-字段，该字段的值为首次创建记录的时间；如果模型有-UpdatedAt-字段，该字段为每次更新记录的时间；如果模型有-DeletedAt-字段，当调用-Delete-删除该记录是，会将-DeletedAt-字段设置为当前时间，表示该记录已经从数据库中删除，但是数据库仍然存在该记录，这是软删除。" class="headerlink" title="3.5 时间点（Timestamp），如果模型有 CreatedAt 字段，该字段的值为首次创建记录的时间；如果模型有 UpdatedAt 字段，该字段为每次更新记录的时间；如果模型有 DeletedAt 字段，当调用 Delete 删除该记录是，会将 DeletedAt 字段设置为当前时间，表示该记录已经从数据库中删除，但是数据库仍然存在该记录，这是软删除。"></a>3.5 时间点（Timestamp），如果模型有 <code>CreatedAt</code> 字段，该字段的值为首次创建记录的时间；如果模型有 <code>UpdatedAt</code> 字段，该字段为每次更新记录的时间；如果模型有 <code>DeletedAt</code> 字段，当调用 <code>Delete</code> 删除该记录是，会将 <code>DeletedAt</code> 字段设置为当前时间，表示该记录已经从数据库中删除，但是数据库仍然存在该记录，这是软删除。</h5><h4 id="4-CRUD-操作"><a href="#4-CRUD-操作" class="headerlink" title="4.CRUD 操作"></a>4.CRUD 操作</h4><blockquote><p><strong>注意：</strong>所有的 CRUD 操作，传入的参数都应该是类型的指针。否则会操作失败！</p></blockquote><h5 id="4-1-创建"><a href="#4-1-创建" class="headerlink" title="4.1 创建"></a>4.1 创建</h5><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ID <span class="token builtin">int</span>    Name <span class="token builtin">string</span><span class="token punctuation">}</span>user <span class="token operator">:=</span> User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">}</span>db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意：</strong>所有字段的零值都不会更新到数据库中，但是会使用该字段的默认值。若想避免这种情况，因该考虑使用指针或实现 Scanner/Valuer 接口。</p></blockquote><h5 id="4-2-查询"><a href="#4-2-查询" class="headerlink" title="4.2 查询"></a>4.2 查询</h5><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 根据主键查询第一条记录</span>db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 随机获取一条记录</span>db<span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 根据主键查询最后一条记录</span>db<span class="token punctuation">.</span><span class="token function">Last</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 查询所有的记录</span>db<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 查询指定的某条记录(仅当主键为整型时可用)</span>db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增加 Where 条件：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 符合条件的所有记录</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name = ?"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 模糊查询 LIKE</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name LIKE ?"</span><span class="token punctuation">,</span> <span class="token string">"%jin%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// IN</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name IN (?)"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"jinzhu"</span><span class="token punctuation">,</span> <span class="token string">"jinzhu 2"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Struct</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"jinzhu"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Map</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"jinzhu"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 主键切片</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int64</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意：</strong>当通过结构体进行查询时，GORM将会只通过非零值字段查询，这意味着如果你的字段值为0，’’， false 或者其他 零值时，将不会被用于构建查询条件，例如</p></blockquote><pre class="line-numbers language-go"><code class="language-go">db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"jinzhu"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//// SELECT * FROM users WHERE name = "jinzhu";</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同上可以设置类型为指针或者使用接口来避免这个问题。</p><h5 id="4-3-更新"><a href="#4-3-更新" class="headerlink" title="4.3 更新"></a>4.3 更新</h5><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// save 更新所有字段。当你没有为字段赋值时，则为字段的默认值。</span><span class="token comment" spellcheck="true">// 当 user 没有主键时，会插入一条新的数据。</span>db<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 更新单个属性，如果它有变化</span>db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 更新选定字段</span>db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"actived"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 忽略选定字段</span>db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Omit</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Updates</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"actived"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意：</strong> 在使用 struct 取更新字段时，只会更新其中值有变化且为非零值的字段。可以使用 map 来更新使用零值的字段！</p></blockquote><h5 id="4-4-删除"><a href="#4-4-删除" class="headerlink" title="4.4 删除"></a>4.4 删除</h5><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 删除现有记录，要确保 email 的主键有值，否则会删除所有的记录</span>db<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>email<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 物理删除，如果表中存在 DeletedAt 字段，可以使用该函数从数据库中删除该条记录，否则则是在该字段记录下删除的时间，而数据库中仍然存在该调记录。</span>db<span class="token punctuation">.</span><span class="token function">Unscoped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>order<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-GORM操作说明"><a href="#5-GORM操作说明" class="headerlink" title="5.GORM操作说明"></a>5.GORM操作说明</h4><h5 id="5-1-链式操作"><a href="#5-1-链式操作" class="headerlink" title="5.1 链式操作"></a>5.1 链式操作</h5><pre class="line-numbers language-go"><code class="language-go">db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name = ?"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"age = ?"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 该查询会将上面的条件加到一起</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的链式操作都是线程安全的。</p><h5 id="5-2错误处理"><a href="#5-2错误处理" class="headerlink" title="5.2错误处理"></a>5.2错误处理</h5><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">if</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name = ?"</span><span class="token punctuation">,</span> <span class="token string">"jinzhu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// error 处理...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果发生了一个以上的错误， `GetErrors` 以`[]error`形式返回他们</span>errors <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token keyword">range</span> errors <span class="token punctuation">{</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 检查是否为 RecordNotFound 错误</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name = ?"</span><span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RecordNotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> db<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Related</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>credit_card<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RecordNotFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 未找到记录</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"name = ?"</span><span class="token punctuation">,</span> <span class="token string">"jinzhu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span>Error<span class="token punctuation">;</span> gorm<span class="token punctuation">.</span><span class="token function">IsRecordNotFoundError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 未找到记录</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-3-事务"><a href="#5-3-事务" class="headerlink" title="5.3 事务"></a>5.3 事务</h5><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">CreateAnimals</span><span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> db<span class="token punctuation">.</span><span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在事务中做一些数据库操作 (这里应该使用 'tx' ，而不是 'db')</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Animal<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"Giraffe"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 返回任意 err ，整个事务都会 rollback</span>      <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Animal<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"Lion"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回 nil 提交事务</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">CreateAnimals</span><span class="token punctuation">(</span>db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 请注意，事务一旦开始，你就应该使用 tx 作为数据库句柄</span>  tx <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> r <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>      tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> err  <span class="token punctuation">}</span>  <span class="token keyword">if</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Animal<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"Giraffe"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>     tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> err  <span class="token punctuation">}</span>  <span class="token keyword">if</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Animal<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"Lion"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Error<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>     tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> err  <span class="token punctuation">}</span>  <span class="token keyword">return</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Error<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Go语言ORM库 </tag>
            
            <tag> gorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go包管理之modules</title>
      <link href="/2020/04/24/go-bao-guan-li-zhi-modules/"/>
      <url>/2020/04/24/go-bao-guan-li-zhi-modules/</url>
      
        <content type="html"><![CDATA[<h1 id="Go包管理之modules"><a href="#Go包管理之modules" class="headerlink" title="Go包管理之modules"></a>Go包管理之modules</h1><h3 id="Go-包管理发展进程"><a href="#Go-包管理发展进程" class="headerlink" title="Go 包管理发展进程"></a>Go 包管理发展进程</h3><p>​    在 Go 语言出世之时还未为其设计包管理工具，所以在最初开发之时，包管理一直是它的一个痛点。</p><ul><li>在 1.5 版本之前，所有的依赖包都是放在 <code>GOPATH</code> 之下的，并且没有版本控制。这会带来一些问题，如 A 和 B 项目依赖不同版本的相同包，但是包没有做到完全向前兼容，在使用过程中可能会出现奇怪的 bug 。</li><li>1.5 版本推出了vendor 机制，就是让每个项目的根目录下都有一个 vendor 目录，里面存放项目所依赖的包，在 <code>go build</code> 时会先查找 vendor 目录，之后查找 <code>GOPATH</code> 。</li><li>1.9 版本推出了包管理工具 <code>dep</code> ，因为争议，重新开发了 modules。</li><li>1.11 版本推出了 modules 机制，即 <code>go mod</code> 。</li></ul><p>​    一些比较流行的第三方包管理工具： <code>govendor</code>、<code>godep</code>、<code>glide</code></p><blockquote><p><strong>注</strong>：因本人未使用过 <code>go mod</code> 之前的包管理工具所以仅做简述，若想详细了解，请百度或 Google。</p></blockquote><h3 id="Go-modules-简介"><a href="#Go-modules-简介" class="headerlink" title="Go modules 简介"></a>Go modules 简介</h3><p>​    Go 1.11支持 modules 模式，是官方推出的 Go 包版本依赖管理系统，Go module 通过 <code>go.mod</code> 文件维护一个包文件树和包对应的版本。</p><ul><li><p>Go module 模式通过 <code>GO111MODULE</code> 环境变量来设置 module 模式是否开启，它有三个值 <code>on</code>、<code>off</code>、<code>auto</code>，在 Go 1.11 和 Go 1.12 版本，默认为 <code>GOMODULE=auto</code> ，即在<code>GOPATH</code> 中 Go module 模式无效，<code>GOPATH</code> 之外开启有效，关闭无效。</p></li><li><p>Go 1.11 和 1.12 在项目 <code>GOPATH</code> 中，通过设置环境变量 <code>GO111MODULE=on</code> 来强制开启 Go module 模式，但是  <code>go.mod</code> 文件应该存在；在 <code>GOPATH</code> 之外，通过设置环境变量<code>GO111MODULE=off</code>  来强制开启 <code>GOPATH</code> 模式，即使 <code>go.mod</code> 文件存在。</p></li><li><p>从 Go 1.13 开始 go module 模式作为所有开发的默认模式。并且 Go module 模式默认 <code>GO111MODULE=auto</code> 发生了改变：1.在 <code>GOPATH</code> 下 <code>go.mod</code> 文件存在，环境变量 <code>GO111MODULE=on</code>；在<code>GOPATH</code> 外，即使 <code>go.mod</code> 不存在，环境变量也是 <code>GO111MODULE=on</code>。2.在 <code>GOPATH</code> 下，没有 <code>go.mod</code> 文件时，环境变量 <code>GO111MODULE=off</code> </p></li></ul><h3 id="Go-modules-模式的使用"><a href="#Go-modules-模式的使用" class="headerlink" title="Go modules 模式的使用"></a>Go modules 模式的使用</h3><blockquote><p><strong>注意：</strong>使用官网教程使用 module 模式（需要开启代理下载所需要的包）</p></blockquote><h4 id="启动-module-模式"><a href="#启动-module-模式" class="headerlink" title="启动 module 模式"></a>启动 module 模式</h4><p>在 <code>GOPATH</code> 之外创建一个空的目录，并且增加 <code>hello.go</code> 文件，内容如下</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> hello<span class="token keyword">func</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Hello, world."</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写测试文件，<code>hello_test.go</code> :</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> hello<span class="token keyword">import</span> <span class="token string">"testing"</span><span class="token keyword">func</span> <span class="token function">TestHello</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    want <span class="token operator">:=</span> <span class="token string">"Hello, world."</span>    <span class="token keyword">if</span> got <span class="token operator">:=</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> got <span class="token operator">!=</span> want <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Hello() = %q, want %q"</span><span class="token punctuation">,</span> got<span class="token punctuation">,</span> want<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><pre class="line-numbers language-shell"><code class="language-shell">$ go testPASSok      _/home/gopher/hello    0.020s$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时项目在 <code>GOPATH</code> 外运行，并且没有开启 module 模式，Go 命令在不知道当前目录的导入路径下，会根据当前目录名创建一个假目录，即 <code>_/home/gopher/hello</code> 。</p><p>执行 <code>shell</code> 创建 module 模式。</p><pre class="line-numbers language-shell"><code class="language-shell">$ go mod init example.com/hellogo: creating new go.mod: module example.com/hello$ go testPASSok      example.com/hello    0.020s$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时已经使用了 Go module 模式，并且在该目录下生成了 <code>go.mod</code> 文件。该文件仅出现在 module 模式的根目录下，如果在 module 模式下创建 world 子目录，不需要在子目录在执行一次操作，包会自动识别 module ，并且导入路径 <code>example.com/hello/world</code>。</p><h4 id="增加依赖"><a href="#增加依赖" class="headerlink" title="增加依赖"></a>增加依赖</h4><p>修改之前的文件，导入 <code>rsc.io/quote</code> 包</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> hello<span class="token keyword">import</span> <span class="token string">"rsc.io/quote"</span><span class="token keyword">func</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> quote<span class="token punctuation">.</span><span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行测试</p><pre class="line-numbers language-shell"><code class="language-shell">$ go testgo: finding rsc.io/quote v1.5.2go: downloading rsc.io/quote v1.5.2go: extracting rsc.io/quote v1.5.2go: finding rsc.io/sampler v1.3.0go: finding golang.org/x/text v0.0.0-20170915032832-14c0d48ead0cgo: downloading rsc.io/sampler v1.3.0go: extracting rsc.io/sampler v1.3.0go: downloading golang.org/x/text v0.0.0-20170915032832-14c0d48ead0cgo: extracting golang.org/x/text v0.0.0-20170915032832-14c0d48ead0cPASSok      example.com/hello    0.023s$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>go 命令使用 <code>go.mod</code> 文件中列出的特定依赖模块版本来解析导入。当遇到未在 <code>go.mod</code> 中提供的任何模块提供的软件包导入时，go 命令将自动使用最新版本查找该软件包的模块，并将其增加到 <code>go.mod</code> 中，已经下载过的模块会缓存到 <code>$GOPATH/pkg/mod</code> 目录下。</p><blockquote><p><strong>注意：</strong>Go 的这些命令会有一定内存的消耗。</p></blockquote><p>通过 Go 命令下载我们直接增加的依赖以外，通常还会有这些依赖的一些间接依赖会被下载，可以通过以下命令来查看：</p><pre class="line-numbers language-shell"><code class="language-shell">$ go list -m allexample.com/hellogolang.org/x/text v0.0.0-20170915032832-14c0d48ead0crsc.io/quote v1.5.2rsc.io/sampler v1.3.0$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了 <code>go.mod</code>  文件之外，go 命令还会维持 <code>go.sum</code> 文件，其中保存了指定的模块版本加密哈希值。用于保证这些模块将来下载于第一次下载时检索的位相同，从而确保项目依赖的模块不会因为一些原因而被更改。所以应该将 <code>go.mod</code> 和 <code>go.sum</code>  都加入到版本控制中检查。</p><h4 id="更新依赖"><a href="#更新依赖" class="headerlink" title="更新依赖"></a>更新依赖</h4><p>go 模块有不同的版本，通过 go 命令指定版本可进行更新。<code>v0.1.2</code> 表示的是：0主要版本，1次要版本，2补丁。</p><p>更新次要版本：</p><pre class="line-numbers language-shell"><code class="language-shell">$ go get golang.org/x/textgo: finding golang.org/x/text v0.3.0go: downloading golang.org/x/text v0.3.0go: extracting golang.org/x/text v0.3.0$ go testPASSok      example.com/hello    0.013s$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看更新后的结果：</p><pre class="line-numbers language-shell"><code class="language-shell">$ go list -m allexample.com/hellogolang.org/x/text v0.3.0rsc.io/quote v1.5.2rsc.io/sampler v1.3.0$ cat go.modmodule example.com/hellogo 1.12require (    golang.org/x/text v0.3.0 // indirect    rsc.io/quote v1.5.2)$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的 indirect 注释表示模块没直接使用依赖，仅间接接收其他模块依赖。</p><p>查看模块可用的版本:</p><pre class="line-numbers language-shell"><code class="language-shell">$ go list -m -versions rsc.io/samplerrsc.io/sampler v1.0.0 v1.2.0 v1.2.1 v1.3.0 v1.3.1 v1.99.99<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通常来说可以通过 <code>go get</code> 命令显示指定版本，默认是 @latest 也就是最新版。</p><p>更新主版本，可以指定模块的主版本文件夹。即在文件中导入  <code>rsc.io/quote/v3</code>（包未变还是 quote 包）。 然后通过 go 命令就下载对版本。</p><p>移出未使用的依赖：</p><pre class="line-numbers language-shell"><code class="language-shell">$ go mod tidy$ go list -m allexample.com/hellogolang.org/x/text v0.3.0rsc.io/quote/v3 v3.1.0rsc.io/sampler v1.3.1$ cat go.modmodule example.com/hellogo 1.12require (    golang.org/x/text v0.3.0 // indirect    rsc.io/quote/v3 v3.1.0    rsc.io/sampler v1.3.1 // indirect)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Go-module的坑"><a href="#Go-module的坑" class="headerlink" title="Go module的坑"></a>Go module的坑</h3><h4 id="vscode代码提示"><a href="#vscode代码提示" class="headerlink" title="vscode代码提示"></a><code>vscode</code>代码提示</h4><p>若 <code>VSCODE</code> 打开 <code>GOPATH</code> 下开启了 Go modules 的项目，查找代码很慢解决方案。可以在 <code>GOPATH</code> 下关闭 Go modules 模式，若在 <code>GOPATH</code> 外打开Go modules 项目特别慢可以增加 vendor 模式来自动拷贝项目所需要的依赖 <code>go mod vendor</code> 来解决，也可以将其增加到 <code>GOPATH</code> 中，具体跟 Go 的版本相关，详情见上。</p><h4 id="go-get命令"><a href="#go-get命令" class="headerlink" title="go get命令"></a><code>go get</code>命令</h4><p>开启 module 模式 <code>go get</code> 拉取指定版本时，注意加上 -u 参数的变化。<a href="https://dev.to/maelvls/why-is-go111module-everywhere-and-everything-about-go-modules-24k" target="_blank" rel="noopener">详情见此</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Go 包管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议</title>
      <link href="/2020/03/27/http-xie-yi/"/>
      <url>/2020/03/27/http-xie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h3 id="一-HTTP的发展"><a href="#一-HTTP的发展" class="headerlink" title="一.HTTP的发展"></a>一.HTTP的发展</h3><h4 id="1-HTTP-0-9"><a href="#1-HTTP-0-9" class="headerlink" title="1.HTTP/0.9"></a>1.<code>HTTP/0.9</code></h4><p>​    这是 HTTP 协议的初代版本，它是基于 TCP/IP 协议的应用层协议，不涉及数据包的传输，主要定义了客户端与服务器端的通信格式，默认端口是80。</p><ul><li>客户端只有 GET 命令，是在建立 TCP 协议之后的发送的请求。</li><li>服务器只能响应 HTML 格式字符串，响应完成就关闭 TCP 连接。</li></ul><p>​    请求协议：</p><pre class="line-numbers language-http"><code class="language-http">GET /index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    响应协议：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-HTTP-1-0"><a href="#2-HTTP-1-0" class="headerlink" title="2.HTTP/1.0"></a>2.<code>HTTP/1.0</code></h4><p>​    此版本协议规定，客户端可以发送任意格式的数据。除了之前的 GET 请求，还增加了 POST 和 HEAD请求。并且请求协议和响应协议格式也发生了改变。</p><ul><li>请求协议包括了状态行、请求头【描述客户端的信息】、消息主体。</li><li>响应协议包括了状态行、响应头、响应正文。</li><li>服务器响应时，响应头中 <code>Content-Type</code> 字段表示告诉客户端响应数据的格式类型，这些数据类型的总称为 <code>MIME type</code> 。</li><li>每个 TCP 连接只能发送一个 HTTP 请求，服务器响应完成就关闭连接。客户端与服务器建立连接的三次握手比较慢。一些浏览器在请求头中加上了非标准字段 <code>connection: keep-alive</code> 来解决这个问题，服务器同时返回这个字段。</li></ul><p>​    请求协议：</p><pre class="line-numbers language-http"><code class="language-http">GET / HTTP/1.0<span class="token header-name keyword">User-Agent:</span> Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)<span class="token header-name keyword">Accept:</span> */*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    响应协议：</p><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.0 <span class="token property">200 OK </span></span><span class="token header-name keyword">Content-Type:</span> text/plain<span class="token header-name keyword">Content-Length:</span> 137582<span class="token header-name keyword">Expires:</span> Thu, 05 Dec 1997 16:00:00 GMT<span class="token header-name keyword">Last-Modified:</span> Wed, 5 August 1996 15:55:28 GMT<span class="token header-name keyword">Server:</span> Apache 0.84&lt;html>&lt;body>Hello World&lt;/body>&lt;/html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-HTTP-1-1"><a href="#3-HTTP-1-1" class="headerlink" title="3.HTTP/1.1"></a>3.<code>HTTP/1.1</code></h4><p>​    相比 <code>1.0</code> 最大的变化是引入了持久连接（默认 <code>TCP</code> 连接不关闭），可以被多个 <code>HTTP</code> 请求复用，不用声明 <code>Connection: keep-alive</code> 。客户端或服务器发现一段时间没有活动就主动关闭连接，客户端也可在发最后一次请求时，在请求头中加上 <code>Connection: close</code> 字段，要求服务器关闭 <code>TCP</code> 连接。</p><ul><li>引入管道机制。在同一个 <code>TCP</code> 连接中，客户端可以同时发送多个请求。</li><li>服务器端可以响应多个请求，用 <code>Content-Length</code> 字段区分每次回应的数据长度，用于区分不同的数据包。（服务器按请求顺序响应数据包）</li><li>分块传输编码。相比上面的服务器响应机制，当要处理耗时操作时，因为要知道响应数据的长度，所以效率就会变低，可以使用分块传输，不使用 <code>Content-Length</code> 字段，只需要在请求或回应的头信息中带 <code>Tansfer-Encoding</code> 字段即可。每个非空的数据块之前会有一个 16 进制的数值表示这个数据块的长度，最后一个大小为 0，就表示本次数据发送完毕。</li><li>增加了 <code>PUT</code> 、<code>PATCH</code>、<code>HEAD</code>、 <code>OPTIONS</code>、<code>DELETE</code> 方法。并且客户端请求头信息可以增加 <code>Host</code> 字段，用于指定服务器的域名，可以将请求发送到同一台服务器的不同网站。</li></ul><pre><code>HTTP/1.1 200 OKContent-Type: text/plainTransfer-Encoding: chunked25This is the data in the first chunk1Cand this is the second one3con8sequence0</code></pre><p>该协议的缺点时服务器的响应是按顺序进行的，如果前面的特别慢，则会影响后面的响应。解决方案可以为：</p><p>​    一. 减少请求数。</p><p>​    二. 同时多开持久连接。</p><h4 id="4-HTTP-2"><a href="#4-HTTP-2" class="headerlink" title="4.HTTP/2"></a>4.<code>HTTP/2</code></h4><p>​    它是一个二进制协议，头信息和数据体都是二进制，统称为数据帧和头信息帧。它的好处在于可以定义额外的帧。</p><ul><li>在一个 <code>TCP</code> 连接里，客户端和服务器可以同时发送多个请求或响应，并且不同按照顺序，可以避免队头堵塞。即多工！</li><li>每个请求或响应的数据包称为一个数据流，在同一个连接里面的连续数据包，可能有属于不同的响应数据，所以通过唯一编号来对不同的响应数据做标记，并且客户端发送的数据流 ID 为奇数，服务器发送的数据流 ID 为偶数。</li><li>客户端和服务器都可以发送 <code>RST_STREAM</code> 帧来取消数据流用于关闭 <code>HTTP</code> 请求，而 <code>TCP</code> 连接还是打开着，可以被其他请求复用。客户端还可以指定数据流的优先级，来指定服务器响应的顺序。</li><li><code>HTTP</code> 协议是无状态的，相同的头信息每次都要进行携带，所以在该版本引入了头信息压缩机制，gzip 或 compress 压缩后发送，同时客户端和服务器同时维护了头信息表，所有字段都会存入该表，生成索引号，以后就可以发送索引号，提高速度。</li><li>服务器推送：服务器可以主动向客户端发送资源。</li></ul><h3 id="二-HTTP协议发展总结"><a href="#二-HTTP协议发展总结" class="headerlink" title="二.HTTP协议发展总结"></a>二.HTTP协议发展总结</h3><ul><li><code>HTTP</code> 协议构建于 <code>TCP</code>  协议之上，是无状态的应用层协议，默认端口80。</li><li><code>HTTP</code> 请求中 <code>GET</code> 和 <code>POST</code> 请求的数据格式不同，<code>GET</code> 存在于 <code>URL</code> ，长度受限，<code>POST</code> 请求存在请求体中。</li><li><code>POST</code> 请求中提交数据的编码类型，常见的两个类型为 <code>application/x-www-form-urlencoded</code> 和 <code>multipart/form-data</code> 前者为表单提交数据编码类型，后者为表单上传文件编码类型。</li><li>在使用分块传输时，要注意每个块的内容长度是未知的，所以对于下载请求是没有办法实现下载进度的。</li><li>使用管道技术对于客户端的 POST 请求是有所限制的。</li></ul><h3 id="三-HTTP协议引申"><a href="#三-HTTP协议引申" class="headerlink" title="三.HTTP协议引申"></a>三.HTTP协议引申</h3><h4 id="1-会话跟踪"><a href="#1-会话跟踪" class="headerlink" title="1.会话跟踪"></a>1.会话跟踪</h4><ul><li>会话是客户端请求服务器到服务器响应客户端完成的全过程称为会话。</li><li>会话跟踪指对同一个用户对服务器的连续请求和接收响应的监视。</li><li>使用会话跟踪的技术是因为HTTP协议是无状态的，所以服务器响应完成客户端的请求后，不能够保存用户的信息，服务器要判断下次请求是否为同一人则需要该技术的支持。</li></ul><h4 id="2-实现会话跟踪的方法"><a href="#2-实现会话跟踪的方法" class="headerlink" title="2.实现会话跟踪的方法"></a>2.实现会话跟踪的方法</h4><ul><li>URL重写：在URL结尾增加一个附加数据标识该会话，把会话ID通过URL传递给服务器以标识不同的用户。</li><li>隐藏表单域：将会话ID增加到HTML表单中提交到服务器，也就是表单元素不显示在客户端。</li><li>Cookie技术：cookie是服务器发送给客户端的一段信息，对于每次客户端的请求，服务器都会将cookie发送到客户端，从而在客户端进行保存。保存方式有在客户端内存中进行保存，即为临时 cookie，客户端关闭后浏览器该都该对象就消失了，二是保存在客户端的机器磁盘上，为永久cookie，只要 cookie在有效期内，就能实现会话跟踪。</li><li>session技术：每个用户都有一个 session,每个用户不能共享，在 session 中可以存放信息，服务器会创建 session 对象，产生一个 sessionID 来标识该对象，然后将 sessionID 放到 cookie 中发送给客户端，下一次客户端访问时，sessionID 会发送到服务器，便能识别不同的用户，session 是依赖于 cookie 的，如果 cookie 被禁用那么 session 也就失效了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Hexo博客到个人服务器并实现同步管理</title>
      <link href="/2020/03/25/da-jian-hexo-bo-ke-dao-ge-ren-fu-wu-qi-bing-shi-xian-tong-bu-guan-li/"/>
      <url>/2020/03/25/da-jian-hexo-bo-ke-dao-ge-ren-fu-wu-qi-bing-shi-xian-tong-bu-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建Hexo博客到个人服务器并实现同步管理"><a href="#搭建Hexo博客到个人服务器并实现同步管理" class="headerlink" title="搭建Hexo博客到个人服务器并实现同步管理"></a>搭建Hexo博客到个人服务器并实现同步管理</h1><h3 id="搭建本地-Hexo-环境"><a href="#搭建本地-Hexo-环境" class="headerlink" title="搭建本地 Hexo 环境"></a>搭建本地 Hexo 环境</h3><h4 id="下载安装-git"><a href="#下载安装-git" class="headerlink" title="下载安装 git"></a>下载安装 git</h4><p><code>apt install git</code></p><h4 id="下载安装-nodejs"><a href="#下载安装-nodejs" class="headerlink" title="下载安装 nodejs"></a>下载安装 nodejs</h4><pre class="line-numbers language-shell"><code class="language-shell"> # 创建件文件夹并下载解压对应的软件包 VERSION=v10.15.0 DISTRO=linux-x64 sudo mkdir -p /usr/local/lib/nodejs sudo tar -xJvf node-$VERSION-$DISTRO.tar.xz -C /usr/local/lib/nodejs  #设置环境变量到 ~/.profile 或 ~/.bashrc 下VERSION=v10.15.0DISTRO=linux-x64export PATH=/usr/local/lib/nodejs/node-$VERSION-$DISTRO/bin:$PATH#应用文件.  ~/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong>默认会安装 npm (官方建议：Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本).</p></blockquote><p>修正：</p><blockquote><p><strong>说明：</strong>按照上面的方案安装 Nodejs 会导致使用 Npm 安装包时出现权限问题。</p></blockquote><p>使用管理工具 <a href="https://github.com/nvm-sh/nvm#manual-install" target="_blank" rel="noopener">nvm</a>  安装 Node 。</p><p>node 高版本安装 hexo-cli 推送会出现问题，v12.x 正常。</p><h4 id="npm-安装-Hexo"><a href="#npm-安装-Hexo" class="headerlink" title="npm 安装 Hexo"></a>npm 安装 Hexo</h4><p><code>npm install -g hexo-cli</code></p><h3 id="配置本地-Git-环境"><a href="#配置本地-Git-环境" class="headerlink" title="配置本地 Git 环境"></a>配置本地 Git 环境</h3><h4 id="创建公钥文件夹"><a href="#创建公钥文件夹" class="headerlink" title="创建公钥文件夹"></a>创建公钥文件夹</h4><p>检查本地是否存在 <code>~/.ssh</code> 文件夹，若不存在则创建，并进入文件夹。</p><h4 id="生成本地公钥和私钥"><a href="#生成本地公钥和私钥" class="headerlink" title="生成本地公钥和私钥"></a>生成本地公钥和私钥</h4><p><code>ssh-keygen -t rsa -C &quot;youremail@youremail.com&quot;</code></p><blockquote><p><strong>说明：</strong>Github 推荐使用 -t ed25519 算法 。<a href="https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noopener">详情</a></p></blockquote><h4 id="设置-Git-信息"><a href="#设置-Git-信息" class="headerlink" title="设置 Git 信息"></a>设置 Git 信息</h4><ul><li>可修改的本地 Git 用户名：<code>git config --global user.name &quot;Firstname Lastname&quot;</code></li><li>可修改的本地 Git 邮箱：<code>git config --global user.email &quot;your_email@youremail.com&quot;</code></li><li>查看本地 Git 配置信息：<code>git config --list</code></li></ul><h3 id="服务器环境配置-root-登录"><a href="#服务器环境配置-root-登录" class="headerlink" title="服务器环境配置(root 登录)"></a>服务器环境配置(root 登录)</h3><h4 id="搭建-Git-仓库"><a href="#搭建-Git-仓库" class="headerlink" title="搭建 Git 仓库"></a>搭建 Git 仓库</h4><ul><li><p>为 Git 创建一个用户，用来运行 Git 服务：创建用户<code>adduser git</code>，设置密码 <code>passwd git</code>.</p></li><li><p>创建证书登录：收集所有需要登录的用户公钥（<code>id_rsa.pub</code>文件），将公钥导入到 <code>/home/git/.ssh/authorized_keys</code>文件里，一行一个公钥。</p></li><li><p>初始化 Git 仓库：git 用户登录 <code>su git</code> ，选定一个目录作为 Git 仓库(我选用的是 /home/git/repository)，初始化 <code>git init --bare blog.git</code> .</p></li><li><p>此时为裸仓库，没有工作区。因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以<code>.git</code>结尾。更改 owner 为 git 用户：<code>sudo chown -R git:git blog.git</code></p></li><li><p>禁用 git 用户 shell 登录：找到<code>/etc/passd</code>中的 git 修改为<code>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</code></p></li><li><p>创建 git 钩子：在 git 用户下创建目录（用于存放通过 Hexo 部署上来的静态文件，也就是个人服务器要展示的内容）gopherty，创建 <code>/home/git/repository/blog.git/hooks/post-receive</code> 文件，内容</p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/shgit --work-tree=/home/git/gopherty --git-dir=/home/git/repository/blog.git checkout -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>为该文件增加可执行权限：<code>chmod +x post-receive</code></p><h4 id="nginx-配置"><a href="#nginx-配置" class="headerlink" title="nginx 配置"></a>nginx 配置</h4><ul><li><p>安装 nginx .</p></li><li><p>修改配置文件<code>/etc/nginx/nginx.conf</code>，将 server 下的 root 改为 <code>/home/git</code> 表示网页的根目录存放路径，location 改为 <code>index index.html index.htm</code>；表示默认打开<code>index.html</code>文件。</p></li><li><p>重启 nginx 服务 .</p></li></ul><h3 id="本地实现"><a href="#本地实现" class="headerlink" title="本地实现"></a>本地实现</h3><p>以上环境都配置好以后，找到 Hexo 博客源文件，修改 <code>_config.yml</code>文件：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># URL</span><span class="token comment" spellcheck="true">### If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//www.gopherty.info     //个人域名<span class="token punctuation">...</span><span class="token punctuation">...</span><span class="token comment" spellcheck="true"># Deployment</span><span class="token comment" spellcheck="true">### Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> git<span class="token key atrule">repo</span><span class="token punctuation">:</span> git@www.gopherty.info<span class="token punctuation">:</span>/home/git/repository/blog.git  //用户名@域名或 IP 地址<span class="token punctuation">:</span>/home/git/repository/blog.git<span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在就可以通过 Hexo 的命令生成对应的源文件，并推送到个人服务器上进行查看博客内容。</p><h3 id="Hexo-同步管理"><a href="#Hexo-同步管理" class="headerlink" title="Hexo 同步管理"></a>Hexo 同步管理</h3><p>Hexo 同步管理和我之前文章提到的原理相同，实现过程如下：</p><ul><li>在服务器端建立 source 分支，用于存放 Hexo 的源文件：<code>git branch source</code></li><li>本地克隆服务器 source 分支的内容：<code>git clone -b source  git@www.gopherty.info:/home/git/repository/blog.git</code> 将 Hexo 生成的静态文件都删除掉，只保留 Git 仓库即 <code>.git</code> 文件夹 {此时克隆下来的内容有可能为空（按照之前的步骤配置好以后没有通过 Hexo 命令部署到服务器),为空则不用管。}，然后将 Hexo 源文件拷贝到该仓库里面，通过 Git 来将里面的内容上传到服务器仓库的 source 分支上，这样在其他电脑上就可以将源文件拷贝下来然后继续该博客的工作了。</li></ul><blockquote><p><strong>注意</strong>：通过 <code>hexo d</code> 命令会生成 <code>.deploy_git</code> 文件，在此文件下会存在 git 仓库，这是由 Hexo 生成的，所以在 <code>.gitignore</code> 文件中忽略不掉，不能进行推送。可以手动删除或不增加该文件，然后将源文件推送到仓库中。 </p></blockquote><h3 id="gitignore-无效解决办法"><a href="#gitignore-无效解决办法" class="headerlink" title=".gitignore 无效解决办法"></a><code>.gitignore</code> 无效解决办法</h3><p>产生原因：<code>.gitignore</code>只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改<code>.gitignore</code>是无效的。解决方法是先把本地缓存删除（改变成未track 状态），然后再提交：</p><pre class="line-numbers language-shell"><code class="language-shell">git rm -r --cachedgit add .git commit -m "update .gitignore"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h3><h4 id="版本日志"><a href="#版本日志" class="headerlink" title="版本日志"></a>版本日志</h4><ul><li>第一版：2020 年 03 月 25 日</li><li>第二版：2021 年 03 月 28 日</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo - 博客搭建教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Goroutine和Channel</title>
      <link href="/2019/11/02/qian-tan-goroutine-he-channel/"/>
      <url>/2019/11/02/qian-tan-goroutine-he-channel/</url>
      
        <content type="html"><![CDATA[<h1 id="浅谈-Goroutine-和-Channel"><a href="#浅谈-Goroutine-和-Channel" class="headerlink" title="浅谈 Goroutine 和 Channel"></a>浅谈 Goroutine 和 Channel</h1><h3 id="什么是-Goroutine"><a href="#什么是-Goroutine" class="headerlink" title="什么是 Goroutine"></a>什么是 Goroutine</h3><h4 id="进程与线程的关系"><a href="#进程与线程的关系" class="headerlink" title="进程与线程的关系"></a>进程与线程的关系</h4><ul><li>一个进程简单来说就是跑在一台机器上的一个应用程序，它占有独立的内存地址空间。一个进程由一个或多个操作系统线程组成，这些线程共享该进程的内存地址空间。几乎所有的程序都是多线程的，一个并发程序可以在一个处理器或内核上使用多个线程来执行任务，但是同一个程序多个线程在某个时间点同时运行在多核或多处理器上才是真正的并行。</li><li>并行是一种通过使用多处理器以提高速度的能力。所以并发程序可以是并行的，也可以不是。</li></ul><h4 id="什么是协程"><a href="#什么是协程" class="headerlink" title="什么是协程"></a>什么是协程</h4><p>在 Go 中，应用程序每一个并发的执行单元被成为 goroutine （协程），在协程和操作系统线程之间并无一对一的关系：协程是根据一个或多个线程的可用性，映射（多路复用，执行于）在它们之上的；协程调度器在 Go 运行时很好的完成了这个工作。</p><h4 id="创建协程"><a href="#创建协程" class="headerlink" title="创建协程"></a>创建协程</h4><p>当一个程序启动时，其主函数即在一个单独的 goroutine 中运行，我们叫它 main goroutine。新的goroutine 会用 go 语句来创建。在语法上，go 语句是一个普通的函数或方法调用前加上关键字 go 。go语句会使其语句中的函数在一个新创建的 goroutine 中运行，而 go 语句本身会迅速地完成。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">go</span> <span class="token keyword">func</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ul><li>在主函数返回时，所有的 goroutine 都会被直接打断，程序退出。除了从主函数退出或者直接终止程序之外，没有其它的<strong>编程方法</strong>能够让一个 goroutine 来打断另一个的执行，但是可以通过 channel 在不同的 goroutine 进行通信。</li><li>在 Go 中有一句话<strong>不要通过共享内存来通信，而应该通过通信来共享内存</strong>，所以 channel 就是这句话的后者。</li></ul><h3 id="什么是-Channel"><a href="#什么是-Channel" class="headerlink" title="什么是 Channel"></a>什么是 Channel</h3><h4 id="创建-channel"><a href="#创建-channel" class="headerlink" title="创建 channel"></a>创建 channel</h4><p>channel 是 goroutine 之间的通信机制。它可以让一个 goroutine 给另一个 goroutine 发送值信息。每个 channel 都有自己可以发送的数据类型，它的底层数据结构为引用类型，所以用 make 函数进行创建。</p><pre class="line-numbers language-go"><code class="language-go">ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用-channel"><a href="#使用-channel" class="headerlink" title="使用 channel"></a>使用 channel</h4><p>一个 channel 有发送和接受两个主要操作，都是通信行为。一个发送语句将一个值从一个 goroutine 通过 channel 发送到另一个执行接收操作的 goroutine 。发送和接收两个操作都使用 <code>&lt;-</code> 运算符。在发送语句中，<code>&lt;-</code> 运算符分割 channel 和要发送的值。在接收语句中，<code>&lt;-</code> 运算符写在 channel 对象之前。一个不使用接收结果的接收操作也是合法的。</p><pre class="line-numbers language-go"><code class="language-go">ch <span class="token operator">&lt;-</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// a send statement</span>x <span class="token operator">:=</span> <span class="token operator">&lt;-</span> ch <span class="token comment" spellcheck="true">// a receive expression</span><span class="token operator">&lt;-</span> ch <span class="token comment" spellcheck="true">// a receive statement</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>channel 还支持 close 操作，用于关闭 channel ，关闭之后的 channel 进行发送和重复 close 操作都将导致 panic 异常。但是此时还可以进行接收操作，并且可以接受到之前已经发送成功的数据；如果 channel 中已经没有数据的话将产生一个零值数据。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>channel 还分为带缓存的 channel 和不带缓存的 channel ，不带缓存的 channel 会造成发送方所在的goroutine 阻塞直到有接收方 goroutine 在相同的 channel 上执行接收操作，才可以执行后面的语句。</p><pre class="line-numbers language-go"><code class="language-go">ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>带缓存的 channel 内部持有一个元素队列。队列的最大容量是 make 函数创建 channel 时通过第二个参数指定的。创建三个字符串的带缓存的 channel:</p><pre class="line-numbers language-go"><code class="language-go">ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://go.wuhaolin.cn/gopl/images/ch8-02.png" alt></p><p>向缓存 channel 的发送操作就是向内部缓存队列的尾部插入元素，接收操作则是从队列的头部删除元素。如果内部缓存队列是满的，那么发送操作将阻塞直到因另一个 goroutine 执行接收操作而释放了新的队列空间。相反，如果 channel 是空的，接收操作将阻塞直到有另一个 goroutine 执行发送操作而向队列插入元素。</p><h3 id="Go-Channel-踩坑"><a href="#Go-Channel-踩坑" class="headerlink" title="Go Channel 踩坑"></a>Go Channel 踩坑</h3><p>在 Go 中使用无缓存的 channel （同步channel）在不同的协程来进行通信时，下面这种写法会造成死锁：</p><pre class="line-numbers language-go"><code class="language-go">    no <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    no <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">:=</span> <span class="token operator">&lt;-</span>no        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原因是无缓存的 channel 在发送（接收）数据时都会造成阻塞，直到其他协程从该 channel 中接收（发送）数据。所以上面的代码问题在于第二行发送数据一直会阻塞，从而后面开启协程的操作也执行不到，造成死锁。踩了这个坑才理解 《Go 圣经中文版》8.4.1节中下面这句话的含义：</p><blockquote><p>基于无缓存Channels的发送和接收操作将导致两个goroutine做一次同步操作。因为这个原因，无缓存Channels有时候也被称为同步Channels。<strong>当通过一个无缓存Channels发送数据时，接收者收到数据发生在唤醒发送者goroutine之前</strong>（译注：<em>happens before</em>，这是Go语言并发内存模型的一个关键术语！）。</p></blockquote><p>所以正确的代码应该是这样：</p><pre class="line-numbers language-go"><code class="language-go">    no <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">:=</span> <span class="token operator">&lt;-</span>no        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    no <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于-goroutine-和-channel-的补充（2020-12-9）"><a href="#关于-goroutine-和-channel-的补充（2020-12-9）" class="headerlink" title="关于 goroutine 和 channel 的补充（2020.12.9）"></a>关于 goroutine 和 channel 的补充（2020.12.9）</h3><p><a href="https://yourbasic.org/golang/concurrent-programming/" target="_blank" rel="noopener">Concurrent programming</a></p><p><a href="https://medium.com/rungo/anatomy-of-channels-in-go-concurrency-in-go-1ec336086adb" target="_blank" rel="noopener">Anatomy of Channels in Go - Concurrency in Go</a></p><h3 id="修正"><a href="#修正" class="headerlink" title="修正"></a>修正</h3><p>关于正确理解 channel 还需要理解 Go 内存模型。</p><p><a href="https://golang.org/ref/mem" target="_blank" rel="noopener">The Go Memory Model</a></p><p><a href="https://tiancaiamao.gitbooks.io/go-internals/content/zh/10.1.html" target="_blank" rel="noopener">网上的解释</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Go concurrent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言ORM之XORM</title>
      <link href="/2019/10/28/go-yu-yan-orm-zhi-xorm/"/>
      <url>/2019/10/28/go-yu-yan-orm-zhi-xorm/</url>
      
        <content type="html"><![CDATA[<h1 id="Go-xorm-快速入门"><a href="#Go-xorm-快速入门" class="headerlink" title="Go-xorm 快速入门"></a>Go-xorm 快速入门</h1><h3 id="一-xorm是什么"><a href="#一-xorm是什么" class="headerlink" title="一.xorm是什么"></a>一.xorm是什么</h3><p>xorm是一个简单而强大的Go语言ORM库. 通过它可以使数据库操作非常简便。</p><h3 id="二-特性"><a href="#二-特性" class="headerlink" title="二.特性"></a>二.特性</h3><ul><li>支持Struct和数据库表之间的灵活映射，并支持自动同步</li><li>事务支持</li><li>同时支持原始SQL语句和ORM操作的混合执行</li><li>使用连写来简化调用</li><li>支持使用Id, In, Where, Limit, Join, Having, Table, Sql, Cols等函数和结构体等方式作为条件</li><li>支持级联加载Struct</li><li>Schema支持（仅Postgres）</li><li>支持缓存</li><li>支持根据数据库自动生成xorm的结构体</li><li>支持记录版本（即乐观锁）</li><li>内置SQL Builder支持</li><li>上下文缓存支持</li></ul><h3 id="三-驱动支持"><a href="#三-驱动支持" class="headerlink" title="三.驱动支持"></a>三.驱动支持</h3><p>目前支持的Go数据库驱动和对应的数据库如下：</p><ul><li>Mysql: <a href="https://github.com/go-sql-driver/mysql" target="_blank" rel="noopener">github.com/go-sql-driver/mysql</a></li><li>MyMysql: <a href="https://github.com/ziutek/mymysql/godrv" target="_blank" rel="noopener">github.com/ziutek/mymysql/godrv</a></li><li>Postgres: <a href="https://github.com/lib/pq" target="_blank" rel="noopener">github.com/lib/pq</a></li><li>Tidb: <a href="https://github.com/pingcap/tidb" target="_blank" rel="noopener">github.com/pingcap/tidb</a></li><li>SQLite: <a href="https://github.com/mattn/go-sqlite3" target="_blank" rel="noopener">github.com/mattn/go-sqlite3</a></li><li>MsSql: <a href="https://github.com/denisenkom/go-mssqldb" target="_blank" rel="noopener">github.com/denisenkom/go-mssqldb</a></li><li>MsSql: <a href="https://github.com/lunny/godbc" target="_blank" rel="noopener">github.com/lunny/godbc</a></li><li>Oracle: <a href="https://github.com/mattn/go-oci8" target="_blank" rel="noopener">github.com/mattn/go-oci8</a> </li></ul><h3 id="四-安装"><a href="#四-安装" class="headerlink" title="四.安装"></a>四.安装</h3><p><code>go get github.com/go-xorm/xorm</code></p><h3 id="五-相关文档"><a href="#五-相关文档" class="headerlink" title="五.相关文档"></a>五.相关文档</h3><p><a href="http://xorm.io/docs" target="_blank" rel="noopener">官方文档</a></p><p><a href="https://www.kancloud.cn/kancloud/xorm-manual-zh-cn/56013" target="_blank" rel="noopener">官方文档(中文版)</a></p><p><a href="https://godoc.org/github.com/go-xorm/xorm" target="_blank" rel="noopener">Godoc代码文档</a></p><h3 id="六-快速入门"><a href="#六-快速入门" class="headerlink" title="六.快速入门"></a>六.快速入门</h3><p>简单示例，更多操作请查看官方文档。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"log"</span>    <span class="token string">"os"</span>    <span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span>    <span class="token string">"github.com/go-xorm/xorm"</span><span class="token punctuation">)</span><span class="token keyword">var</span> engine <span class="token operator">*</span>xorm<span class="token punctuation">.</span>Engine<span class="token comment" spellcheck="true">// User 用户表</span><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>    ID     <span class="token builtin">int</span> <span class="token string">`xorm:"Int  pk notnull autoincr unique id "`</span> <span class="token comment" spellcheck="true">// 用户表的主键 后面为 xorm 的 tags，具体实现可查看官方文档。</span>    Name   <span class="token builtin">string</span>    Passwd <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建日志文件(默认该文件不存在)</span>    <span class="token keyword">var</span> file <span class="token operator">*</span>os<span class="token punctuation">.</span>File    <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token function">isFileExist</span><span class="token punctuation">(</span><span class="token string">"sql.log"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"sql.log"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"create log file fail"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    logger <span class="token operator">:=</span> xorm<span class="token punctuation">.</span><span class="token function">NewSimpleLogger</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>                                         <span class="token comment" spellcheck="true">// 创建日志对象</span>    engine<span class="token punctuation">,</span> err <span class="token operator">:=</span> xorm<span class="token punctuation">.</span><span class="token function">NewEngine</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> <span class="token string">"root:123@/test?charset=utf8"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 创建数据库引擎</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"create engine fail "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建 User 表</span>    ok<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> engine<span class="token punctuation">.</span><span class="token function">IsTableExist</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>        err <span class="token operator">=</span> engine<span class="token punctuation">.</span><span class="token function">CreateTables</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"create  tabel fail "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 开启事务</span>    session <span class="token operator">:=</span> engine<span class="token punctuation">.</span><span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> session<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    err <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"start session fail"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 插入数据</span>    ok<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> engine<span class="token punctuation">.</span><span class="token function">IsTableEmpty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ok <span class="token punctuation">{</span>        user1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span>            ID<span class="token punctuation">:</span>     <span class="token number">1</span><span class="token punctuation">,</span>            Name<span class="token punctuation">:</span>   <span class="token string">"hh"</span><span class="token punctuation">,</span>            Passwd<span class="token punctuation">:</span> <span class="token string">"123"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> engine<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"insert data error"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用 sql 语句方式插入数据</span>    user <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> engine<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"insert into `user`(name,passwd) values(?,?) "</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        session<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"exec  fail"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 查询结果</span>    rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> engine<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"id >= ?"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Rows</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"select  data fail"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        err <span class="token operator">=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"range  fail"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 提交事务</span>    err <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"session commit fail"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// isFileExist</span><span class="token keyword">func</span> <span class="token function">isFileExist</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>b <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取文件的信息</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> os<span class="token punctuation">.</span><span class="token function">IsNotExist</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"file is not exist"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Go语言ORM库 </tag>
            
            <tag> xorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客在Github实现同步管理</title>
      <link href="/2019/10/27/hexo-bo-ke-zai-github-shi-xian-tong-bu-guan-li/"/>
      <url>/2019/10/27/hexo-bo-ke-zai-github-shi-xian-tong-bu-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-博客在-Github-实现同步管理"><a href="#Hexo-博客在-Github-实现同步管理" class="headerlink" title="Hexo 博客在 Github 实现同步管理"></a>Hexo 博客在 Github 实现同步管理</h1><h3 id="一-Hexo-部署到-Github-的过程"><a href="#一-Hexo-部署到-Github-的过程" class="headerlink" title="一.Hexo 部署到 Github 的过程"></a>一.Hexo 部署到 Github 的过程</h3><p>我们通过 <code>hexo init</code> 命令会生成 Hexo 博客的源文件，Hexo 通过 <code>hexo g</code> 命令将  <code>hexo new</code> 命令生成的 <code>xxx.md</code> 文件生成对应的 <code>html</code> 文件（自动创建 public 的文件夹，所有的静态文件都存放在该文件夹下面）。然后 <code>hexo d</code> 命令会根据 <code>_config.yml</code> 文件里面的 git 仓库配置，创建 <code>.deploy_git</code> 文件夹（里面的内容也就是 public 文件夹下的静态文件）将该文件下的内容推送到 git 仓库中，在 Github 上显示的内容也就是该文件夹下的静态文件。</p><h3 id="二-实现思路"><a href="#二-实现思路" class="headerlink" title="二.实现思路"></a>二.实现思路</h3><p>利用 Github 的分支管理可以完成同步操作，在 Github 上创建两个分支，一个分支存放我们要部署的静态文件（也就是我们可以展示的内容），另一个分支存放 Hexo 生成的源文件。Hexo 源文件通过 git 来管理，而我们要展示的部分通过 Hexo 来管理。</p><p><img src="https://pic3.zhimg.com/80/v2-fac8f8564c4f1de0c54e3c142ae1f81d_hd.jpg" alt></p><h3 id="三-实现过程"><a href="#三-实现过程" class="headerlink" title="三.实现过程"></a>三.实现过程</h3><p>在 Github 上新建一个 hexo 分支，将该分支设为默认分支（目的是通过 git 管理 hexo 的源文件），然后在本地任意目录下进行 <code>git clone</code> 操作（也就是克隆 Hexo 的源文件），把除了.git 文件夹外的所有文件都删掉把之前我们写的博客源文件全部复制过来（除了 <code>.deploy_git</code> ）复制过来的源文件中有一个 <code>.gitignore</code>，用来忽略一些不需要的文件。如果没有的话，自己新建一个内容如下：</p><pre><code>.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/</code></pre><blockquote><p>​    <strong>注意：</strong> 如果你之前在 theme 文件夹中克隆过主题文件，那么应该把主题文件中的 <code>.git</code> 文件夹删掉。因为 git 不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传。</p></blockquote><p>然后就可以通过 git 命令将 Hexo 的源文件上传到 Github 中了。其中<code>node_modules</code>、<code>public</code>、<code>db.json</code>已经被忽略掉了，在其他电脑上只需要安装相应的环境后，在任意文件夹下将 Hexo 的源文件进行克隆（不要 <code>hexo init</code>，因为这个命令就是生成我们传到 Github 上面的 Hexo 博客的源文件 ），然后执行如下命令即可:</p><pre class="line-numbers language-shell"><code class="language-shell">//安装npm installnpm install hexo-deployer-git --save //编译，部署hexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四-说明"><a href="#四-说明" class="headerlink" title="四.说明"></a>四.说明</h3><ul><li><p>工作完成之后记得通过 git 命令，把源文件上传到 git 仓库中。</p></li><li><p>如果在已经编辑过的电脑上，只需要和远端的仓库同步一下即可（<code>git pull</code>）。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo博客教程 </tag>
            
            <tag> 同步管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件目录管理</title>
      <link href="/2019/10/01/linux-wen-jian-mu-lu-guan-li/"/>
      <url>/2019/10/01/linux-wen-jian-mu-lu-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux文件目录管理"><a href="#Linux文件目录管理" class="headerlink" title="Linux文件目录管理"></a>Linux文件目录管理</h1><h2 id="一．关于Linux文件目录系统的说明。"><a href="#一．关于Linux文件目录系统的说明。" class="headerlink" title="一．关于Linux文件目录系统的说明。"></a>一．关于Linux文件目录系统的说明。</h2><ol><li><p>Linux 将文件系统挂载到特定的目录下，根文件系统 “/“ 是最初建立的文件系统。</p></li><li><p>Linux 的每个系统目录都有其特定的功能。</p></li></ol><h2 id="二．文件目录管理常用命令。"><a href="#二．文件目录管理常用命令。" class="headerlink" title="二．文件目录管理常用命令。"></a>二．文件目录管理常用命令。</h2><ul><li><strong>建立文件和目录</strong></li></ul><ol><li><p>创建目录 mkdir 创建单层目录，可以使用 -p 递归创建目录。</p></li><li><p>创建空文件 touch + 文件名,它在自动备份和整理文件时特别有用。</p></li></ol><ul><li><strong>移动、复制和删除</strong></li></ul><ol><li><p>移动 mv 可以移动文件和目录，如果在移动过程中有相同文件则会覆盖原来的文件。可以加上 -i 询问是否进行覆盖操作，-b 是在源文件名后面加上 ~ 符号。mv 可用于重命名，这相当于一个文件在同一个文件夹下移动。</p></li><li><p>复制文件和目录 cp ，和 mv 用法一样也可以加上上面的参数。复制目录的时候如果不加上参数默认跳过目录，-r 会将该目录下的文件复制到目标目录下。</p></li><li><p>删除文件和目录 rm ，该指令一旦使用会使得文件永久的删除，同样加上 -i 参数可以增加提示信息。-r 可以递归的删除该目录下的所有东西。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell目录管理命令 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell基本命令</title>
      <link href="/2019/09/30/shell-ji-ben-ming-ling/"/>
      <url>/2019/09/30/shell-ji-ben-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-基本命令"><a href="#Shell-基本命令" class="headerlink" title="Shell 基本命令"></a>Shell 基本命令</h1><h3 id="一-Shell-的定义及说明"><a href="#一-Shell-的定义及说明" class="headerlink" title="一.Shell 的定义及说明"></a>一.Shell 的定义及说明</h3><h4 id="1-Shell-定义"><a href="#1-Shell-定义" class="headerlink" title="1.Shell 定义"></a>1.Shell 定义</h4><p>Shell 是命令解释器程序。将用户输入的命令解释为指令代码发送给操作系统，是在用户和操作系统之间提供的可交互接口。</p><h4 id="2-说明"><a href="#2-说明" class="headerlink" title="2.说明"></a>2.说明</h4><ul><li><p>Shell 最常用的是 BASH(bourne again shell) shell。 <strong>$</strong> 是命令行的提示符，如果以 root 权限运行命令则变为 <strong>#</strong>。</p><blockquote><p>提示：在 BASH 前面还有一些信息包括用户名、主机名和当前目录。　如: leweis@leweis-PC:~/blog$</p></blockquote></li><li><p>sudo 工具可以临时提高用户权限。</p></li><li><p>/home 目录下是 Linux 用户目录，/etc 是系统绝大部分应用的配置文件。</p><blockquote><p>系统命令本质上就是一些可执行文件,在/usr/bin目录下可以找到</p></blockquote></li><li><p>Shell 中的通配符:</p><ul><li><code>*</code> 表示一个或多个。</li><li>? 表示一个</li><li>[] 表示匹配中括号中的一个或多个字符，范围可以用 - 来表示。</li></ul></li><li><p>~ 表示用户的主目录。</p></li></ul><h3 id="二-Shell-常用命令"><a href="#二-Shell-常用命令" class="headerlink" title="二.Shell 常用命令"></a>二.Shell 常用命令</h3><h4 id="1-ls"><a href="#1-ls" class="headerlink" title="1.ls　"></a>1.ls　</h4><ul><li>列出目录下的内容。 -a 表示列出所有文件包括隐藏文件. -F 在目录后面会加上 / ,可执行文件后加上 * ，链接文件加上@, -l 查看文件的各种属性。</li></ul><blockquote><p>ls -l 从左到右依次表示文件权限、文件链接个数、文件所有者的用户名、用户所在用户组、文件大小、文件最后被修改的日期、时间、文件名。</p></blockquote><h4 id="2-cd-amp-amp-pwd"><a href="#2-cd-amp-amp-pwd" class="headerlink" title="2.cd &amp;&amp; pwd"></a>2.cd &amp;&amp; pwd</h4><ul><li><p>cd 进入目录。　..　表示上一级目录, . 表示当前目录　。</p></li><li><p>pwd 表示列出当前所在目录。</p></li></ul><h4 id="3-cat-amp-amp-more"><a href="#3-cat-amp-amp-more" class="headerlink" title="3.cat &amp;&amp; more"></a>3.cat &amp;&amp; more</h4><ul><li><p>用于查看文本文件。　cat 后面跟文件名作为参数（一个或多个文件名），-n 可以用来显示行号。</p></li><li><p>cat 的缺点就是会将所有的内容显示出来，可以使用 more 命令来显示　enter　向下翻动一行, 空格键向下翻动一页、Q退出。</p></li></ul><h4 id="4-head-amp-amp-tail"><a href="#4-head-amp-amp-tail" class="headerlink" title="4.head &amp;&amp; tail"></a>4.head &amp;&amp; tail</h4><ul><li>查看文件内容的开头和结尾，-n 指定显示的行数。</li></ul><h4 id="5-less"><a href="#5-less" class="headerlink" title="5.less"></a>5.less</h4><ul><li>和 more　命令的作用一样功能更多，使用 b 向上翻一页，/可用于查找内容, -M 可以显示更多的信息。</li></ul><h4 id="6-grep"><a href="#6-grep" class="headerlink" title="6.grep"></a>6.grep</h4><ul><li>查找内容。有两个不同的参数分别是查找的内容和文件名字。</li></ul><h4 id="7-find"><a href="#7-find" class="headerlink" title="7.find"></a>7.find</h4><ul><li>查找指定范围内的文件。语法如下</li></ul><blockquote><p>find [OPTION] [path…] [expression] </p></blockquote><p><strong>示例：</strong> find /usr/bin -name zip -type d -print</p><h4 id="8-located"><a href="#8-located" class="headerlink" title="8.located"></a>8.located</h4><ul><li>快速定位文件。它可以自动建立整个文件名数据库。　</li></ul><blockquote><p>located *.doc</p></blockquote><h4 id="9-whereis-amp-amp-man-amp-amp-whatis-amp-amp-apropos"><a href="#9-whereis-amp-amp-man-amp-amp-whatis-amp-amp-apropos" class="headerlink" title="9.whereis &amp;&amp; man &amp;&amp; whatis &amp;&amp; apropos"></a>9.whereis &amp;&amp; man &amp;&amp; whatis &amp;&amp; apropos</h4><ul><li><p>whereis 查找程序文件，包括可执行文件、源码和使用手册的所在处。可以使用 -b 参数指定查找二进制文件所在处。如果没找到则返回空的字符串！</p></li><li><p>它的缺点在于检索的子目录都是固定的。</p></li><li><p>man 提供用户的帮助手册。</p></li><li><p>whatis 帮助用户了解这个命令的作用。</p></li><li><p>apropos 是通过手册中反查到某个命令。</p></li></ul><h3 id="三-其他一些常用指令"><a href="#三-其他一些常用指令" class="headerlink" title="三.其他一些常用指令"></a>三.其他一些常用指令</h3><ul><li><p>从终端运行程序，可以直接运行该指令。也可以通过指令程序+&amp; 后台运行程序。</p></li><li><p>查看用户的版本和用户：</p></li><li><p>whoami who ：他们的区别在于用户是谁。</p></li><li><p>uname -a 显示当前系统版本的所有信息。　uname -r 显示当前系统的内核版本。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell基本命令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.png","path":"medias/reward/alipay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1572310863846},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1572310863846},{"_id":"themes/hexo-theme-matery/README.md","hash":"388c76e2570e9164b694574f867476f4846a94ba","modified":1572310863846},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"302393db1fa6c0911558402ab8c75745516fa5ed","modified":1572310863846},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"b80d7c37fd11ec6383f5cf43b67f480c0f56f81c","modified":1572310863846},{"_id":"source/_data/friends.json","hash":"ed2bc844047e1dde553d4b3a1910b8f736f7417e","modified":1572310863846},{"_id":"source/_data/musics.json","hash":"c3f0d91e63c338c940bce9a638e3b54c390e98a7","modified":1572310863846},{"_id":"source/_posts/Go-xorm快速入门.md","hash":"b9f4512ab030698a55d785365e40cd0c728193b3","modified":1572310863846},{"_id":"source/_posts/Hexo博客同步管理.md","hash":"231f62e7bab4ab9ee4a474122eb395d08d1e1e04","modified":1572310863846},{"_id":"source/_posts/Linux文件目录管理.md","hash":"722b2767b471374e2ec47b945e26426e0dfe18d3","modified":1572675640159},{"_id":"source/_posts/Shell基本命令.md","hash":"bbe5cbf83bf01ec605db0b0dfe023d1e3d97b539","modified":1572675646367},{"_id":"source/_posts/浅谈Goroutine和Channel.md","hash":"275801d0439ac6c5ae6dee216363393959ab943b","modified":1572675721187},{"_id":"source/about/index.md","hash":"a61dc341018b7e07f06ac34ed6da056409f74dfd","modified":1572310863846},{"_id":"source/categories/index.md","hash":"bd02d257f77b2a66932916d2f6eebf8d927694ef","modified":1572310863846},{"_id":"source/friends/index.md","hash":"9d126e3012bf24fe26f2767d82f0910e1a68ff58","modified":1572310863846},{"_id":"source/tags/index.md","hash":"7021b149dd546d41ff2ca21fbb679bf3b9c2f264","modified":1572310863846},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"0dabf7ed059bfe20561288c2e178f0640d9a0b3b","modified":1572310863846},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a34ae486c288a4966c5968abc29d3f40207d6d2f","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"ee639d0310867976b3e5fb9f92c215a17a433703","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"3148f475a51aea398765b4114906d24f5c9316f2","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"1963cae03c384d75b04a02e23b4c4e9917b15adb","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"1c08e2257a756d7ce40eedfdb80e642fbd5215ed","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"fe1208a55b41529cf6df2991211800a071b4c7fd","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"10f20cf017af6f46c035e5f7080fa4b70a9dd239","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"f9662a96d0f497a3b2731472b8ad871c7cbdf13a","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"f29bc13f05f4aa3a3826c1fa7fe9f52b5a06583b","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1572310863846},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"8c0038f5897f96abf43ae24602c3c2ca49f6d7b8","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"8c91d2088c9bb323246b054d4940bde6cead6828","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"4fc19e174288381cff29c0a201f58dd48ad11297","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"a0f53d1a9b579d52e52ccad8c6e330bf3b89547e","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"ba6c817f3cdf8ba95eecc3bae4b772c6566836e6","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"e4c5bf28ddc29519eee8debe79cce45bf279adeb","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"0abfb51dc80ad063fb2118bee28de6bb8d99ed4e","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"1f337fe1343f87fc958eded799a9ac93fc194e87","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"e253c813b3ee5ed924700a95133741802e58adc5","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"6583c00323d891a03343b6a621a0484a68d74f8a","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"b70a2d40677d64d6b56fc51ac1331ad3a50e777c","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"20216e7ad6b48d4a4f8d11d6881e667e5186820f","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"68a24cad2b2049c4dc3a250aa30bf4256f9e50cb","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"5b423384b9c0fe77acc4247a8a85304022e5bd2a","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"d4114c22126704cc1754d6d28cb00aec020b428b","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"f06a29c00cd58fe8159e7b1e7a5ea8277b97f25b","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"2b2fe8e8e94e65c52a4dbd454168e9b9df6baf10","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"1e3d523ff4c3234cf311c895767b0d7ce0d63a0d","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"3d61d4acde8d27a63072145130d2661df8c05df7","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"3dff4f6a73973b0b32f40604244255f3c2a5bb78","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"942609b9240d5c8c09b24562fc8fb31eabe1cae4","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"34f8e4250bb66012026aa50686a7c89a0414ca1b","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"62e10bf4577946190e9c31dcdc2799a4ad1d00dd","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"90527186fc8ed906eb1f20b59bc7f86caab9087b","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"a5a10d6fa66a389d0253d7a52e0a646af6e8e9be","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"f5561dd7d53d68897a33090bf677719213459b19","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"684450f0b42f89ab70370c5248b34e55b7adf6fc","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"8eafddbd73fed80e85c66d49837c1a241b087258","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f81eb2891bea326908057029e2a063001371ba9b","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"b9bf70ec5d97b0e14bb1b4f60f92db7680be5949","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"bd0edf8dad95b2255890d59fb6d6ed6f2eab9c2f","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"0b0a3eb6af29bf0d55d535958c44b01c0f18d10d","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"af0604623db37ef800bb7ad48028d18d99efbbc3","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"babaa0cb32146870785449c70748721235e4eff0","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"a3725f0e3a405acb595b04630a27765b537fb580","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"cb7a0151cd20e90351e151c22bca9d4c3112f234","modified":1572310863846},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"bda810cc135b52f834f1c1ccf52defccacace714","modified":1572310863846},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1572310863846},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"7f1dce9c593b92857daf4ee3ba7ab23e4494084a","modified":1572310863846},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1572310863846},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1572310863846},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"92f07106944f5ef7cd72e84bb3534513d00eebe1","modified":1572310863846},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1572310863846},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"3924cbb7a93a8dd540ed48ca422115d2eb49b401","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"87ea72ce9a797204445bbf5e656a6d00edea2c8e","modified":1572310863906},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1572310863846},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1572310863846},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1572310863846},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1572310863854},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1572310863854},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1572310863858},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1572310863858},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1572310863858},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1572310863858},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1572310863882},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"39fa5a541e814c823ad6f70ac8c54c0aed631548","modified":1572310863906},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.png","hash":"16667096458ca716b7e2c78c82bb5e9fc33bd787","modified":1572310863906},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"c2ed3d1cee5a12669fb8e7eee1ae2bdc9f40dee3","modified":1572310863906},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1572310863846},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1572310863850},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1572310863854},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1572310863858},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1572310863858},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"031c1a5640d64ab3b829395ad5a7596b9fb122e6","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1572310863850},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1572310863858},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1572310863858},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1572310863858},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1572310863858},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1572310863858},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1572310863858},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1572310863858},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1572310863858},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1572310863858},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"80ae4aa0dba3634dd9bf59586d541d2dd8d8191c","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1572310863862},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1572310863854},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1572310863850},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1572310863854},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1572310863854},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1572310863850},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"6a043bd649dcd8f04c60fa7c11b994adf971e273","modified":1572310863870},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"f5f11646d026671fefc5fa0d37317de253826446","modified":1572310863866},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"ad47df4bd1641553efb8ae7c68b7ad9514006361","modified":1572310863906},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"74c27578184cc7e9ea32aac784c6ffdc2ff187ea","modified":1572310863882},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1572310863854},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"056e52ca11acc97a54bd6799a991ebfbe2f28e54","modified":1572310863874},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1572310863858},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"39ca89924f7cf67f4bae31dfd5cdb3d0e9f5a012","modified":1572310863882},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"564688cf6e28a1d20d880f27fc8e054d91d9373b","modified":1572310863890},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"46811dbc0cec801aa6424beb6970c042895b5bec","modified":1572310863894},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"e1c0d42b3ca3554fbd2a36fc886b2390baa3a793","modified":1572310863882},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"f9eae0a8d2cc1be5cb9b3ee8746174727db28e85","modified":1572310863906},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"80dd3c477ed6830649908e8bf840f2490eebbbb5","modified":1572310863898},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"f9351ce79328131f399c0977c44357fdcd16915b","modified":1572310863902},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"da64f1cc7f173bddc1b0501b86a2834d98303b25","modified":1572310863886},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"e4e36ae6eeb95eed46da35369c85e68a317ee8db","modified":1572310863866},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"e3bfdc5d55e5148d1ccb177e52d88e47d7751f11","modified":1572310863906},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"695ea3b0e233771385b05e96a28173fd863fb3d7","modified":1572310863874},{"_id":"public/search.xml","hash":"d25aadccef6026f239a839169251f3e98625e840","modified":1572675751029},{"_id":"public/categories/index.html","hash":"ecb646c1a6df017d11f1ec823a2270310c9f2dc5","modified":1572675751267},{"_id":"public/categories/教程/index.html","hash":"174b6d04d64a26d84c4fbc817873806198a66e8a","modified":1572675751267},{"_id":"public/about/index.html","hash":"0064d72966d1c6672533ed5662b8be725316b85c","modified":1572675751267},{"_id":"public/friends/index.html","hash":"ee9c89bc8ae4b721efad53c14568f1846b753563","modified":1572675751267},{"_id":"public/tags/index.html","hash":"eafcd4911e907f93d53ee2b83758b9a4f79831e4","modified":1572675751267},{"_id":"public/2019/11/02/qian-tan-goroutine-he-channel/index.html","hash":"9c735b66ed3ca422b2a029ddecbc640899a09948","modified":1572675751267},{"_id":"public/2019/10/28/go-xorm-kuai-su-ru-men/index.html","hash":"7a0bc35828c71344c191c714e989ffe5c8b171af","modified":1572675751267},{"_id":"public/2019/10/27/hexo-bo-ke-tong-bu-guan-li/index.html","hash":"bfe56ccf1a9e7264efbaaa05863fa8202a94b985","modified":1572675751267},{"_id":"public/2019/10/01/linux-wen-jian-mu-lu-guan-li/index.html","hash":"d0ba5d1de5aac5a056f413c1d7df7c851e6c2249","modified":1572675751267},{"_id":"public/2019/09/30/shell-ji-ben-ming-ling/index.html","hash":"cd7a3af34dcdea41d011801bd6349aa5bdeae415","modified":1572675751267},{"_id":"public/archives/index.html","hash":"a9510d3f995ea11f99ca96186d8c82417def6fc7","modified":1572675751268},{"_id":"public/archives/2019/index.html","hash":"4e84d5171e9dd6dbf90d80d7c75b35fd00bbe718","modified":1572675751268},{"_id":"public/archives/2019/09/index.html","hash":"9f049ca45031a725f71b272b7af3789c944508f8","modified":1572675751268},{"_id":"public/archives/2019/10/index.html","hash":"6926ec0141eb79123fcc7acb75376a045c368a05","modified":1572675751268},{"_id":"public/archives/2019/11/index.html","hash":"e3557e91128371081f6da1aafe8134964f2723ff","modified":1572675751268},{"_id":"public/categories/编程语言/index.html","hash":"95929b8ead302dc9e58b3a87b7baa4b69b2934aa","modified":1572675751268},{"_id":"public/categories/Linux/index.html","hash":"a61477010aa3a2e581b09c693d00ca5fd40a2561","modified":1572675751268},{"_id":"public/index.html","hash":"c7893c29368dadcdbdf5de306cbc20e431ceaeac","modified":1572675751268},{"_id":"public/tags/Hexo博客教程/index.html","hash":"00c50e081f1a8ed6619b3670ffa8692a54b90f90","modified":1572675751268},{"_id":"public/tags/同步管理/index.html","hash":"26dfe833cc3a8d5d27cc7f0c42150938f38ffa13","modified":1572675751268},{"_id":"public/tags/Go/index.html","hash":"8fa65b95bf67fbbc15826e9bbf26586cbb34c081","modified":1572675751268},{"_id":"public/tags/Go语言ORM库/index.html","hash":"5e07f000b4552573861773537723399b1ba3bd67","modified":1572675751268},{"_id":"public/tags/xorm/index.html","hash":"45a0030b800825bea87ea5a9f540141fcec54afb","modified":1572675751268},{"_id":"public/tags/Shell目录管理命令/index.html","hash":"5d689bc53cf035dc641e2985ee7ab595f5688198","modified":1572675751268},{"_id":"public/tags/Linux/index.html","hash":"7193dbbb37015b0c021cda2e4d2b26ec49277ffd","modified":1572675751268},{"_id":"public/tags/Go-并发编程/index.html","hash":"a9d232f2f8685631c97d33a94754b2c69435d0a6","modified":1572675751268},{"_id":"public/tags/Shell基本命令/index.html","hash":"13cc7eb051737184656c24662e7c120935f7b8dc","modified":1572675751269},{"_id":"public/favicon.png","hash":"8c0038f5897f96abf43ae24602c3c2ca49f6d7b8","modified":1572675751275},{"_id":"public/medias/avatar.jpg","hash":"3924cbb7a93a8dd540ed48ca422115d2eb49b401","modified":1572675751275},{"_id":"public/medias/featureimages/9.jpg","hash":"39fa5a541e814c823ad6f70ac8c54c0aed631548","modified":1572675751275},{"_id":"public/medias/reward/alipay.png","hash":"16667096458ca716b7e2c78c82bb5e9fc33bd787","modified":1572675751275},{"_id":"public/medias/reward/wechat.png","hash":"c2ed3d1cee5a12669fb8e7eee1ae2bdc9f40dee3","modified":1572675751275},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1572675751275},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1572675751275},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1572675751275},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1572675751275},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1572675751275},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1572675751275},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1572675751275},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1572675751275},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1572675751275},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"f0a1b849868a6bf351ff98dc3924a4e7254eb88b","modified":1572675751276},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1572675751276},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1572675751276},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1572675751276},{"_id":"public/css/prism-line-numbers.css","hash":"e0db113a99e4a09d2161a539b1652d96e4a22fac","modified":1572675751276},{"_id":"public/medias/logo.png","hash":"87ea72ce9a797204445bbf5e656a6d00edea2c8e","modified":1572675751282},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1572675751284},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1572675751289},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1572675751298},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1572675751298},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1572675751301},{"_id":"public/js/matery.js","hash":"92f07106944f5ef7cd72e84bb3534513d00eebe1","modified":1572675751301},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1572675751301},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1572675751301},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1572675751301},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1572675751301},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1572675751301},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1572675751301},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1572675751301},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1572675751301},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1572675751301},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1572675751301},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1572675751301},{"_id":"public/css/matery.css","hash":"7f1dce9c593b92857daf4ee3ba7ab23e4494084a","modified":1572675751301},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1572675751302},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1572675751302},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1572675751302},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1572675751302},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1572675751302},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1572675751302},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1572675751302},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1572675751302},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1572675751302},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1572675751302},{"_id":"public/libs/valine/Valine.min.js","hash":"031c1a5640d64ab3b829395ad5a7596b9fb122e6","modified":1572675751302},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1572675751302},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1572675751302},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1572675751302},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1572675751302},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1572675751302},{"_id":"public/libs/materialize/materialize.min.css","hash":"580459a012f556fba86438953062013a94b201af","modified":1572675751302},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1572675751302},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1572675751303},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1572675751303},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1572675751303},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1572675751303},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1572675751303},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1572675751303},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1572675751303},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1572675751308},{"_id":"public/medias/banner/2.jpg","hash":"6a043bd649dcd8f04c60fa7c11b994adf971e273","modified":1572675751326},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1572675751326},{"_id":"public/medias/banner/0.jpg","hash":"f5f11646d026671fefc5fa0d37317de253826446","modified":1572675751332},{"_id":"public/medias/featureimages/8.jpg","hash":"ad47df4bd1641553efb8ae7c68b7ad9514006361","modified":1572675751340},{"_id":"public/medias/featureimages/0.jpg","hash":"74c27578184cc7e9ea32aac784c6ffdc2ff187ea","modified":1572675751346},{"_id":"public/medias/banner/3.jpg","hash":"056e52ca11acc97a54bd6799a991ebfbe2f28e54","modified":1572675751348},{"_id":"public/medias/featureimages/2.jpg","hash":"564688cf6e28a1d20d880f27fc8e054d91d9373b","modified":1572675751348},{"_id":"public/medias/featureimages/3.jpg","hash":"46811dbc0cec801aa6424beb6970c042895b5bec","modified":1572675751349},{"_id":"public/medias/banner/6.jpg","hash":"39ca89924f7cf67f4bae31dfd5cdb3d0e9f5a012","modified":1572675751353},{"_id":"public/medias/featureimages/7.jpg","hash":"f9eae0a8d2cc1be5cb9b3ee8746174727db28e85","modified":1572675751377},{"_id":"public/medias/banner/5.jpg","hash":"e1c0d42b3ca3554fbd2a36fc886b2390baa3a793","modified":1572675751378},{"_id":"public/medias/featureimages/4.jpg","hash":"80dd3c477ed6830649908e8bf840f2490eebbbb5","modified":1572675751378},{"_id":"public/medias/featureimages/5.jpg","hash":"f9351ce79328131f399c0977c44357fdcd16915b","modified":1572675751382},{"_id":"public/medias/banner/1.jpg","hash":"e4e36ae6eeb95eed46da35369c85e68a317ee8db","modified":1572675751384},{"_id":"public/medias/featureimages/1.jpg","hash":"da64f1cc7f173bddc1b0501b86a2834d98303b25","modified":1572675751386},{"_id":"public/medias/featureimages/6.jpg","hash":"e3bfdc5d55e5148d1ccb177e52d88e47d7751f11","modified":1572675751388},{"_id":"public/medias/banner/4.jpg","hash":"695ea3b0e233771385b05e96a28173fd863fb3d7","modified":1572675751389}],"Category":[{"name":"教程","_id":"ck2h6jbg00004dpkldtqzt79h"},{"name":"编程语言","_id":"ck2h6jbg7000bdpklccbt4u2f"},{"name":"Linux","_id":"ck2h6jbg9000edpkl3gibwevf"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]},{"_id":"musics","data":[{"name":"你不要担心","artist":"野菊花","url":"http://m7.music.126.net/20191027170640/02781110915ec62188b9d7d5eff477f3/ymusic/0e09/025b/055f/9cf3c49ec151d6e2ffaf25e2841b8bd1.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/NjMLvHvYyWTUmhLHx1aif2pdKZHHluBjqlH62sMyMgU!/b/dFQBAAAAAAAA&bo=7gHqAQAAAAARBzQ!&rf=viewer_4"},{"name":"像我这样的人","artist":"毛不易","url":"http://m7.music.126.net/20191027154717/23decbc2b6bd5225adf00f1ea055234d/ymusic/5605/07fd/b516/a10d9e248c19d9ac2d40d2b0596fc09b.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ADq5ccynY1xyHw2zad7.oHDplnNSZvnbzYlNc3v1lsk!/b/dFABAAAAAAAA&bo=LAIsAQAAAAARFyM!&rf=viewer_4"},{"name":"野狼disco","artist":"宝石gem","url":"http://m8.music.126.net/20191027154810/6da78c5c696c89cd0427656629cb58cd/ymusic/535b/030c/545e/d1cfbd9ca84f6225a839c44ec0d7c94e.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ElGwmyU4C3S6ypwJ4IfeCY6ZA0twTeDOullkQFz1xpw!/b/dL4AAAAAAAAA&bo=9AH0AQAAAAARBzA!&rf=viewer_4"}]}],"Page":[{"title":"about","date":"2019-09-03T00:57:18.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-09-03 08:57:18\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2019-10-29T01:01:03.846Z","path":"about/index.html","comments":1,"_id":"ck2h6jbfw0001dpkl25zkxfr3","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"你不要担心","artist":"野菊花","url":"http://m7.music.126.net/20191027170640/02781110915ec62188b9d7d5eff477f3/ymusic/0e09/025b/055f/9cf3c49ec151d6e2ffaf25e2841b8bd1.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/NjMLvHvYyWTUmhLHx1aif2pdKZHHluBjqlH62sMyMgU!/b/dFQBAAAAAAAA&bo=7gHqAQAAAAARBzQ!&rf=viewer_4"},{"name":"像我这样的人","artist":"毛不易","url":"http://m7.music.126.net/20191027154717/23decbc2b6bd5225adf00f1ea055234d/ymusic/5605/07fd/b516/a10d9e248c19d9ac2d40d2b0596fc09b.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ADq5ccynY1xyHw2zad7.oHDplnNSZvnbzYlNc3v1lsk!/b/dFABAAAAAAAA&bo=LAIsAQAAAAARFyM!&rf=viewer_4"},{"name":"野狼disco","artist":"宝石gem","url":"http://m8.music.126.net/20191027154810/6da78c5c696c89cd0427656629cb58cd/ymusic/535b/030c/545e/d1cfbd9ca84f6225a839c44ec0d7c94e.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ElGwmyU4C3S6ypwJ4IfeCY6ZA0twTeDOullkQFz1xpw!/b/dL4AAAAAAAAA&bo=9AH0AQAAAAARBzA!&rf=viewer_4"}]}},"excerpt":"","more":""},{"title":"categories","date":"2019-09-03T00:55:06.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-09-03 08:55:06\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2019-10-29T01:01:03.846Z","path":"categories/index.html","comments":1,"_id":"ck2h6jbfz0003dpklaor7v4sd","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"你不要担心","artist":"野菊花","url":"http://m7.music.126.net/20191027170640/02781110915ec62188b9d7d5eff477f3/ymusic/0e09/025b/055f/9cf3c49ec151d6e2ffaf25e2841b8bd1.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/NjMLvHvYyWTUmhLHx1aif2pdKZHHluBjqlH62sMyMgU!/b/dFQBAAAAAAAA&bo=7gHqAQAAAAARBzQ!&rf=viewer_4"},{"name":"像我这样的人","artist":"毛不易","url":"http://m7.music.126.net/20191027154717/23decbc2b6bd5225adf00f1ea055234d/ymusic/5605/07fd/b516/a10d9e248c19d9ac2d40d2b0596fc09b.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ADq5ccynY1xyHw2zad7.oHDplnNSZvnbzYlNc3v1lsk!/b/dFABAAAAAAAA&bo=LAIsAQAAAAARFyM!&rf=viewer_4"},{"name":"野狼disco","artist":"宝石gem","url":"http://m8.music.126.net/20191027154810/6da78c5c696c89cd0427656629cb58cd/ymusic/535b/030c/545e/d1cfbd9ca84f6225a839c44ec0d7c94e.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ElGwmyU4C3S6ypwJ4IfeCY6ZA0twTeDOullkQFz1xpw!/b/dL4AAAAAAAAA&bo=9AH0AQAAAAARBzA!&rf=viewer_4"}]}},"excerpt":"","more":""},{"title":"friends","date":"2019-09-03T00:57:48.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-09-03 08:57:48\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2019-10-29T01:01:03.846Z","path":"friends/index.html","comments":1,"_id":"ck2h6jbg30007dpkldl41dkar","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"你不要担心","artist":"野菊花","url":"http://m7.music.126.net/20191027170640/02781110915ec62188b9d7d5eff477f3/ymusic/0e09/025b/055f/9cf3c49ec151d6e2ffaf25e2841b8bd1.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/NjMLvHvYyWTUmhLHx1aif2pdKZHHluBjqlH62sMyMgU!/b/dFQBAAAAAAAA&bo=7gHqAQAAAAARBzQ!&rf=viewer_4"},{"name":"像我这样的人","artist":"毛不易","url":"http://m7.music.126.net/20191027154717/23decbc2b6bd5225adf00f1ea055234d/ymusic/5605/07fd/b516/a10d9e248c19d9ac2d40d2b0596fc09b.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ADq5ccynY1xyHw2zad7.oHDplnNSZvnbzYlNc3v1lsk!/b/dFABAAAAAAAA&bo=LAIsAQAAAAARFyM!&rf=viewer_4"},{"name":"野狼disco","artist":"宝石gem","url":"http://m8.music.126.net/20191027154810/6da78c5c696c89cd0427656629cb58cd/ymusic/535b/030c/545e/d1cfbd9ca84f6225a839c44ec0d7c94e.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ElGwmyU4C3S6ypwJ4IfeCY6ZA0twTeDOullkQFz1xpw!/b/dL4AAAAAAAAA&bo=9AH0AQAAAAARBzA!&rf=viewer_4"}]}},"excerpt":"","more":""},{"title":"tags","date":"2019-09-03T00:57:25.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-09-03 08:57:25\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2019-10-29T01:01:03.846Z","path":"tags/index.html","comments":1,"_id":"ck2h6jbg50009dpkl5jwjvvz9","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"你不要担心","artist":"野菊花","url":"http://m7.music.126.net/20191027170640/02781110915ec62188b9d7d5eff477f3/ymusic/0e09/025b/055f/9cf3c49ec151d6e2ffaf25e2841b8bd1.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/NjMLvHvYyWTUmhLHx1aif2pdKZHHluBjqlH62sMyMgU!/b/dFQBAAAAAAAA&bo=7gHqAQAAAAARBzQ!&rf=viewer_4"},{"name":"像我这样的人","artist":"毛不易","url":"http://m7.music.126.net/20191027154717/23decbc2b6bd5225adf00f1ea055234d/ymusic/5605/07fd/b516/a10d9e248c19d9ac2d40d2b0596fc09b.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ADq5ccynY1xyHw2zad7.oHDplnNSZvnbzYlNc3v1lsk!/b/dFABAAAAAAAA&bo=LAIsAQAAAAARFyM!&rf=viewer_4"},{"name":"野狼disco","artist":"宝石gem","url":"http://m8.music.126.net/20191027154810/6da78c5c696c89cd0427656629cb58cd/ymusic/535b/030c/545e/d1cfbd9ca84f6225a839c44ec0d7c94e.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ElGwmyU4C3S6ypwJ4IfeCY6ZA0twTeDOullkQFz1xpw!/b/dL4AAAAAAAAA&bo=9AH0AQAAAAARBzA!&rf=viewer_4"}]}},"excerpt":"","more":""}],"Post":[{"title":"Hexo博客同步管理","author":"GopherTy","top":true,"cover":false,"toc":true,"date":"2019-10-27T10:18:32.000Z","coverImg":null,"password":null,"summary":null,"reprintPolicy":null,"_content":"# Hexo 博客同步管理\n\n## Hexo 部署到 Github 的过程\n\n我们通过 hexo init 命令会生成 Hexo 的源文件，将编写的 .md 文件部署 Github 时，实际上是通过 hexo g 命令将 .md 文件生成的对应的 .html 文件（自动创建 public 的文件夹下），然后 hexo d 时会在本目录下创建 .deploy_git 文件夹里面的内容也就是 public 文件夹下的静态文件，在 Github 上显示的内容也就是该文件夹下的静态文件。\n\n## 实现思路\n\n利用 Github 的分支管理可以完成同步操作，在 Github 上创建两个分支，一个分支存放我们要部署的静态文件（也就是我们可以展示的内容），另一个分支存放 Hexo 生成的源文件。Hexo 源文件通过 git 来管理，而我们要展示的部分通过 Hexo 来管理。\n\n![](https://pic3.zhimg.com/80/v2-fac8f8564c4f1de0c54e3c142ae1f81d_hd.jpg)\n\n## 操作过程\n\n在 Github 上新建一个 hexo 分支，将该分支设为默认分支（目的是通过 git 管理 hexo 的源文件），然后在本地任意目录下进行 git clone 操作（也就是克隆 Hexo 的源文件），把除了.git 文件夹外的所有文件都删掉把之前我们写的博客源文件全部复制过来（除了 `.deploy_git` ）复制过来的源文件中有一个 `.gitignore`，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要上传到 git 仓库中：\n\n```\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n```\n\n**注意：**如果你之前克隆过 theme 中的主题文件，那么应该把主题文件中的`.git`文件夹删掉，因为 git 不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。\n\n然后就可以通过 git 将 Hexo 的源文件上传到 Github 中了。其中`node_modules`、`public`、`db.json`已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。\n\n最后在其他电脑上只需要安装相应的环境后，在任意文件夹下将 Hexo 的源文件进行克隆（不需要 hexo init）然后执行如下命令即可:\n\n```\n安装 .gitignore 忽略上传的 Hexo 源文件\n\nnpm install\nnpm install hexo-deployer-git --save\n\n编译，部署\n\nhexo g\nhexo d\n\n然后就可以开始此电脑上进行工作了。\n```\n\n## Tips:\n\n１．写完后最好吧源文件都上传一下。\n\n２．如果在已经编辑过的电脑上，只需要和远端的仓库同步一下即可（`git pull`）。","source":"_posts/Hexo博客同步管理.md","raw":"---\ntitle: Hexo博客同步管理\nauthor: GopherTy\ntop: true\ncover: false\ntoc: true\ndate: 2019-10-27 18:18:32\ncoverImg:\npassword:\nsummary: \ntags: \n    - Hexo博客教程\n    - 同步管理\ncategories: 教程\nreprintPolicy:\n---\n# Hexo 博客同步管理\n\n## Hexo 部署到 Github 的过程\n\n我们通过 hexo init 命令会生成 Hexo 的源文件，将编写的 .md 文件部署 Github 时，实际上是通过 hexo g 命令将 .md 文件生成的对应的 .html 文件（自动创建 public 的文件夹下），然后 hexo d 时会在本目录下创建 .deploy_git 文件夹里面的内容也就是 public 文件夹下的静态文件，在 Github 上显示的内容也就是该文件夹下的静态文件。\n\n## 实现思路\n\n利用 Github 的分支管理可以完成同步操作，在 Github 上创建两个分支，一个分支存放我们要部署的静态文件（也就是我们可以展示的内容），另一个分支存放 Hexo 生成的源文件。Hexo 源文件通过 git 来管理，而我们要展示的部分通过 Hexo 来管理。\n\n![](https://pic3.zhimg.com/80/v2-fac8f8564c4f1de0c54e3c142ae1f81d_hd.jpg)\n\n## 操作过程\n\n在 Github 上新建一个 hexo 分支，将该分支设为默认分支（目的是通过 git 管理 hexo 的源文件），然后在本地任意目录下进行 git clone 操作（也就是克隆 Hexo 的源文件），把除了.git 文件夹外的所有文件都删掉把之前我们写的博客源文件全部复制过来（除了 `.deploy_git` ）复制过来的源文件中有一个 `.gitignore`，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要上传到 git 仓库中：\n\n```\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n```\n\n**注意：**如果你之前克隆过 theme 中的主题文件，那么应该把主题文件中的`.git`文件夹删掉，因为 git 不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。\n\n然后就可以通过 git 将 Hexo 的源文件上传到 Github 中了。其中`node_modules`、`public`、`db.json`已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。\n\n最后在其他电脑上只需要安装相应的环境后，在任意文件夹下将 Hexo 的源文件进行克隆（不需要 hexo init）然后执行如下命令即可:\n\n```\n安装 .gitignore 忽略上传的 Hexo 源文件\n\nnpm install\nnpm install hexo-deployer-git --save\n\n编译，部署\n\nhexo g\nhexo d\n\n然后就可以开始此电脑上进行工作了。\n```\n\n## Tips:\n\n１．写完后最好吧源文件都上传一下。\n\n２．如果在已经编辑过的电脑上，只需要和远端的仓库同步一下即可（`git pull`）。","slug":"Hexo博客同步管理","published":1,"updated":"2019-10-29T01:01:03.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2h6jbfr0000dpkllpfmex0h","content":"<h1 id=\"Hexo-博客同步管理\"><a href=\"#Hexo-博客同步管理\" class=\"headerlink\" title=\"Hexo 博客同步管理\"></a>Hexo 博客同步管理</h1><h2 id=\"Hexo-部署到-Github-的过程\"><a href=\"#Hexo-部署到-Github-的过程\" class=\"headerlink\" title=\"Hexo 部署到 Github 的过程\"></a>Hexo 部署到 Github 的过程</h2><p>我们通过 hexo init 命令会生成 Hexo 的源文件，将编写的 .md 文件部署 Github 时，实际上是通过 hexo g 命令将 .md 文件生成的对应的 .html 文件（自动创建 public 的文件夹下），然后 hexo d 时会在本目录下创建 .deploy_git 文件夹里面的内容也就是 public 文件夹下的静态文件，在 Github 上显示的内容也就是该文件夹下的静态文件。</p>\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><p>利用 Github 的分支管理可以完成同步操作，在 Github 上创建两个分支，一个分支存放我们要部署的静态文件（也就是我们可以展示的内容），另一个分支存放 Hexo 生成的源文件。Hexo 源文件通过 git 来管理，而我们要展示的部分通过 Hexo 来管理。</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-fac8f8564c4f1de0c54e3c142ae1f81d_hd.jpg\" alt></p>\n<h2 id=\"操作过程\"><a href=\"#操作过程\" class=\"headerlink\" title=\"操作过程\"></a>操作过程</h2><p>在 Github 上新建一个 hexo 分支，将该分支设为默认分支（目的是通过 git 管理 hexo 的源文件），然后在本地任意目录下进行 git clone 操作（也就是克隆 Hexo 的源文件），把除了.git 文件夹外的所有文件都删掉把之前我们写的博客源文件全部复制过来（除了 <code>.deploy_git</code> ）复制过来的源文件中有一个 <code>.gitignore</code>，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要上传到 git 仓库中：</p>\n<pre><code>.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/</code></pre><p><strong>注意：</strong>如果你之前克隆过 theme 中的主题文件，那么应该把主题文件中的<code>.git</code>文件夹删掉，因为 git 不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。</p>\n<p>然后就可以通过 git 将 Hexo 的源文件上传到 Github 中了。其中<code>node_modules</code>、<code>public</code>、<code>db.json</code>已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。</p>\n<p>最后在其他电脑上只需要安装相应的环境后，在任意文件夹下将 Hexo 的源文件进行克隆（不需要 hexo init）然后执行如下命令即可:</p>\n<pre><code>安装 .gitignore 忽略上传的 Hexo 源文件\n\nnpm install\nnpm install hexo-deployer-git --save\n\n编译，部署\n\nhexo g\nhexo d\n\n然后就可以开始此电脑上进行工作了。</code></pre><h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips:\"></a>Tips:</h2><p>１．写完后最好吧源文件都上传一下。</p>\n<p>２．如果在已经编辑过的电脑上，只需要和远端的仓库同步一下即可（<code>git pull</code>）。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"你不要担心","artist":"野菊花","url":"http://m7.music.126.net/20191027170640/02781110915ec62188b9d7d5eff477f3/ymusic/0e09/025b/055f/9cf3c49ec151d6e2ffaf25e2841b8bd1.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/NjMLvHvYyWTUmhLHx1aif2pdKZHHluBjqlH62sMyMgU!/b/dFQBAAAAAAAA&bo=7gHqAQAAAAARBzQ!&rf=viewer_4"},{"name":"像我这样的人","artist":"毛不易","url":"http://m7.music.126.net/20191027154717/23decbc2b6bd5225adf00f1ea055234d/ymusic/5605/07fd/b516/a10d9e248c19d9ac2d40d2b0596fc09b.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ADq5ccynY1xyHw2zad7.oHDplnNSZvnbzYlNc3v1lsk!/b/dFABAAAAAAAA&bo=LAIsAQAAAAARFyM!&rf=viewer_4"},{"name":"野狼disco","artist":"宝石gem","url":"http://m8.music.126.net/20191027154810/6da78c5c696c89cd0427656629cb58cd/ymusic/535b/030c/545e/d1cfbd9ca84f6225a839c44ec0d7c94e.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ElGwmyU4C3S6ypwJ4IfeCY6ZA0twTeDOullkQFz1xpw!/b/dL4AAAAAAAAA&bo=9AH0AQAAAAARBzA!&rf=viewer_4"}]}},"excerpt":"","more":"<h1 id=\"Hexo-博客同步管理\"><a href=\"#Hexo-博客同步管理\" class=\"headerlink\" title=\"Hexo 博客同步管理\"></a>Hexo 博客同步管理</h1><h2 id=\"Hexo-部署到-Github-的过程\"><a href=\"#Hexo-部署到-Github-的过程\" class=\"headerlink\" title=\"Hexo 部署到 Github 的过程\"></a>Hexo 部署到 Github 的过程</h2><p>我们通过 hexo init 命令会生成 Hexo 的源文件，将编写的 .md 文件部署 Github 时，实际上是通过 hexo g 命令将 .md 文件生成的对应的 .html 文件（自动创建 public 的文件夹下），然后 hexo d 时会在本目录下创建 .deploy_git 文件夹里面的内容也就是 public 文件夹下的静态文件，在 Github 上显示的内容也就是该文件夹下的静态文件。</p>\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><p>利用 Github 的分支管理可以完成同步操作，在 Github 上创建两个分支，一个分支存放我们要部署的静态文件（也就是我们可以展示的内容），另一个分支存放 Hexo 生成的源文件。Hexo 源文件通过 git 来管理，而我们要展示的部分通过 Hexo 来管理。</p>\n<p><img src=\"https://pic3.zhimg.com/80/v2-fac8f8564c4f1de0c54e3c142ae1f81d_hd.jpg\" alt></p>\n<h2 id=\"操作过程\"><a href=\"#操作过程\" class=\"headerlink\" title=\"操作过程\"></a>操作过程</h2><p>在 Github 上新建一个 hexo 分支，将该分支设为默认分支（目的是通过 git 管理 hexo 的源文件），然后在本地任意目录下进行 git clone 操作（也就是克隆 Hexo 的源文件），把除了.git 文件夹外的所有文件都删掉把之前我们写的博客源文件全部复制过来（除了 <code>.deploy_git</code> ）复制过来的源文件中有一个 <code>.gitignore</code>，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要上传到 git 仓库中：</p>\n<pre><code>.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/</code></pre><p><strong>注意：</strong>如果你之前克隆过 theme 中的主题文件，那么应该把主题文件中的<code>.git</code>文件夹删掉，因为 git 不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。</p>\n<p>然后就可以通过 git 将 Hexo 的源文件上传到 Github 中了。其中<code>node_modules</code>、<code>public</code>、<code>db.json</code>已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。</p>\n<p>最后在其他电脑上只需要安装相应的环境后，在任意文件夹下将 Hexo 的源文件进行克隆（不需要 hexo init）然后执行如下命令即可:</p>\n<pre><code>安装 .gitignore 忽略上传的 Hexo 源文件\n\nnpm install\nnpm install hexo-deployer-git --save\n\n编译，部署\n\nhexo g\nhexo d\n\n然后就可以开始此电脑上进行工作了。</code></pre><h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips:\"></a>Tips:</h2><p>１．写完后最好吧源文件都上传一下。</p>\n<p>２．如果在已经编辑过的电脑上，只需要和远端的仓库同步一下即可（<code>git pull</code>）。</p>\n"},{"title":"Go_xorm快速入门","author":"GopherTy","top":false,"cover":false,"toc":true,"date":"2019-10-28T12:10:05.000Z","coverImg":null,"password":null,"summary":null,"reprintPolicy":null,"_content":"# Go-xorm 快速入门\n\n## xorm是什么\n\nxorm是一个简单而强大的Go语言ORM库. 通过它可以使数据库操作非常简便。\n\n## 特性\n\n- 支持Struct和数据库表之间的灵活映射，并支持自动同步\n- 事务支持\n- 同时支持原始SQL语句和ORM操作的混合执行\n- 使用连写来简化调用\n- 支持使用Id, In, Where, Limit, Join, Having, Table, Sql, Cols等函数和结构体等方式作为条件\n- 支持级联加载Struct\n- Schema支持（仅Postgres）\n- 支持缓存\n- 支持根据数据库自动生成xorm的结构体\n- 支持记录版本（即乐观锁）\n- 内置SQL Builder支持\n- 上下文缓存支持\n\n## 驱动支持\n\n目前支持的Go数据库驱动和对应的数据库如下：\n\n- Mysql: [github.com/go-sql-driver/mysql](https://github.com/go-sql-driver/mysql)\n- MyMysql: [github.com/ziutek/mymysql/godrv](https://github.com/ziutek/mymysql/godrv)\n- Postgres: [github.com/lib/pq](https://github.com/lib/pq)\n- Tidb: [github.com/pingcap/tidb](https://github.com/pingcap/tidb)\n- SQLite: [github.com/mattn/go-sqlite3](https://github.com/mattn/go-sqlite3)\n- MsSql: [github.com/denisenkom/go-mssqldb](https://github.com/denisenkom/go-mssqldb)\n- MsSql: [github.com/lunny/godbc](https://github.com/lunny/godbc)\n- Oracle: [github.com/mattn/go-oci8](https://github.com/mattn/go-oci8) \n\n## 安装\n\n```\ngo get github.com/go-xorm/xorm\n```\n\n## 相关文档\n\n[官方文档](http://xorm.io/docs)\n\n[官方文档(中文版)](https://www.kancloud.cn/kancloud/xorm-manual-zh-cn/56013)\n\n[Godoc代码文档](https://godoc.org/github.com/go-xorm/xorm)\n\n## 快速入门\n\n简单示例，更多操作请查看官方文档。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t_ \"github.com/go-sql-driver/mysql\"\n\t\"github.com/go-xorm/xorm\"\n)\n\nvar engine *xorm.Engine\n\n// User 用户表\ntype User struct {\n\tID     int `xorm:\"Int  pk notnull autoincr unique id \"` // 用户表的主键 后面为 xorm 的 tags，具体实现可查看官方文档。\n\tName   string\n\tPasswd string\n}\n\nfunc main() {\n\t// 创建日志文件(默认该文件不存在)\n\tvar file *os.File\n\tdefer file.Close()\n\tif isFileExist(\"sql.log\") {\n\t\tfile, err := os.Create(\"sql.log\")\n\t\tif err != nil {\n\t\t\tfmt.Println(\"create log file fail\", err)\n\t\t}\n\t\tdefer file.Close()\n\t}\n\n\tlogger := xorm.NewSimpleLogger(file)                                         // 创建日志对象\n\tengine, err := xorm.NewEngine(\"mysql\", \"root:123@/test?charset=utf8\") // 创建数据库引擎\n\tif err != nil {\n\t\tlogger.Error(\"create engine fail \", err)\n\t\tos.Exit(1)\n\t}\n\n\t// 创建 User 表\n\tok, _ := engine.IsTableExist(&User{})\n\tif !ok {\n\t\terr = engine.CreateTables(&User{})\n\t\tif err != nil {\n\t\t\tlogger.Error(\"create  tabel fail \", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n\n\t// 开启事务\n\tsession := engine.NewSession()\n\tdefer session.Close()\n\terr = session.Begin()\n\tif err != nil {\n\t\tlogger.Error(\"start session fail\", err)\n\t\tos.Exit(1)\n\t}\n\n\t// 插入数据\n\tok, _ = engine.IsTableEmpty(&User{})\n\tif ok {\n\t\tuser1 := &User{\n\t\t\tID:     1,\n\t\t\tName:   \"hh\",\n\t\t\tPasswd: \"123\",\n\t\t}\n\t\t_, err := engine.Insert(user1)\n\t\tif err != nil {\n\t\t\tlogger.Error(\"insert data error\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n\n\t//使用 sql 语句方式插入数据\n\tuser := &User{}\n\t_, err = engine.Exec(\"insert into `user`(name,passwd) values(?,?) \", \"hello\", \"test\")\n\tif err != nil {\n\t\tsession.Rollback()\n\t\tlogger.Error(\"exec  fail\", err)\n\t\tos.Exit(1)\n\t}\n\n\t// 查询结果\n\trows, err := engine.Where(\"id >= ?\", 1).Rows(user)\n\tif err != nil {\n\t\tlogger.Error(\"select  data fail\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer rows.Close()\n\tfor rows.Next() {\n\t\terr = rows.Scan(user)\n\t\tif err != nil {\n\t\t\tlogger.Error(\"range  fail\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tlog.Println(user)\n\t}\n\n\t// 提交事务\n\terr = session.Commit()\n\tif err != nil {\n\t\tlogger.Error(\"session commit fail\", err)\n\t\tos.Exit(1)\n\t}\n}\n\n// isFileExist\nfunc isFileExist(path string) (b bool) {\n\t_, err := os.Stat(path) // 获取文件的信息\n\tif err != nil && os.IsNotExist(err) {\n\t\tlog.Println(\"file is not exist\", err)\n\t\treturn true\n\t}\n\treturn\n}\n\n```\n\n","source":"_posts/Go-xorm快速入门.md","raw":"---\ntitle: Go_xorm快速入门\nauthor: GopherTy\ntop: false\ncover: false\ntoc: true\ndate: 2019-10-28 20:10:05\ncoverImg:\npassword:\nsummary:\ntags:\n    - Go\n    - Go语言ORM库\n    - xorm\ncategories: 编程语言\nreprintPolicy:\n---\n# Go-xorm 快速入门\n\n## xorm是什么\n\nxorm是一个简单而强大的Go语言ORM库. 通过它可以使数据库操作非常简便。\n\n## 特性\n\n- 支持Struct和数据库表之间的灵活映射，并支持自动同步\n- 事务支持\n- 同时支持原始SQL语句和ORM操作的混合执行\n- 使用连写来简化调用\n- 支持使用Id, In, Where, Limit, Join, Having, Table, Sql, Cols等函数和结构体等方式作为条件\n- 支持级联加载Struct\n- Schema支持（仅Postgres）\n- 支持缓存\n- 支持根据数据库自动生成xorm的结构体\n- 支持记录版本（即乐观锁）\n- 内置SQL Builder支持\n- 上下文缓存支持\n\n## 驱动支持\n\n目前支持的Go数据库驱动和对应的数据库如下：\n\n- Mysql: [github.com/go-sql-driver/mysql](https://github.com/go-sql-driver/mysql)\n- MyMysql: [github.com/ziutek/mymysql/godrv](https://github.com/ziutek/mymysql/godrv)\n- Postgres: [github.com/lib/pq](https://github.com/lib/pq)\n- Tidb: [github.com/pingcap/tidb](https://github.com/pingcap/tidb)\n- SQLite: [github.com/mattn/go-sqlite3](https://github.com/mattn/go-sqlite3)\n- MsSql: [github.com/denisenkom/go-mssqldb](https://github.com/denisenkom/go-mssqldb)\n- MsSql: [github.com/lunny/godbc](https://github.com/lunny/godbc)\n- Oracle: [github.com/mattn/go-oci8](https://github.com/mattn/go-oci8) \n\n## 安装\n\n```\ngo get github.com/go-xorm/xorm\n```\n\n## 相关文档\n\n[官方文档](http://xorm.io/docs)\n\n[官方文档(中文版)](https://www.kancloud.cn/kancloud/xorm-manual-zh-cn/56013)\n\n[Godoc代码文档](https://godoc.org/github.com/go-xorm/xorm)\n\n## 快速入门\n\n简单示例，更多操作请查看官方文档。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t_ \"github.com/go-sql-driver/mysql\"\n\t\"github.com/go-xorm/xorm\"\n)\n\nvar engine *xorm.Engine\n\n// User 用户表\ntype User struct {\n\tID     int `xorm:\"Int  pk notnull autoincr unique id \"` // 用户表的主键 后面为 xorm 的 tags，具体实现可查看官方文档。\n\tName   string\n\tPasswd string\n}\n\nfunc main() {\n\t// 创建日志文件(默认该文件不存在)\n\tvar file *os.File\n\tdefer file.Close()\n\tif isFileExist(\"sql.log\") {\n\t\tfile, err := os.Create(\"sql.log\")\n\t\tif err != nil {\n\t\t\tfmt.Println(\"create log file fail\", err)\n\t\t}\n\t\tdefer file.Close()\n\t}\n\n\tlogger := xorm.NewSimpleLogger(file)                                         // 创建日志对象\n\tengine, err := xorm.NewEngine(\"mysql\", \"root:123@/test?charset=utf8\") // 创建数据库引擎\n\tif err != nil {\n\t\tlogger.Error(\"create engine fail \", err)\n\t\tos.Exit(1)\n\t}\n\n\t// 创建 User 表\n\tok, _ := engine.IsTableExist(&User{})\n\tif !ok {\n\t\terr = engine.CreateTables(&User{})\n\t\tif err != nil {\n\t\t\tlogger.Error(\"create  tabel fail \", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n\n\t// 开启事务\n\tsession := engine.NewSession()\n\tdefer session.Close()\n\terr = session.Begin()\n\tif err != nil {\n\t\tlogger.Error(\"start session fail\", err)\n\t\tos.Exit(1)\n\t}\n\n\t// 插入数据\n\tok, _ = engine.IsTableEmpty(&User{})\n\tif ok {\n\t\tuser1 := &User{\n\t\t\tID:     1,\n\t\t\tName:   \"hh\",\n\t\t\tPasswd: \"123\",\n\t\t}\n\t\t_, err := engine.Insert(user1)\n\t\tif err != nil {\n\t\t\tlogger.Error(\"insert data error\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n\n\t//使用 sql 语句方式插入数据\n\tuser := &User{}\n\t_, err = engine.Exec(\"insert into `user`(name,passwd) values(?,?) \", \"hello\", \"test\")\n\tif err != nil {\n\t\tsession.Rollback()\n\t\tlogger.Error(\"exec  fail\", err)\n\t\tos.Exit(1)\n\t}\n\n\t// 查询结果\n\trows, err := engine.Where(\"id >= ?\", 1).Rows(user)\n\tif err != nil {\n\t\tlogger.Error(\"select  data fail\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer rows.Close()\n\tfor rows.Next() {\n\t\terr = rows.Scan(user)\n\t\tif err != nil {\n\t\t\tlogger.Error(\"range  fail\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tlog.Println(user)\n\t}\n\n\t// 提交事务\n\terr = session.Commit()\n\tif err != nil {\n\t\tlogger.Error(\"session commit fail\", err)\n\t\tos.Exit(1)\n\t}\n}\n\n// isFileExist\nfunc isFileExist(path string) (b bool) {\n\t_, err := os.Stat(path) // 获取文件的信息\n\tif err != nil && os.IsNotExist(err) {\n\t\tlog.Println(\"file is not exist\", err)\n\t\treturn true\n\t}\n\treturn\n}\n\n```\n\n","slug":"Go-xorm快速入门","published":1,"updated":"2019-10-29T01:01:03.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2h6jbfx0002dpklnl20s8u1","content":"<h1 id=\"Go-xorm-快速入门\"><a href=\"#Go-xorm-快速入门\" class=\"headerlink\" title=\"Go-xorm 快速入门\"></a>Go-xorm 快速入门</h1><h2 id=\"xorm是什么\"><a href=\"#xorm是什么\" class=\"headerlink\" title=\"xorm是什么\"></a>xorm是什么</h2><p>xorm是一个简单而强大的Go语言ORM库. 通过它可以使数据库操作非常简便。</p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li>支持Struct和数据库表之间的灵活映射，并支持自动同步</li>\n<li>事务支持</li>\n<li>同时支持原始SQL语句和ORM操作的混合执行</li>\n<li>使用连写来简化调用</li>\n<li>支持使用Id, In, Where, Limit, Join, Having, Table, Sql, Cols等函数和结构体等方式作为条件</li>\n<li>支持级联加载Struct</li>\n<li>Schema支持（仅Postgres）</li>\n<li>支持缓存</li>\n<li>支持根据数据库自动生成xorm的结构体</li>\n<li>支持记录版本（即乐观锁）</li>\n<li>内置SQL Builder支持</li>\n<li>上下文缓存支持</li>\n</ul>\n<h2 id=\"驱动支持\"><a href=\"#驱动支持\" class=\"headerlink\" title=\"驱动支持\"></a>驱动支持</h2><p>目前支持的Go数据库驱动和对应的数据库如下：</p>\n<ul>\n<li>Mysql: <a href=\"https://github.com/go-sql-driver/mysql\">github.com/go-sql-driver/mysql</a></li>\n<li>MyMysql: <a href=\"https://github.com/ziutek/mymysql/godrv\">github.com/ziutek/mymysql/godrv</a></li>\n<li>Postgres: <a href=\"https://github.com/lib/pq\">github.com/lib/pq</a></li>\n<li>Tidb: <a href=\"https://github.com/pingcap/tidb\">github.com/pingcap/tidb</a></li>\n<li>SQLite: <a href=\"https://github.com/mattn/go-sqlite3\">github.com/mattn/go-sqlite3</a></li>\n<li>MsSql: <a href=\"https://github.com/denisenkom/go-mssqldb\">github.com/denisenkom/go-mssqldb</a></li>\n<li>MsSql: <a href=\"https://github.com/lunny/godbc\">github.com/lunny/godbc</a></li>\n<li>Oracle: <a href=\"https://github.com/mattn/go-oci8\">github.com/mattn/go-oci8</a> </li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>go get github.com/go-xorm/xorm</code></pre><h2 id=\"相关文档\"><a href=\"#相关文档\" class=\"headerlink\" title=\"相关文档\"></a>相关文档</h2><p><a href=\"http://xorm.io/docs\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p><a href=\"https://www.kancloud.cn/kancloud/xorm-manual-zh-cn/56013\" target=\"_blank\" rel=\"noopener\">官方文档(中文版)</a></p>\n<p><a href=\"https://godoc.org/github.com/go-xorm/xorm\" target=\"_blank\" rel=\"noopener\">Godoc代码文档</a></p>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><p>简单示例，更多操作请查看官方文档。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"fmt\"</span>\n    <span class=\"token string\">\"log\"</span>\n    <span class=\"token string\">\"os\"</span>\n\n    <span class=\"token boolean\">_</span> <span class=\"token string\">\"github.com/go-sql-driver/mysql\"</span>\n    <span class=\"token string\">\"github.com/go-xorm/xorm\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> engine <span class=\"token operator\">*</span>xorm<span class=\"token punctuation\">.</span>Engine\n\n<span class=\"token comment\" spellcheck=\"true\">// User 用户表</span>\n<span class=\"token keyword\">type</span> User <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    ID     <span class=\"token builtin\">int</span> <span class=\"token string\">`xorm:\"Int  pk notnull autoincr unique id \"`</span> <span class=\"token comment\" spellcheck=\"true\">// 用户表的主键 后面为 xorm 的 tags，具体实现可查看官方文档。</span>\n    Name   <span class=\"token builtin\">string</span>\n    Passwd <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 创建日志文件(默认该文件不存在)</span>\n    <span class=\"token keyword\">var</span> file <span class=\"token operator\">*</span>os<span class=\"token punctuation\">.</span>File\n    <span class=\"token keyword\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token function\">isFileExist</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sql.log\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sql.log\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"create log file fail\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    logger <span class=\"token operator\">:=</span> xorm<span class=\"token punctuation\">.</span><span class=\"token function\">NewSimpleLogger</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>                                         <span class=\"token comment\" spellcheck=\"true\">// 创建日志对象</span>\n    engine<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> xorm<span class=\"token punctuation\">.</span><span class=\"token function\">NewEngine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mysql\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"root:123@/test?charset=utf8\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 创建数据库引擎</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"create engine fail \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 创建 User 表</span>\n    ok<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> engine<span class=\"token punctuation\">.</span><span class=\"token function\">IsTableExist</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>User<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n        err <span class=\"token operator\">=</span> engine<span class=\"token punctuation\">.</span><span class=\"token function\">CreateTables</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>User<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"create  tabel fail \"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n            os<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 开启事务</span>\n    session <span class=\"token operator\">:=</span> engine<span class=\"token punctuation\">.</span><span class=\"token function\">NewSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    err <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">Begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start session fail\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 插入数据</span>\n    ok<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> engine<span class=\"token punctuation\">.</span><span class=\"token function\">IsTableEmpty</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>User<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> ok <span class=\"token punctuation\">{</span>\n        user1 <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>User<span class=\"token punctuation\">{</span>\n            ID<span class=\"token punctuation\">:</span>     <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            Name<span class=\"token punctuation\">:</span>   <span class=\"token string\">\"hh\"</span><span class=\"token punctuation\">,</span>\n            Passwd<span class=\"token punctuation\">:</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> engine<span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert data error\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n            os<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//使用 sql 语句方式插入数据</span>\n    user <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>User<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> engine<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into `user`(name,passwd) values(?,?) \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        session<span class=\"token punctuation\">.</span><span class=\"token function\">Rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exec  fail\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 查询结果</span>\n    rows<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> engine<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id >= ?\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Rows</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select  data fail\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">defer</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        err <span class=\"token operator\">=</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"range  fail\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n            os<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 提交事务</span>\n    err <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">Commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"session commit fail\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n        os<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// isFileExist</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">isFileExist</span><span class=\"token punctuation\">(</span>path <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>b <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Stat</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 获取文件的信息</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token operator\">&amp;&amp;</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">IsNotExist</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file is not exist\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"你不要担心","artist":"野菊花","url":"http://m7.music.126.net/20191027170640/02781110915ec62188b9d7d5eff477f3/ymusic/0e09/025b/055f/9cf3c49ec151d6e2ffaf25e2841b8bd1.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/NjMLvHvYyWTUmhLHx1aif2pdKZHHluBjqlH62sMyMgU!/b/dFQBAAAAAAAA&bo=7gHqAQAAAAARBzQ!&rf=viewer_4"},{"name":"像我这样的人","artist":"毛不易","url":"http://m7.music.126.net/20191027154717/23decbc2b6bd5225adf00f1ea055234d/ymusic/5605/07fd/b516/a10d9e248c19d9ac2d40d2b0596fc09b.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ADq5ccynY1xyHw2zad7.oHDplnNSZvnbzYlNc3v1lsk!/b/dFABAAAAAAAA&bo=LAIsAQAAAAARFyM!&rf=viewer_4"},{"name":"野狼disco","artist":"宝石gem","url":"http://m8.music.126.net/20191027154810/6da78c5c696c89cd0427656629cb58cd/ymusic/535b/030c/545e/d1cfbd9ca84f6225a839c44ec0d7c94e.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ElGwmyU4C3S6ypwJ4IfeCY6ZA0twTeDOullkQFz1xpw!/b/dL4AAAAAAAAA&bo=9AH0AQAAAAARBzA!&rf=viewer_4"}]}},"excerpt":"","more":"<h1 id=\"Go-xorm-快速入门\"><a href=\"#Go-xorm-快速入门\" class=\"headerlink\" title=\"Go-xorm 快速入门\"></a>Go-xorm 快速入门</h1><h2 id=\"xorm是什么\"><a href=\"#xorm是什么\" class=\"headerlink\" title=\"xorm是什么\"></a>xorm是什么</h2><p>xorm是一个简单而强大的Go语言ORM库. 通过它可以使数据库操作非常简便。</p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li>支持Struct和数据库表之间的灵活映射，并支持自动同步</li>\n<li>事务支持</li>\n<li>同时支持原始SQL语句和ORM操作的混合执行</li>\n<li>使用连写来简化调用</li>\n<li>支持使用Id, In, Where, Limit, Join, Having, Table, Sql, Cols等函数和结构体等方式作为条件</li>\n<li>支持级联加载Struct</li>\n<li>Schema支持（仅Postgres）</li>\n<li>支持缓存</li>\n<li>支持根据数据库自动生成xorm的结构体</li>\n<li>支持记录版本（即乐观锁）</li>\n<li>内置SQL Builder支持</li>\n<li>上下文缓存支持</li>\n</ul>\n<h2 id=\"驱动支持\"><a href=\"#驱动支持\" class=\"headerlink\" title=\"驱动支持\"></a>驱动支持</h2><p>目前支持的Go数据库驱动和对应的数据库如下：</p>\n<ul>\n<li>Mysql: <a href=\"https://github.com/go-sql-driver/mysql\">github.com/go-sql-driver/mysql</a></li>\n<li>MyMysql: <a href=\"https://github.com/ziutek/mymysql/godrv\">github.com/ziutek/mymysql/godrv</a></li>\n<li>Postgres: <a href=\"https://github.com/lib/pq\">github.com/lib/pq</a></li>\n<li>Tidb: <a href=\"https://github.com/pingcap/tidb\">github.com/pingcap/tidb</a></li>\n<li>SQLite: <a href=\"https://github.com/mattn/go-sqlite3\">github.com/mattn/go-sqlite3</a></li>\n<li>MsSql: <a href=\"https://github.com/denisenkom/go-mssqldb\">github.com/denisenkom/go-mssqldb</a></li>\n<li>MsSql: <a href=\"https://github.com/lunny/godbc\">github.com/lunny/godbc</a></li>\n<li>Oracle: <a href=\"https://github.com/mattn/go-oci8\">github.com/mattn/go-oci8</a> </li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><pre><code>go get github.com/go-xorm/xorm</code></pre><h2 id=\"相关文档\"><a href=\"#相关文档\" class=\"headerlink\" title=\"相关文档\"></a>相关文档</h2><p><a href=\"http://xorm.io/docs\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p><a href=\"https://www.kancloud.cn/kancloud/xorm-manual-zh-cn/56013\" target=\"_blank\" rel=\"noopener\">官方文档(中文版)</a></p>\n<p><a href=\"https://godoc.org/github.com/go-xorm/xorm\" target=\"_blank\" rel=\"noopener\">Godoc代码文档</a></p>\n<h2 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h2><p>简单示例，更多操作请查看官方文档。</p>\n<pre><code class=\"go\">package main\n\nimport (\n    &quot;fmt&quot;\n    &quot;log&quot;\n    &quot;os&quot;\n\n    _ &quot;github.com/go-sql-driver/mysql&quot;\n    &quot;github.com/go-xorm/xorm&quot;\n)\n\nvar engine *xorm.Engine\n\n// User 用户表\ntype User struct {\n    ID     int `xorm:&quot;Int  pk notnull autoincr unique id &quot;` // 用户表的主键 后面为 xorm 的 tags，具体实现可查看官方文档。\n    Name   string\n    Passwd string\n}\n\nfunc main() {\n    // 创建日志文件(默认该文件不存在)\n    var file *os.File\n    defer file.Close()\n    if isFileExist(&quot;sql.log&quot;) {\n        file, err := os.Create(&quot;sql.log&quot;)\n        if err != nil {\n            fmt.Println(&quot;create log file fail&quot;, err)\n        }\n        defer file.Close()\n    }\n\n    logger := xorm.NewSimpleLogger(file)                                         // 创建日志对象\n    engine, err := xorm.NewEngine(&quot;mysql&quot;, &quot;root:123@/test?charset=utf8&quot;) // 创建数据库引擎\n    if err != nil {\n        logger.Error(&quot;create engine fail &quot;, err)\n        os.Exit(1)\n    }\n\n    // 创建 User 表\n    ok, _ := engine.IsTableExist(&amp;User{})\n    if !ok {\n        err = engine.CreateTables(&amp;User{})\n        if err != nil {\n            logger.Error(&quot;create  tabel fail &quot;, err)\n            os.Exit(1)\n        }\n    }\n\n    // 开启事务\n    session := engine.NewSession()\n    defer session.Close()\n    err = session.Begin()\n    if err != nil {\n        logger.Error(&quot;start session fail&quot;, err)\n        os.Exit(1)\n    }\n\n    // 插入数据\n    ok, _ = engine.IsTableEmpty(&amp;User{})\n    if ok {\n        user1 := &amp;User{\n            ID:     1,\n            Name:   &quot;hh&quot;,\n            Passwd: &quot;123&quot;,\n        }\n        _, err := engine.Insert(user1)\n        if err != nil {\n            logger.Error(&quot;insert data error&quot;, err)\n            os.Exit(1)\n        }\n    }\n\n    //使用 sql 语句方式插入数据\n    user := &amp;User{}\n    _, err = engine.Exec(&quot;insert into `user`(name,passwd) values(?,?) &quot;, &quot;hello&quot;, &quot;test&quot;)\n    if err != nil {\n        session.Rollback()\n        logger.Error(&quot;exec  fail&quot;, err)\n        os.Exit(1)\n    }\n\n    // 查询结果\n    rows, err := engine.Where(&quot;id &gt;= ?&quot;, 1).Rows(user)\n    if err != nil {\n        logger.Error(&quot;select  data fail&quot;, err)\n        os.Exit(1)\n    }\n    defer rows.Close()\n    for rows.Next() {\n        err = rows.Scan(user)\n        if err != nil {\n            logger.Error(&quot;range  fail&quot;, err)\n            os.Exit(1)\n        }\n        log.Println(user)\n    }\n\n    // 提交事务\n    err = session.Commit()\n    if err != nil {\n        logger.Error(&quot;session commit fail&quot;, err)\n        os.Exit(1)\n    }\n}\n\n// isFileExist\nfunc isFileExist(path string) (b bool) {\n    _, err := os.Stat(path) // 获取文件的信息\n    if err != nil &amp;&amp; os.IsNotExist(err) {\n        log.Println(&quot;file is not exist&quot;, err)\n        return true\n    }\n    return\n}\n</code></pre>\n"},{"title":"Linux文件目录管理","author":"GopherTy","top":false,"cover":false,"toc":true,"date":"2019-10-01T14:19:23.000Z","coverImg":null,"password":null,"summary":null,"reprintPolicy":null,"_content":"\n# Linux文件目录管理\n\n## 一．关于Linux文件目录系统的说明。\n\n1. Linux 将文件系统挂载到特定的目录下，根文件系统 \"/\" 是最初建立的文件系统。\n\n2. Linux 的每个系统目录都有其特定的功能。\n\n## 二．文件目录管理常用命令。\n\n- **建立文件和目录**\n\n1. 创建目录 mkdir 创建单层目录，可以使用 -p 递归创建目录。\n\n2. 创建空文件 touch + 文件名,它在自动备份和整理文件时特别有用。\n\n- **移动、复制和删除**\n\n1. 移动 mv 可以移动文件和目录，如果在移动过程中有相同文件则会覆盖原来的文件。可以加上 -i 询问是否进行覆盖操作，-b 是在源文件名后面加上 ~ 符号。mv 可用于重命名，这相当于一个文件在同一个文件夹下移动。\n\n2. 复制文件和目录 cp ，和 mv 用法一样也可以加上上面的参数。复制目录的时候如果不加上参数默认跳过目录，-r 会将该目录下的文件复制到目标目录下。\n\n3. 删除文件和目录 rm ，该指令一旦使用会使得文件永久的删除，同样加上 -i 参数可以增加提示信息。-r 可以递归的删除该目录下的所有东西。\n\n","source":"_posts/Linux文件目录管理.md","raw":"---\ntitle: Linux文件目录管理\nauthor: GopherTy\ntop: false\ncover: false\ntoc: true\ndate: 2019-10-01 22:19:23\ncoverImg:\npassword:\nsummary: \ntags: \n    - Shell目录管理命令\n    - Linux\ncategories: Linux \nreprintPolicy:\n---\n\n# Linux文件目录管理\n\n## 一．关于Linux文件目录系统的说明。\n\n1. Linux 将文件系统挂载到特定的目录下，根文件系统 \"/\" 是最初建立的文件系统。\n\n2. Linux 的每个系统目录都有其特定的功能。\n\n## 二．文件目录管理常用命令。\n\n- **建立文件和目录**\n\n1. 创建目录 mkdir 创建单层目录，可以使用 -p 递归创建目录。\n\n2. 创建空文件 touch + 文件名,它在自动备份和整理文件时特别有用。\n\n- **移动、复制和删除**\n\n1. 移动 mv 可以移动文件和目录，如果在移动过程中有相同文件则会覆盖原来的文件。可以加上 -i 询问是否进行覆盖操作，-b 是在源文件名后面加上 ~ 符号。mv 可用于重命名，这相当于一个文件在同一个文件夹下移动。\n\n2. 复制文件和目录 cp ，和 mv 用法一样也可以加上上面的参数。复制目录的时候如果不加上参数默认跳过目录，-r 会将该目录下的文件复制到目标目录下。\n\n3. 删除文件和目录 rm ，该指令一旦使用会使得文件永久的删除，同样加上 -i 参数可以增加提示信息。-r 可以递归的删除该目录下的所有东西。\n\n","slug":"Linux文件目录管理","published":1,"updated":"2019-11-02T06:20:40.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2h6jbg10006dpklptf4r1bh","content":"<h1 id=\"Linux文件目录管理\"><a href=\"#Linux文件目录管理\" class=\"headerlink\" title=\"Linux文件目录管理\"></a>Linux文件目录管理</h1><h2 id=\"一．关于Linux文件目录系统的说明。\"><a href=\"#一．关于Linux文件目录系统的说明。\" class=\"headerlink\" title=\"一．关于Linux文件目录系统的说明。\"></a>一．关于Linux文件目录系统的说明。</h2><ol>\n<li><p>Linux 将文件系统挂载到特定的目录下，根文件系统 “/“ 是最初建立的文件系统。</p>\n</li>\n<li><p>Linux 的每个系统目录都有其特定的功能。</p>\n</li>\n</ol>\n<h2 id=\"二．文件目录管理常用命令。\"><a href=\"#二．文件目录管理常用命令。\" class=\"headerlink\" title=\"二．文件目录管理常用命令。\"></a>二．文件目录管理常用命令。</h2><ul>\n<li><strong>建立文件和目录</strong></li>\n</ul>\n<ol>\n<li><p>创建目录 mkdir 创建单层目录，可以使用 -p 递归创建目录。</p>\n</li>\n<li><p>创建空文件 touch + 文件名,它在自动备份和整理文件时特别有用。</p>\n</li>\n</ol>\n<ul>\n<li><strong>移动、复制和删除</strong></li>\n</ul>\n<ol>\n<li><p>移动 mv 可以移动文件和目录，如果在移动过程中有相同文件则会覆盖原来的文件。可以加上 -i 询问是否进行覆盖操作，-b 是在源文件名后面加上 ~ 符号。mv 可用于重命名，这相当于一个文件在同一个文件夹下移动。</p>\n</li>\n<li><p>复制文件和目录 cp ，和 mv 用法一样也可以加上上面的参数。复制目录的时候如果不加上参数默认跳过目录，-r 会将该目录下的文件复制到目标目录下。</p>\n</li>\n<li><p>删除文件和目录 rm ，该指令一旦使用会使得文件永久的删除，同样加上 -i 参数可以增加提示信息。-r 可以递归的删除该目录下的所有东西。</p>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"你不要担心","artist":"野菊花","url":"http://m7.music.126.net/20191027170640/02781110915ec62188b9d7d5eff477f3/ymusic/0e09/025b/055f/9cf3c49ec151d6e2ffaf25e2841b8bd1.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/NjMLvHvYyWTUmhLHx1aif2pdKZHHluBjqlH62sMyMgU!/b/dFQBAAAAAAAA&bo=7gHqAQAAAAARBzQ!&rf=viewer_4"},{"name":"像我这样的人","artist":"毛不易","url":"http://m7.music.126.net/20191027154717/23decbc2b6bd5225adf00f1ea055234d/ymusic/5605/07fd/b516/a10d9e248c19d9ac2d40d2b0596fc09b.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ADq5ccynY1xyHw2zad7.oHDplnNSZvnbzYlNc3v1lsk!/b/dFABAAAAAAAA&bo=LAIsAQAAAAARFyM!&rf=viewer_4"},{"name":"野狼disco","artist":"宝石gem","url":"http://m8.music.126.net/20191027154810/6da78c5c696c89cd0427656629cb58cd/ymusic/535b/030c/545e/d1cfbd9ca84f6225a839c44ec0d7c94e.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ElGwmyU4C3S6ypwJ4IfeCY6ZA0twTeDOullkQFz1xpw!/b/dL4AAAAAAAAA&bo=9AH0AQAAAAARBzA!&rf=viewer_4"}]}},"excerpt":"","more":"<h1 id=\"Linux文件目录管理\"><a href=\"#Linux文件目录管理\" class=\"headerlink\" title=\"Linux文件目录管理\"></a>Linux文件目录管理</h1><h2 id=\"一．关于Linux文件目录系统的说明。\"><a href=\"#一．关于Linux文件目录系统的说明。\" class=\"headerlink\" title=\"一．关于Linux文件目录系统的说明。\"></a>一．关于Linux文件目录系统的说明。</h2><ol>\n<li><p>Linux 将文件系统挂载到特定的目录下，根文件系统 “/“ 是最初建立的文件系统。</p>\n</li>\n<li><p>Linux 的每个系统目录都有其特定的功能。</p>\n</li>\n</ol>\n<h2 id=\"二．文件目录管理常用命令。\"><a href=\"#二．文件目录管理常用命令。\" class=\"headerlink\" title=\"二．文件目录管理常用命令。\"></a>二．文件目录管理常用命令。</h2><ul>\n<li><strong>建立文件和目录</strong></li>\n</ul>\n<ol>\n<li><p>创建目录 mkdir 创建单层目录，可以使用 -p 递归创建目录。</p>\n</li>\n<li><p>创建空文件 touch + 文件名,它在自动备份和整理文件时特别有用。</p>\n</li>\n</ol>\n<ul>\n<li><strong>移动、复制和删除</strong></li>\n</ul>\n<ol>\n<li><p>移动 mv 可以移动文件和目录，如果在移动过程中有相同文件则会覆盖原来的文件。可以加上 -i 询问是否进行覆盖操作，-b 是在源文件名后面加上 ~ 符号。mv 可用于重命名，这相当于一个文件在同一个文件夹下移动。</p>\n</li>\n<li><p>复制文件和目录 cp ，和 mv 用法一样也可以加上上面的参数。复制目录的时候如果不加上参数默认跳过目录，-r 会将该目录下的文件复制到目标目录下。</p>\n</li>\n<li><p>删除文件和目录 rm ，该指令一旦使用会使得文件永久的删除，同样加上 -i 参数可以增加提示信息。-r 可以递归的删除该目录下的所有东西。</p>\n</li>\n</ol>\n"},{"title":"浅谈Goroutine和Channel","author":"GopherTy","top":true,"cover":false,"toc":true,"date":"2019-11-02T06:13:20.000Z","coverImg":null,"password":null,"summary":null,"reprintPolicy":null,"_content":"# 浅谈 Goroutine 和 Channel\n\n## 什么是 Goroutine\n\n1.在说是 goroutine 之前先简单了解下进程、线程之间的关系。\n\n一个进程简单来说就是跑在一台机器上的一个应用程序，它占有独立的内存地址空间。一个进程由一个或多个操作系统线程组成，这些线程共享该进程的内存地址空间。几乎所有的程序都是多线程的，一个并发程序可以在一个处理器或内核上使用多个线程来执行任务，但是同一个程序多个线程在某个时间点同时运行在多核或多处理器上才是真正的并行。\n\n并行是一种通过使用多处理器以提高速度的能力。所以并发程序可以是并行的，也可以不是。\n\n2.在 Go 中，应用程序每一个并发的执行单元被成为 goroutine （协程），在协程和操作系统线程之间并无一对一的关系：协程是根据一个或多个线程的可用性，映射（多路复用，执行于）在它们之上的；协程调度器在 Go 运行时很好的完成了这个工作。\n\n3.当一个程序启动时，其主函数即在一个单独的 goroutine 中运行，我们叫它 main goroutine。新的goroutine 会用 go 语句来创建。在语法上，go 语句是一个普通的函数或方法调用前加上关键字 go 。go语句会使其语句中的函数在一个新创建的 goroutine 中运行，而 go 语句本身会迅速地完成。\n\n```go\ngo func Hello()\n```\n\n4.在主函数返回时，所有的 goroutine 都会被直接打断，程序退出。除了从主函数退出或者直接终止程序之外，没有其它的**编程方法**能够让一个 goroutine 来打断另一个的执行，但是可以通过 channel 在不同的 goroutine 进行通信。\n\n5.在 Go 中有一句话：**不要通过共享内存来通信，而应该通过通信来共享内存**，所以 channel 就是这句话的后者。\n\n## 什么是 Channel\n\n1.channel 是 goroutine 之间的通信机制。它可以让一个 goroutine 给另一个 goroutine 发送值信息。每个 channel 都有自己可以发送的数据类型，它的底层数据结构为引用类型，所以用 make 函数进行创建。\n\n```go\nch := make(chan int)\n```\n\n2.一个 channel 有发送和接受两个主要操作，都是通信行为。一个发送语句将一个值从一个 goroutine 通过 channel 发送到另一个执行接收操作的 goroutine 。发送和接收两个操作都使用 `<-` 运算符。在发送语句中，`<-` 运算符分割 channel 和要发送的值。在接收语句中，`<-` 运算符写在 channel 对象之前。一个不使用接收结果的接收操作也是合法的。\n\n```go\nch <- 1 // a send statement\nx := <- ch // a receive expression\n<- ch // a receive statement\n```\n\n3.channel 还支持 close 操作，用于关闭 channel ，关闭之后的 channel 进行发送和重复 close 操作都将导致 panic 异常。但是此时还可以进行接收操作，并且可以接受到之前已经发送成功的数据；如果 channel 中已经没有数据的话将产生一个零值数据。\n\n```go\nclose(ch)\n```\n\n4.channel 还分为带缓存的 channel 和不带缓存的 channel ，不带缓存的 channel 会造成发送方所在的goroutine 阻塞直到有接收方 goroutine 在相同的 channel 上执行接收操作，才可以执行后面的语句。\n\n```go\nch := make(chan int)\n```\n\n5.带缓存的 channel 内部持有一个元素队列。队列的最大容量是 make 函数创建 channel 时通过第二个参数指定的。创建三个字符串的带缓存的 channel:\n\n```go\nch := make(chan string,  3)\n```\n\n![](https://go.wuhaolin.cn/gopl/images/ch8-02.png)\n\n向缓存 channel 的发送操作就是向内部缓存队列的尾部插入元素，接收操作则是从队列的头部删除元素。如果内部缓存队列是满的，那么发送操作将阻塞直到因另一个 goroutine 执行接收操作而释放了新的队列空间。相反，如果 channel 是空的，接收操作将阻塞直到有另一个 goroutine 执行发送操作而向队列插入元素。\n\n## Go Channel 踩坑\n\n在 Go 中使用无缓存的 channel （同步channel）在不同的协程来进行通信时，下面这种写法会造成死锁：\n\n```go\n\tno := make(chan struct{})\n\tno <- struct{}{} \n\tgo func() {\n\t\tx := <-no\n\t\tfmt.Println(x)\n\t}()\n```\n\n原因是无缓存的 channel 在发送（接收）数据时都会造成阻塞，直到其他协程从该 channel 中接收（发送）数据。所以上面的代码问题在于第二行发送数据一直会阻塞，从而后面开启协程的操作也执行不到，造成死锁。踩了这个坑才理解 《Go 圣经中文版》8.4.1节中下面这句话的含义：\n\n> 基于无缓存Channels的发送和接收操作将导致两个goroutine做一次同步操作。因为这个原因，无缓存Channels有时候也被称为同步Channels。**当通过一个无缓存Channels发送数据时，接收者收到数据发生在唤醒发送者goroutine之前**（译注：*happens before*，这是Go语言并发内存模型的一个关键术语！）。\n\n所以正确的代码应该是这样：\n\n```go\n\tno := make(chan struct{})\n\tgo func() {\n\t\tx := <-no\n\t\tfmt.Println(x)\n\t}()\n\tno <- struct{}{}\n```\n\n\n\n","source":"_posts/浅谈Goroutine和Channel.md","raw":"---\ntitle: 浅谈Goroutine和Channel\nauthor: GopherTy\ntop: true\ncover: false\ntoc: true\ndate: 2019-11-02 14:13:20\ncoverImg:\npassword:\nsummary:\ntags:\n    - Go\n    - Go 并发编程\ncategories: 编程语言\nreprintPolicy:\n---\n# 浅谈 Goroutine 和 Channel\n\n## 什么是 Goroutine\n\n1.在说是 goroutine 之前先简单了解下进程、线程之间的关系。\n\n一个进程简单来说就是跑在一台机器上的一个应用程序，它占有独立的内存地址空间。一个进程由一个或多个操作系统线程组成，这些线程共享该进程的内存地址空间。几乎所有的程序都是多线程的，一个并发程序可以在一个处理器或内核上使用多个线程来执行任务，但是同一个程序多个线程在某个时间点同时运行在多核或多处理器上才是真正的并行。\n\n并行是一种通过使用多处理器以提高速度的能力。所以并发程序可以是并行的，也可以不是。\n\n2.在 Go 中，应用程序每一个并发的执行单元被成为 goroutine （协程），在协程和操作系统线程之间并无一对一的关系：协程是根据一个或多个线程的可用性，映射（多路复用，执行于）在它们之上的；协程调度器在 Go 运行时很好的完成了这个工作。\n\n3.当一个程序启动时，其主函数即在一个单独的 goroutine 中运行，我们叫它 main goroutine。新的goroutine 会用 go 语句来创建。在语法上，go 语句是一个普通的函数或方法调用前加上关键字 go 。go语句会使其语句中的函数在一个新创建的 goroutine 中运行，而 go 语句本身会迅速地完成。\n\n```go\ngo func Hello()\n```\n\n4.在主函数返回时，所有的 goroutine 都会被直接打断，程序退出。除了从主函数退出或者直接终止程序之外，没有其它的**编程方法**能够让一个 goroutine 来打断另一个的执行，但是可以通过 channel 在不同的 goroutine 进行通信。\n\n5.在 Go 中有一句话：**不要通过共享内存来通信，而应该通过通信来共享内存**，所以 channel 就是这句话的后者。\n\n## 什么是 Channel\n\n1.channel 是 goroutine 之间的通信机制。它可以让一个 goroutine 给另一个 goroutine 发送值信息。每个 channel 都有自己可以发送的数据类型，它的底层数据结构为引用类型，所以用 make 函数进行创建。\n\n```go\nch := make(chan int)\n```\n\n2.一个 channel 有发送和接受两个主要操作，都是通信行为。一个发送语句将一个值从一个 goroutine 通过 channel 发送到另一个执行接收操作的 goroutine 。发送和接收两个操作都使用 `<-` 运算符。在发送语句中，`<-` 运算符分割 channel 和要发送的值。在接收语句中，`<-` 运算符写在 channel 对象之前。一个不使用接收结果的接收操作也是合法的。\n\n```go\nch <- 1 // a send statement\nx := <- ch // a receive expression\n<- ch // a receive statement\n```\n\n3.channel 还支持 close 操作，用于关闭 channel ，关闭之后的 channel 进行发送和重复 close 操作都将导致 panic 异常。但是此时还可以进行接收操作，并且可以接受到之前已经发送成功的数据；如果 channel 中已经没有数据的话将产生一个零值数据。\n\n```go\nclose(ch)\n```\n\n4.channel 还分为带缓存的 channel 和不带缓存的 channel ，不带缓存的 channel 会造成发送方所在的goroutine 阻塞直到有接收方 goroutine 在相同的 channel 上执行接收操作，才可以执行后面的语句。\n\n```go\nch := make(chan int)\n```\n\n5.带缓存的 channel 内部持有一个元素队列。队列的最大容量是 make 函数创建 channel 时通过第二个参数指定的。创建三个字符串的带缓存的 channel:\n\n```go\nch := make(chan string,  3)\n```\n\n![](https://go.wuhaolin.cn/gopl/images/ch8-02.png)\n\n向缓存 channel 的发送操作就是向内部缓存队列的尾部插入元素，接收操作则是从队列的头部删除元素。如果内部缓存队列是满的，那么发送操作将阻塞直到因另一个 goroutine 执行接收操作而释放了新的队列空间。相反，如果 channel 是空的，接收操作将阻塞直到有另一个 goroutine 执行发送操作而向队列插入元素。\n\n## Go Channel 踩坑\n\n在 Go 中使用无缓存的 channel （同步channel）在不同的协程来进行通信时，下面这种写法会造成死锁：\n\n```go\n\tno := make(chan struct{})\n\tno <- struct{}{} \n\tgo func() {\n\t\tx := <-no\n\t\tfmt.Println(x)\n\t}()\n```\n\n原因是无缓存的 channel 在发送（接收）数据时都会造成阻塞，直到其他协程从该 channel 中接收（发送）数据。所以上面的代码问题在于第二行发送数据一直会阻塞，从而后面开启协程的操作也执行不到，造成死锁。踩了这个坑才理解 《Go 圣经中文版》8.4.1节中下面这句话的含义：\n\n> 基于无缓存Channels的发送和接收操作将导致两个goroutine做一次同步操作。因为这个原因，无缓存Channels有时候也被称为同步Channels。**当通过一个无缓存Channels发送数据时，接收者收到数据发生在唤醒发送者goroutine之前**（译注：*happens before*，这是Go语言并发内存模型的一个关键术语！）。\n\n所以正确的代码应该是这样：\n\n```go\n\tno := make(chan struct{})\n\tgo func() {\n\t\tx := <-no\n\t\tfmt.Println(x)\n\t}()\n\tno <- struct{}{}\n```\n\n\n\n","slug":"浅谈Goroutine和Channel","published":1,"updated":"2019-11-02T06:22:01.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2h6jbg40008dpkl3g8d50ls","content":"<h1 id=\"浅谈-Goroutine-和-Channel\"><a href=\"#浅谈-Goroutine-和-Channel\" class=\"headerlink\" title=\"浅谈 Goroutine 和 Channel\"></a>浅谈 Goroutine 和 Channel</h1><h2 id=\"什么是-Goroutine\"><a href=\"#什么是-Goroutine\" class=\"headerlink\" title=\"什么是 Goroutine\"></a>什么是 Goroutine</h2><p>1.在说是 goroutine 之前先简单了解下进程、线程之间的关系。</p>\n<p>一个进程简单来说就是跑在一台机器上的一个应用程序，它占有独立的内存地址空间。一个进程由一个或多个操作系统线程组成，这些线程共享该进程的内存地址空间。几乎所有的程序都是多线程的，一个并发程序可以在一个处理器或内核上使用多个线程来执行任务，但是同一个程序多个线程在某个时间点同时运行在多核或多处理器上才是真正的并行。</p>\n<p>并行是一种通过使用多处理器以提高速度的能力。所以并发程序可以是并行的，也可以不是。</p>\n<p>2.在 Go 中，应用程序每一个并发的执行单元被成为 goroutine （协程），在协程和操作系统线程之间并无一对一的关系：协程是根据一个或多个线程的可用性，映射（多路复用，执行于）在它们之上的；协程调度器在 Go 运行时很好的完成了这个工作。</p>\n<p>3.当一个程序启动时，其主函数即在一个单独的 goroutine 中运行，我们叫它 main goroutine。新的goroutine 会用 go 语句来创建。在语法上，go 语句是一个普通的函数或方法调用前加上关键字 go 。go语句会使其语句中的函数在一个新创建的 goroutine 中运行，而 go 语句本身会迅速地完成。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>4.在主函数返回时，所有的 goroutine 都会被直接打断，程序退出。除了从主函数退出或者直接终止程序之外，没有其它的<strong>编程方法</strong>能够让一个 goroutine 来打断另一个的执行，但是可以通过 channel 在不同的 goroutine 进行通信。</p>\n<p>5.在 Go 中有一句话：<strong>不要通过共享内存来通信，而应该通过通信来共享内存</strong>，所以 channel 就是这句话的后者。</p>\n<h2 id=\"什么是-Channel\"><a href=\"#什么是-Channel\" class=\"headerlink\" title=\"什么是 Channel\"></a>什么是 Channel</h2><p>1.channel 是 goroutine 之间的通信机制。它可以让一个 goroutine 给另一个 goroutine 发送值信息。每个 channel 都有自己可以发送的数据类型，它的底层数据结构为引用类型，所以用 make 函数进行创建。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2.一个 channel 有发送和接受两个主要操作，都是通信行为。一个发送语句将一个值从一个 goroutine 通过 channel 发送到另一个执行接收操作的 goroutine 。发送和接收两个操作都使用 <code>&lt;-</code> 运算符。在发送语句中，<code>&lt;-</code> 运算符分割 channel 和要发送的值。在接收语句中，<code>&lt;-</code> 运算符写在 channel 对象之前。一个不使用接收结果的接收操作也是合法的。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">ch <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span> <span class=\"token comment\" spellcheck=\"true\">// a send statement</span>\nx <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span> ch <span class=\"token comment\" spellcheck=\"true\">// a receive expression</span>\n<span class=\"token operator\">&lt;-</span> ch <span class=\"token comment\" spellcheck=\"true\">// a receive statement</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>3.channel 还支持 close 操作，用于关闭 channel ，关闭之后的 channel 进行发送和重复 close 操作都将导致 panic 异常。但是此时还可以进行接收操作，并且可以接受到之前已经发送成功的数据；如果 channel 中已经没有数据的话将产生一个零值数据。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\"><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>4.channel 还分为带缓存的 channel 和不带缓存的 channel ，不带缓存的 channel 会造成发送方所在的goroutine 阻塞直到有接收方 goroutine 在相同的 channel 上执行接收操作，才可以执行后面的语句。</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>5.带缓存的 channel 内部持有一个元素队列。队列的最大容量是 make 函数创建 channel 时通过第二个参数指定的。创建三个字符串的带缓存的 channel:</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://go.wuhaolin.cn/gopl/images/ch8-02.png\" alt></p>\n<p>向缓存 channel 的发送操作就是向内部缓存队列的尾部插入元素，接收操作则是从队列的头部删除元素。如果内部缓存队列是满的，那么发送操作将阻塞直到因另一个 goroutine 执行接收操作而释放了新的队列空间。相反，如果 channel 是空的，接收操作将阻塞直到有另一个 goroutine 执行发送操作而向队列插入元素。</p>\n<h2 id=\"Go-Channel-踩坑\"><a href=\"#Go-Channel-踩坑\" class=\"headerlink\" title=\"Go Channel 踩坑\"></a>Go Channel 踩坑</h2><p>在 Go 中使用无缓存的 channel （同步channel）在不同的协程来进行通信时，下面这种写法会造成死锁：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">    no <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    no <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>no\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>原因是无缓存的 channel 在发送（接收）数据时都会造成阻塞，直到其他协程从该 channel 中接收（发送）数据。所以上面的代码问题在于第二行发送数据一直会阻塞，从而后面开启协程的操作也执行不到，造成死锁。踩了这个坑才理解 《Go 圣经中文版》8.4.1节中下面这句话的含义：</p>\n<blockquote>\n<p>基于无缓存Channels的发送和接收操作将导致两个goroutine做一次同步操作。因为这个原因，无缓存Channels有时候也被称为同步Channels。<strong>当通过一个无缓存Channels发送数据时，接收者收到数据发生在唤醒发送者goroutine之前</strong>（译注：<em>happens before</em>，这是Go语言并发内存模型的一个关键术语！）。</p>\n</blockquote>\n<p>所以正确的代码应该是这样：</p>\n<pre class=\"line-numbers language-go\"><code class=\"language-go\">    no <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>no\n        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    no <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"你不要担心","artist":"野菊花","url":"http://m7.music.126.net/20191027170640/02781110915ec62188b9d7d5eff477f3/ymusic/0e09/025b/055f/9cf3c49ec151d6e2ffaf25e2841b8bd1.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/NjMLvHvYyWTUmhLHx1aif2pdKZHHluBjqlH62sMyMgU!/b/dFQBAAAAAAAA&bo=7gHqAQAAAAARBzQ!&rf=viewer_4"},{"name":"像我这样的人","artist":"毛不易","url":"http://m7.music.126.net/20191027154717/23decbc2b6bd5225adf00f1ea055234d/ymusic/5605/07fd/b516/a10d9e248c19d9ac2d40d2b0596fc09b.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ADq5ccynY1xyHw2zad7.oHDplnNSZvnbzYlNc3v1lsk!/b/dFABAAAAAAAA&bo=LAIsAQAAAAARFyM!&rf=viewer_4"},{"name":"野狼disco","artist":"宝石gem","url":"http://m8.music.126.net/20191027154810/6da78c5c696c89cd0427656629cb58cd/ymusic/535b/030c/545e/d1cfbd9ca84f6225a839c44ec0d7c94e.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ElGwmyU4C3S6ypwJ4IfeCY6ZA0twTeDOullkQFz1xpw!/b/dL4AAAAAAAAA&bo=9AH0AQAAAAARBzA!&rf=viewer_4"}]}},"excerpt":"","more":"<h1 id=\"浅谈-Goroutine-和-Channel\"><a href=\"#浅谈-Goroutine-和-Channel\" class=\"headerlink\" title=\"浅谈 Goroutine 和 Channel\"></a>浅谈 Goroutine 和 Channel</h1><h2 id=\"什么是-Goroutine\"><a href=\"#什么是-Goroutine\" class=\"headerlink\" title=\"什么是 Goroutine\"></a>什么是 Goroutine</h2><p>1.在说是 goroutine 之前先简单了解下进程、线程之间的关系。</p>\n<p>一个进程简单来说就是跑在一台机器上的一个应用程序，它占有独立的内存地址空间。一个进程由一个或多个操作系统线程组成，这些线程共享该进程的内存地址空间。几乎所有的程序都是多线程的，一个并发程序可以在一个处理器或内核上使用多个线程来执行任务，但是同一个程序多个线程在某个时间点同时运行在多核或多处理器上才是真正的并行。</p>\n<p>并行是一种通过使用多处理器以提高速度的能力。所以并发程序可以是并行的，也可以不是。</p>\n<p>2.在 Go 中，应用程序每一个并发的执行单元被成为 goroutine （协程），在协程和操作系统线程之间并无一对一的关系：协程是根据一个或多个线程的可用性，映射（多路复用，执行于）在它们之上的；协程调度器在 Go 运行时很好的完成了这个工作。</p>\n<p>3.当一个程序启动时，其主函数即在一个单独的 goroutine 中运行，我们叫它 main goroutine。新的goroutine 会用 go 语句来创建。在语法上，go 语句是一个普通的函数或方法调用前加上关键字 go 。go语句会使其语句中的函数在一个新创建的 goroutine 中运行，而 go 语句本身会迅速地完成。</p>\n<pre><code class=\"go\">go func Hello()</code></pre>\n<p>4.在主函数返回时，所有的 goroutine 都会被直接打断，程序退出。除了从主函数退出或者直接终止程序之外，没有其它的<strong>编程方法</strong>能够让一个 goroutine 来打断另一个的执行，但是可以通过 channel 在不同的 goroutine 进行通信。</p>\n<p>5.在 Go 中有一句话：<strong>不要通过共享内存来通信，而应该通过通信来共享内存</strong>，所以 channel 就是这句话的后者。</p>\n<h2 id=\"什么是-Channel\"><a href=\"#什么是-Channel\" class=\"headerlink\" title=\"什么是 Channel\"></a>什么是 Channel</h2><p>1.channel 是 goroutine 之间的通信机制。它可以让一个 goroutine 给另一个 goroutine 发送值信息。每个 channel 都有自己可以发送的数据类型，它的底层数据结构为引用类型，所以用 make 函数进行创建。</p>\n<pre><code class=\"go\">ch := make(chan int)</code></pre>\n<p>2.一个 channel 有发送和接受两个主要操作，都是通信行为。一个发送语句将一个值从一个 goroutine 通过 channel 发送到另一个执行接收操作的 goroutine 。发送和接收两个操作都使用 <code>&lt;-</code> 运算符。在发送语句中，<code>&lt;-</code> 运算符分割 channel 和要发送的值。在接收语句中，<code>&lt;-</code> 运算符写在 channel 对象之前。一个不使用接收结果的接收操作也是合法的。</p>\n<pre><code class=\"go\">ch &lt;- 1 // a send statement\nx := &lt;- ch // a receive expression\n&lt;- ch // a receive statement</code></pre>\n<p>3.channel 还支持 close 操作，用于关闭 channel ，关闭之后的 channel 进行发送和重复 close 操作都将导致 panic 异常。但是此时还可以进行接收操作，并且可以接受到之前已经发送成功的数据；如果 channel 中已经没有数据的话将产生一个零值数据。</p>\n<pre><code class=\"go\">close(ch)</code></pre>\n<p>4.channel 还分为带缓存的 channel 和不带缓存的 channel ，不带缓存的 channel 会造成发送方所在的goroutine 阻塞直到有接收方 goroutine 在相同的 channel 上执行接收操作，才可以执行后面的语句。</p>\n<pre><code class=\"go\">ch := make(chan int)</code></pre>\n<p>5.带缓存的 channel 内部持有一个元素队列。队列的最大容量是 make 函数创建 channel 时通过第二个参数指定的。创建三个字符串的带缓存的 channel:</p>\n<pre><code class=\"go\">ch := make(chan string,  3)</code></pre>\n<p><img src=\"https://go.wuhaolin.cn/gopl/images/ch8-02.png\" alt></p>\n<p>向缓存 channel 的发送操作就是向内部缓存队列的尾部插入元素，接收操作则是从队列的头部删除元素。如果内部缓存队列是满的，那么发送操作将阻塞直到因另一个 goroutine 执行接收操作而释放了新的队列空间。相反，如果 channel 是空的，接收操作将阻塞直到有另一个 goroutine 执行发送操作而向队列插入元素。</p>\n<h2 id=\"Go-Channel-踩坑\"><a href=\"#Go-Channel-踩坑\" class=\"headerlink\" title=\"Go Channel 踩坑\"></a>Go Channel 踩坑</h2><p>在 Go 中使用无缓存的 channel （同步channel）在不同的协程来进行通信时，下面这种写法会造成死锁：</p>\n<pre><code class=\"go\">    no := make(chan struct{})\n    no &lt;- struct{}{} \n    go func() {\n        x := &lt;-no\n        fmt.Println(x)\n    }()</code></pre>\n<p>原因是无缓存的 channel 在发送（接收）数据时都会造成阻塞，直到其他协程从该 channel 中接收（发送）数据。所以上面的代码问题在于第二行发送数据一直会阻塞，从而后面开启协程的操作也执行不到，造成死锁。踩了这个坑才理解 《Go 圣经中文版》8.4.1节中下面这句话的含义：</p>\n<blockquote>\n<p>基于无缓存Channels的发送和接收操作将导致两个goroutine做一次同步操作。因为这个原因，无缓存Channels有时候也被称为同步Channels。<strong>当通过一个无缓存Channels发送数据时，接收者收到数据发生在唤醒发送者goroutine之前</strong>（译注：<em>happens before</em>，这是Go语言并发内存模型的一个关键术语！）。</p>\n</blockquote>\n<p>所以正确的代码应该是这样：</p>\n<pre><code class=\"go\">    no := make(chan struct{})\n    go func() {\n        x := &lt;-no\n        fmt.Println(x)\n    }()\n    no &lt;- struct{}{}</code></pre>\n"},{"title":"Shell基本命令","author":"GopherTy","top":false,"cover":false,"toc":true,"date":"2019-09-30T06:06:42.000Z","coverImg":null,"password":null,"summary":null,"reprintPolicy":null,"_content":"# Shell 基本命令\n\n## Shell 的定义\n\n1. Shell 是命令解释器程序。将用户输入的命令解释为指令代码发送给操作系统，是在用户和操作系统之间提供的可交互接口。\n\n2. Shell 最常用的是　BASH(bourne again shell) shell。　**$** 是命令行的提示符，如果以 root 权限运行命令则变为　**#**。\n\n> 提示：在 BASH 前面还有一些信息包括用户名、主机名和当前目录。　如: leweis@leweis-PC:~/blog$\n\n3. sudo 工具可以临时提高用户权限。\n\n4. /home 目录下是 Linux 用户目录，/etc 是系统绝大部分应用的配置文件。\n\n> 系统命令本质上就是一些可执行文件,在/usr/bin目录下可以找到\n\n5. Shell 中的通配符:\n\n`*` 表示一个或多个。\n? 表示一个\n[] 表示匹配中括号中的一个或多个字符，范围可以用 - 来表示。\n\n6. ~ 表示用户的主目录。\n\n## Shell 常用命令\n\n**一．ls**　\n\n- 列出目录下的内容。 -a 表示列出所有文件包括隐藏文件. -F 在目录后面会加上 / ,可执行文件后加上 * ，链接文件加上@, -l 查看文件的各种属性。\n\n> ls -l 从左到右依次表示文件权限、文件链接个数、文件所有者的用户名、用户所在用户组、文件大小、文件最后被修改的日期、时间、文件名。\n\n**二．cd && pwd**\n\n- cd 进入目录。　..　表示上一级目录, . 表示当前目录　。\n\n- pwd 表示列出当前所在目录。\n\n**三．cat && more**\n\n- 用于查看文本文件。　cat 后面跟文件名作为参数（一个或多个文件名），-n 可以用来显示行号。\n\n- cat 的缺点就是会将所有的内容显示出来，可以使用 more 命令来显示　enter　向下翻动一行, 空格键向下翻动一页、Q退出。\n\n**四．head && tail**\n\n- 查看文件内容的开头和结尾，-n 指定显示的行数。\n\n**五．less**\n\n- 和 more　命令的作用一样功能更多，使用 b 向上翻一页，/可用于查找内容, -M 可以显示更多的信息。\n\n**六．grep**\n\n- 查找内容。有两个不同的参数分别是查找的内容和文件名字。\n\n**七．find**\n\n- 查找指定范围内的文件。语法如下\n\n> find [OPTION] [path...] [expression] \n\n**示例：** find /usr/bin -name zip -type d -print\n\n**八．located**\n\n- 快速定位文件。它可以自动建立整个文件名数据库。　\n\n> located *.doc\n\n**九．whereis && man && whatis && apropos**\n\n- whereis 查找程序文件，包括可执行文件、源码和使用手册的所在处。可以使用 -b 参数指定查找二进制文件所在处。如果没找到则返回空的字符串！\n\n- 它的缺点在于检索的子目录都是固定的。\n\n- man 提供用户的帮助手册。\n\n- whatis 帮助用户了解这个命令的作用。\n\n- apropos 是通过手册中反查到某个命令。\n\n## 其他一些常用指令\n\n1. 从终端运行程序，可以直接运行该指令。也可以通过指令程序+& 后台运行程序。\n\n2. 查看用户的版本和用户：\n\n3. whoami who ：他们的区别在于用户是谁。\n\n4. uname -a 显示当前系统版本的所有信息。　uname -r 显示当前系统的内核版本。\n","source":"_posts/Shell基本命令.md","raw":"---\ntitle: Shell基本命令\nauthor: GopherTy\ntop: false\ncover: false\ntoc: true\ndate: 2019-09-30 14:06:42\ncoverImg:\npassword:\nsummary: \ntags: \n    - Shell基本命令\n    - Linux\ncategories: Linux\nreprintPolicy:\n---\n# Shell 基本命令\n\n## Shell 的定义\n\n1. Shell 是命令解释器程序。将用户输入的命令解释为指令代码发送给操作系统，是在用户和操作系统之间提供的可交互接口。\n\n2. Shell 最常用的是　BASH(bourne again shell) shell。　**$** 是命令行的提示符，如果以 root 权限运行命令则变为　**#**。\n\n> 提示：在 BASH 前面还有一些信息包括用户名、主机名和当前目录。　如: leweis@leweis-PC:~/blog$\n\n3. sudo 工具可以临时提高用户权限。\n\n4. /home 目录下是 Linux 用户目录，/etc 是系统绝大部分应用的配置文件。\n\n> 系统命令本质上就是一些可执行文件,在/usr/bin目录下可以找到\n\n5. Shell 中的通配符:\n\n`*` 表示一个或多个。\n? 表示一个\n[] 表示匹配中括号中的一个或多个字符，范围可以用 - 来表示。\n\n6. ~ 表示用户的主目录。\n\n## Shell 常用命令\n\n**一．ls**　\n\n- 列出目录下的内容。 -a 表示列出所有文件包括隐藏文件. -F 在目录后面会加上 / ,可执行文件后加上 * ，链接文件加上@, -l 查看文件的各种属性。\n\n> ls -l 从左到右依次表示文件权限、文件链接个数、文件所有者的用户名、用户所在用户组、文件大小、文件最后被修改的日期、时间、文件名。\n\n**二．cd && pwd**\n\n- cd 进入目录。　..　表示上一级目录, . 表示当前目录　。\n\n- pwd 表示列出当前所在目录。\n\n**三．cat && more**\n\n- 用于查看文本文件。　cat 后面跟文件名作为参数（一个或多个文件名），-n 可以用来显示行号。\n\n- cat 的缺点就是会将所有的内容显示出来，可以使用 more 命令来显示　enter　向下翻动一行, 空格键向下翻动一页、Q退出。\n\n**四．head && tail**\n\n- 查看文件内容的开头和结尾，-n 指定显示的行数。\n\n**五．less**\n\n- 和 more　命令的作用一样功能更多，使用 b 向上翻一页，/可用于查找内容, -M 可以显示更多的信息。\n\n**六．grep**\n\n- 查找内容。有两个不同的参数分别是查找的内容和文件名字。\n\n**七．find**\n\n- 查找指定范围内的文件。语法如下\n\n> find [OPTION] [path...] [expression] \n\n**示例：** find /usr/bin -name zip -type d -print\n\n**八．located**\n\n- 快速定位文件。它可以自动建立整个文件名数据库。　\n\n> located *.doc\n\n**九．whereis && man && whatis && apropos**\n\n- whereis 查找程序文件，包括可执行文件、源码和使用手册的所在处。可以使用 -b 参数指定查找二进制文件所在处。如果没找到则返回空的字符串！\n\n- 它的缺点在于检索的子目录都是固定的。\n\n- man 提供用户的帮助手册。\n\n- whatis 帮助用户了解这个命令的作用。\n\n- apropos 是通过手册中反查到某个命令。\n\n## 其他一些常用指令\n\n1. 从终端运行程序，可以直接运行该指令。也可以通过指令程序+& 后台运行程序。\n\n2. 查看用户的版本和用户：\n\n3. whoami who ：他们的区别在于用户是谁。\n\n4. uname -a 显示当前系统版本的所有信息。　uname -r 显示当前系统的内核版本。\n","slug":"Shell基本命令","published":1,"updated":"2019-11-02T06:20:46.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2h6jbg6000adpklbwafqyob","content":"<h1 id=\"Shell-基本命令\"><a href=\"#Shell-基本命令\" class=\"headerlink\" title=\"Shell 基本命令\"></a>Shell 基本命令</h1><h2 id=\"Shell-的定义\"><a href=\"#Shell-的定义\" class=\"headerlink\" title=\"Shell 的定义\"></a>Shell 的定义</h2><ol>\n<li><p>Shell 是命令解释器程序。将用户输入的命令解释为指令代码发送给操作系统，是在用户和操作系统之间提供的可交互接口。</p>\n</li>\n<li><p>Shell 最常用的是　BASH(bourne again shell) shell。　<strong>$</strong> 是命令行的提示符，如果以 root 权限运行命令则变为　<strong>#</strong>。</p>\n</li>\n</ol>\n<blockquote>\n<p>提示：在 BASH 前面还有一些信息包括用户名、主机名和当前目录。　如: leweis@leweis-PC:~/blog$</p>\n</blockquote>\n<ol start=\"3\">\n<li><p>sudo 工具可以临时提高用户权限。</p>\n</li>\n<li><p>/home 目录下是 Linux 用户目录，/etc 是系统绝大部分应用的配置文件。</p>\n</li>\n</ol>\n<blockquote>\n<p>系统命令本质上就是一些可执行文件,在/usr/bin目录下可以找到</p>\n</blockquote>\n<ol start=\"5\">\n<li>Shell 中的通配符:</li>\n</ol>\n<p><code>*</code> 表示一个或多个。<br>? 表示一个<br>[] 表示匹配中括号中的一个或多个字符，范围可以用 - 来表示。</p>\n<ol start=\"6\">\n<li>~ 表示用户的主目录。</li>\n</ol>\n<h2 id=\"Shell-常用命令\"><a href=\"#Shell-常用命令\" class=\"headerlink\" title=\"Shell 常用命令\"></a>Shell 常用命令</h2><p><strong>一．ls</strong>　</p>\n<ul>\n<li>列出目录下的内容。 -a 表示列出所有文件包括隐藏文件. -F 在目录后面会加上 / ,可执行文件后加上 * ，链接文件加上@, -l 查看文件的各种属性。</li>\n</ul>\n<blockquote>\n<p>ls -l 从左到右依次表示文件权限、文件链接个数、文件所有者的用户名、用户所在用户组、文件大小、文件最后被修改的日期、时间、文件名。</p>\n</blockquote>\n<p><strong>二．cd &amp;&amp; pwd</strong></p>\n<ul>\n<li><p>cd 进入目录。　..　表示上一级目录, . 表示当前目录　。</p>\n</li>\n<li><p>pwd 表示列出当前所在目录。</p>\n</li>\n</ul>\n<p><strong>三．cat &amp;&amp; more</strong></p>\n<ul>\n<li><p>用于查看文本文件。　cat 后面跟文件名作为参数（一个或多个文件名），-n 可以用来显示行号。</p>\n</li>\n<li><p>cat 的缺点就是会将所有的内容显示出来，可以使用 more 命令来显示　enter　向下翻动一行, 空格键向下翻动一页、Q退出。</p>\n</li>\n</ul>\n<p><strong>四．head &amp;&amp; tail</strong></p>\n<ul>\n<li>查看文件内容的开头和结尾，-n 指定显示的行数。</li>\n</ul>\n<p><strong>五．less</strong></p>\n<ul>\n<li>和 more　命令的作用一样功能更多，使用 b 向上翻一页，/可用于查找内容, -M 可以显示更多的信息。</li>\n</ul>\n<p><strong>六．grep</strong></p>\n<ul>\n<li>查找内容。有两个不同的参数分别是查找的内容和文件名字。</li>\n</ul>\n<p><strong>七．find</strong></p>\n<ul>\n<li>查找指定范围内的文件。语法如下</li>\n</ul>\n<blockquote>\n<p>find [OPTION] [path…] [expression] </p>\n</blockquote>\n<p><strong>示例：</strong> find /usr/bin -name zip -type d -print</p>\n<p><strong>八．located</strong></p>\n<ul>\n<li>快速定位文件。它可以自动建立整个文件名数据库。　</li>\n</ul>\n<blockquote>\n<p>located *.doc</p>\n</blockquote>\n<p><strong>九．whereis &amp;&amp; man &amp;&amp; whatis &amp;&amp; apropos</strong></p>\n<ul>\n<li><p>whereis 查找程序文件，包括可执行文件、源码和使用手册的所在处。可以使用 -b 参数指定查找二进制文件所在处。如果没找到则返回空的字符串！</p>\n</li>\n<li><p>它的缺点在于检索的子目录都是固定的。</p>\n</li>\n<li><p>man 提供用户的帮助手册。</p>\n</li>\n<li><p>whatis 帮助用户了解这个命令的作用。</p>\n</li>\n<li><p>apropos 是通过手册中反查到某个命令。</p>\n</li>\n</ul>\n<h2 id=\"其他一些常用指令\"><a href=\"#其他一些常用指令\" class=\"headerlink\" title=\"其他一些常用指令\"></a>其他一些常用指令</h2><ol>\n<li><p>从终端运行程序，可以直接运行该指令。也可以通过指令程序+&amp; 后台运行程序。</p>\n</li>\n<li><p>查看用户的版本和用户：</p>\n</li>\n<li><p>whoami who ：他们的区别在于用户是谁。</p>\n</li>\n<li><p>uname -a 显示当前系统版本的所有信息。　uname -r 显示当前系统的内核版本。</p>\n</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}],"musics":[{"name":"你不要担心","artist":"野菊花","url":"http://m7.music.126.net/20191027170640/02781110915ec62188b9d7d5eff477f3/ymusic/0e09/025b/055f/9cf3c49ec151d6e2ffaf25e2841b8bd1.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/NjMLvHvYyWTUmhLHx1aif2pdKZHHluBjqlH62sMyMgU!/b/dFQBAAAAAAAA&bo=7gHqAQAAAAARBzQ!&rf=viewer_4"},{"name":"像我这样的人","artist":"毛不易","url":"http://m7.music.126.net/20191027154717/23decbc2b6bd5225adf00f1ea055234d/ymusic/5605/07fd/b516/a10d9e248c19d9ac2d40d2b0596fc09b.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ADq5ccynY1xyHw2zad7.oHDplnNSZvnbzYlNc3v1lsk!/b/dFABAAAAAAAA&bo=LAIsAQAAAAARFyM!&rf=viewer_4"},{"name":"野狼disco","artist":"宝石gem","url":"http://m8.music.126.net/20191027154810/6da78c5c696c89cd0427656629cb58cd/ymusic/535b/030c/545e/d1cfbd9ca84f6225a839c44ec0d7c94e.mp3","cover":"http://m.qpic.cn/psb?/V131TXgR4TNtcN/ElGwmyU4C3S6ypwJ4IfeCY6ZA0twTeDOullkQFz1xpw!/b/dL4AAAAAAAAA&bo=9AH0AQAAAAARBzA!&rf=viewer_4"}]}},"excerpt":"","more":"<h1 id=\"Shell-基本命令\"><a href=\"#Shell-基本命令\" class=\"headerlink\" title=\"Shell 基本命令\"></a>Shell 基本命令</h1><h2 id=\"Shell-的定义\"><a href=\"#Shell-的定义\" class=\"headerlink\" title=\"Shell 的定义\"></a>Shell 的定义</h2><ol>\n<li><p>Shell 是命令解释器程序。将用户输入的命令解释为指令代码发送给操作系统，是在用户和操作系统之间提供的可交互接口。</p>\n</li>\n<li><p>Shell 最常用的是　BASH(bourne again shell) shell。　<strong>$</strong> 是命令行的提示符，如果以 root 权限运行命令则变为　<strong>#</strong>。</p>\n</li>\n</ol>\n<blockquote>\n<p>提示：在 BASH 前面还有一些信息包括用户名、主机名和当前目录。　如: leweis@leweis-PC:~/blog$</p>\n</blockquote>\n<ol start=\"3\">\n<li><p>sudo 工具可以临时提高用户权限。</p>\n</li>\n<li><p>/home 目录下是 Linux 用户目录，/etc 是系统绝大部分应用的配置文件。</p>\n</li>\n</ol>\n<blockquote>\n<p>系统命令本质上就是一些可执行文件,在/usr/bin目录下可以找到</p>\n</blockquote>\n<ol start=\"5\">\n<li>Shell 中的通配符:</li>\n</ol>\n<p><code>*</code> 表示一个或多个。<br>? 表示一个<br>[] 表示匹配中括号中的一个或多个字符，范围可以用 - 来表示。</p>\n<ol start=\"6\">\n<li>~ 表示用户的主目录。</li>\n</ol>\n<h2 id=\"Shell-常用命令\"><a href=\"#Shell-常用命令\" class=\"headerlink\" title=\"Shell 常用命令\"></a>Shell 常用命令</h2><p><strong>一．ls</strong>　</p>\n<ul>\n<li>列出目录下的内容。 -a 表示列出所有文件包括隐藏文件. -F 在目录后面会加上 / ,可执行文件后加上 * ，链接文件加上@, -l 查看文件的各种属性。</li>\n</ul>\n<blockquote>\n<p>ls -l 从左到右依次表示文件权限、文件链接个数、文件所有者的用户名、用户所在用户组、文件大小、文件最后被修改的日期、时间、文件名。</p>\n</blockquote>\n<p><strong>二．cd &amp;&amp; pwd</strong></p>\n<ul>\n<li><p>cd 进入目录。　..　表示上一级目录, . 表示当前目录　。</p>\n</li>\n<li><p>pwd 表示列出当前所在目录。</p>\n</li>\n</ul>\n<p><strong>三．cat &amp;&amp; more</strong></p>\n<ul>\n<li><p>用于查看文本文件。　cat 后面跟文件名作为参数（一个或多个文件名），-n 可以用来显示行号。</p>\n</li>\n<li><p>cat 的缺点就是会将所有的内容显示出来，可以使用 more 命令来显示　enter　向下翻动一行, 空格键向下翻动一页、Q退出。</p>\n</li>\n</ul>\n<p><strong>四．head &amp;&amp; tail</strong></p>\n<ul>\n<li>查看文件内容的开头和结尾，-n 指定显示的行数。</li>\n</ul>\n<p><strong>五．less</strong></p>\n<ul>\n<li>和 more　命令的作用一样功能更多，使用 b 向上翻一页，/可用于查找内容, -M 可以显示更多的信息。</li>\n</ul>\n<p><strong>六．grep</strong></p>\n<ul>\n<li>查找内容。有两个不同的参数分别是查找的内容和文件名字。</li>\n</ul>\n<p><strong>七．find</strong></p>\n<ul>\n<li>查找指定范围内的文件。语法如下</li>\n</ul>\n<blockquote>\n<p>find [OPTION] [path…] [expression] </p>\n</blockquote>\n<p><strong>示例：</strong> find /usr/bin -name zip -type d -print</p>\n<p><strong>八．located</strong></p>\n<ul>\n<li>快速定位文件。它可以自动建立整个文件名数据库。　</li>\n</ul>\n<blockquote>\n<p>located *.doc</p>\n</blockquote>\n<p><strong>九．whereis &amp;&amp; man &amp;&amp; whatis &amp;&amp; apropos</strong></p>\n<ul>\n<li><p>whereis 查找程序文件，包括可执行文件、源码和使用手册的所在处。可以使用 -b 参数指定查找二进制文件所在处。如果没找到则返回空的字符串！</p>\n</li>\n<li><p>它的缺点在于检索的子目录都是固定的。</p>\n</li>\n<li><p>man 提供用户的帮助手册。</p>\n</li>\n<li><p>whatis 帮助用户了解这个命令的作用。</p>\n</li>\n<li><p>apropos 是通过手册中反查到某个命令。</p>\n</li>\n</ul>\n<h2 id=\"其他一些常用指令\"><a href=\"#其他一些常用指令\" class=\"headerlink\" title=\"其他一些常用指令\"></a>其他一些常用指令</h2><ol>\n<li><p>从终端运行程序，可以直接运行该指令。也可以通过指令程序+&amp; 后台运行程序。</p>\n</li>\n<li><p>查看用户的版本和用户：</p>\n</li>\n<li><p>whoami who ：他们的区别在于用户是谁。</p>\n</li>\n<li><p>uname -a 显示当前系统版本的所有信息。　uname -r 显示当前系统的内核版本。</p>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck2h6jbfr0000dpkllpfmex0h","category_id":"ck2h6jbg00004dpkldtqzt79h","_id":"ck2h6jbg9000ddpklzk2oeqw5"},{"post_id":"ck2h6jbfx0002dpklnl20s8u1","category_id":"ck2h6jbg7000bdpklccbt4u2f","_id":"ck2h6jbga000idpklu2n6q3i3"},{"post_id":"ck2h6jbg10006dpklptf4r1bh","category_id":"ck2h6jbg9000edpkl3gibwevf","_id":"ck2h6jbgd000mdpklb9149bvn"},{"post_id":"ck2h6jbg40008dpkl3g8d50ls","category_id":"ck2h6jbg7000bdpklccbt4u2f","_id":"ck2h6jbge000odpkleg0jsxct"},{"post_id":"ck2h6jbg6000adpklbwafqyob","category_id":"ck2h6jbg9000edpkl3gibwevf","_id":"ck2h6jbgf000rdpkl4hwqdbqk"}],"PostTag":[{"post_id":"ck2h6jbfr0000dpkllpfmex0h","tag_id":"ck2h6jbg10005dpkln365f1d6","_id":"ck2h6jbga000gdpklze9pexv0"},{"post_id":"ck2h6jbfr0000dpkllpfmex0h","tag_id":"ck2h6jbg7000cdpklwi0lfmy8","_id":"ck2h6jbga000hdpkleihq66hz"},{"post_id":"ck2h6jbfx0002dpklnl20s8u1","tag_id":"ck2h6jbg9000fdpkl7j97qj6k","_id":"ck2h6jbge000qdpkllx558nr7"},{"post_id":"ck2h6jbfx0002dpklnl20s8u1","tag_id":"ck2h6jbga000kdpkla51nsfot","_id":"ck2h6jbgf000sdpklxu4ceki1"},{"post_id":"ck2h6jbfx0002dpklnl20s8u1","tag_id":"ck2h6jbgd000ndpkl20ijh0tg","_id":"ck2h6jbgg000udpkltjpcqjc7"},{"post_id":"ck2h6jbg10006dpklptf4r1bh","tag_id":"ck2h6jbge000pdpkllyknhlqd","_id":"ck2h6jbgh000wdpklyfcmcabg"},{"post_id":"ck2h6jbg10006dpklptf4r1bh","tag_id":"ck2h6jbgf000tdpklrzxrogha","_id":"ck2h6jbgh000xdpkloux1je4z"},{"post_id":"ck2h6jbg40008dpkl3g8d50ls","tag_id":"ck2h6jbg9000fdpkl7j97qj6k","_id":"ck2h6jbgi0010dpklt8si5pdf"},{"post_id":"ck2h6jbg40008dpkl3g8d50ls","tag_id":"ck2h6jbgh000ydpklbzmxu7tt","_id":"ck2h6jbgi0011dpkl2jjf758m"},{"post_id":"ck2h6jbg6000adpklbwafqyob","tag_id":"ck2h6jbgi000zdpkl76rkujzi","_id":"ck2h6jbgj0013dpklcyqrg4lo"},{"post_id":"ck2h6jbg6000adpklbwafqyob","tag_id":"ck2h6jbgf000tdpklrzxrogha","_id":"ck2h6jbgj0014dpklj09bz7b5"}],"Tag":[{"name":"Hexo博客教程","_id":"ck2h6jbg10005dpkln365f1d6"},{"name":"同步管理","_id":"ck2h6jbg7000cdpklwi0lfmy8"},{"name":"Go","_id":"ck2h6jbg9000fdpkl7j97qj6k"},{"name":"Go语言ORM库","_id":"ck2h6jbga000kdpkla51nsfot"},{"name":"xorm","_id":"ck2h6jbgd000ndpkl20ijh0tg"},{"name":"Shell目录管理命令","_id":"ck2h6jbge000pdpkllyknhlqd"},{"name":"Linux","_id":"ck2h6jbgf000tdpklrzxrogha"},{"name":"Go 并发编程","_id":"ck2h6jbgh000ydpklbzmxu7tt"},{"name":"Shell基本命令","_id":"ck2h6jbgi000zdpkl76rkujzi"}]}}